{"version":3,"sources":["webpack:///src/components/c-test.vue","webpack:///./src/components/c-test.vue?9d66","webpack:///./src/components/c-test.vue","webpack:///./node_modules/@qiun/ucharts/u-charts.js","webpack:///src/pages/indexpc.vue","webpack:///./src/pages/indexpc.vue?c414","webpack:///./src/pages/indexpc.vue","webpack:///src/components/solar-system.vue","webpack:///./src/components/solar-system.vue?f43d","webpack:///./src/components/solar-system.vue"],"names":["c_test","data","props","showtittle","type","Boolean","default","tittle","String","methods","components_c_test","render","_h","this","$createElement","_c","_self","staticClass","_v","_s","_e","staticRenderFns","src_components_c_test","__webpack_require__","normalizeComponent","ssrContext","config","version","yAxisWidth","xAxisHeight","xAxisTextPadding","padding","pixelRatio","rotate","fontSize","fontColor","dataPointShape","color","linearColor","pieChartLinePadding","pieChartTextPadding","titleFontSize","subtitleFontSize","toolTipPadding","toolTipBackground","toolTipOpacity","toolTipLineHeight","radarLabelTextMargin","u_charts_assign","target","varArgs","TypeError","length","forEach","val","deepAssign","obj1","obj2","key","toString","util","toFixed","num","limit","isFloat","approximatelyEqual","num1","num2","Math","abs","isSameSign","isSameXCoordinateArea","p1","p2","x","isCollision","end","start","width","y","height","hexToRgb","hexValue","opc","hex","replace","m","r","g","b","rgb","exec","parseInt","findRange","isNaN","Error","multiple","ceil","floor","calValidDistance","self","distance","chartData","opts","dataChartAreaWidth","area","dataChartWidth","eachSpacing","xAxisData","xAxisPoints","extra","mount","widthRatio","validDistance","uevent","trigger","scrollOption","position","xAxis","scrollPosition","isInAngleRange","angle","startAngle","endAngle","adjust","PI","createCurveControlPoints","points","i","isNotMiddlePoint","max","min","isNotMiddlePointX","pAx","pAy","pBx","pBy","last","ctrA","ctrB","convertCoordinateOrigin","center","avoidCollision","obj","fillSeries","series","index","item","linearIndex","show","pointShape","legendShape","fillCustomColor","linearType","customColor","newcolor","chazhi","push","measureText","text","context","split","test","dataCombine","reduce","a","concat","dataCombineStack","len","sum","Array","j","getTouches","touches","e","clientX","pix","pageY","currentTarget","offsetTop","getSeriesDataItem","group","newSeries","indexIsArr","constructor","indexOf","tempSeries","filterSeries","tmpindex","seriesItem","style","disableLegend","name","formatter","getToolTipData","seriesData","categories","option","arguments","undefined","calPoints","filterPoints","textList","map","titleText","offset","round","isInExactChartArea","currentPoints","isInExactPieChartArea","radius","pow","splitPoints","eachSeries","newPoints","items","connectNulls","calCategoriesData","result","categoriesTextLenth","xitem","maxTextLength","apply","rotateLabel","rotateAngle","tempHeight","sin","enableScroll","scrollShow","disabled","calXAxisData","columnstyle","bar","ranges","stack","sorted","filter","value","subitem","minData","maxData","minRange","range","eachRange","splitNumber","getXAxisTextList","rangesFormat","xAxisScaleValues","Object","assign","getXAxisPoints","textLength","getPieDataPoints","process","count","_start_","_proportion_","_radius_","getRoseDataPoints","minRadius","dataArr","radiusLength","_rose_proportion_","fixColumeData","columnLen","seriesGap","categoryGap","mix","column","fixBarData","spacingValid","dataCount","itemCount","boundaryGap","startX","endX","getDataPoints","maxRange","validHeight","validWidth","point","xranges","xminRange","xmaxRange","shift","pop","t","getMountDataPoints","mountOption","mountWidth","getBarDataPoints","yAxisPoints","getStackDataPoints","seriesIndex","stackSeries","height0","heightc","y0","getBarStackDataPoints","x0","getYAxisTextList","yData","dataRange","getDataRange","yAxis","reverse","calYAxisData","YLength","rangesArr","rangesFormatArr","yAxisWidthArr","unit","tofix","yAxisFontSizes","calibration","yAxisFontSize","contextRotate","rotateLock","translate","_rotate_","drawPointShape","shape","beginPath","dataPointShapeType","setStrokeStyle","setFillStyle","background","setLineWidth","moveTo","lineTo","arc","rect","closePath","fill","stroke","drawRingTitle","titlefontSize","title","subtitlefontSize","subtitle","titleFontColor","subtitleFontColor","titleHeight","subtitleHeight","textWidth","offsetX","startY","offsetY","setFontSize","fillText","_textWidth","_startX","_startY","drawPointText","textOffset","textSize","textColor","formatVal","setTextAlign","drawBarPointText","drawPieText","lineRadius","textObjectCollection","lastTextObject","seriesConvert","labelText","labelShow","orginX1","cos","orginY1","orginX2","orginY2","orginX3","orginY3","lineStart","lineEnd","lineStartPoistion","lineEndPoistion","textPosition","curveStartX","textStartX","quadraticCurveTo","drawMarkLine","markLineOption","dashLength","markLine","yAxisIndex","yAxisData","calMarkLineData","lineColor","showLabel","labelFontColor","labelBgColor","labelBgOpacity","labelAlign","labelOffsetX","labelOffsetY","setLineDash","bgWidth","bgStartX","bgStartY","textX","drawToolTipHorizentalLine","toolTipOption","gridType","tooltip","gridColor","yAxisLabel","minAxis","maxVal","calTooltipYAxisData","widthArr","tStartLeft","tStartRight","bgEndX","textY","drawToolTip","showBox","showArrow","showCategory","bgColor","bgOpacity","borderColor","borderWidth","borderRadius","borderOpacity","splitLine","unshift","legendWidth","legendMarginRight","arrowWidth","isOverRightBorder","endY","xAxisLabel","drawToolTipSplitLine","toolTipWidth","toolTipHeight","_scrollDistance_","fillRect","drawColumnDataPoints","columnOption","meterBorder","meterFillColor","barBorderCircle","barBorderRadius","linearOpacity","colorStop","save","leftNum","rightNum","activeBgColor","activeBgOpacity","activeWidth","drawToolTipSplitArea","tooltipPoints","fillColor","strokeColor","grd","createLinearGradient","addColorStop","left","top","r0","r1","r2","r3","indexn","fixColumeStackData","border","fixColumeMeterData","dataLabel","restore","drawMountDataPoints","bezierCurveTo","drawMountPointText","drawBarDataPoints","drawBarToolTipSplitArea","fixBarStackData","drawCandleDataPoints","seriesMA","candleOption","average","candle","upLine","upFill","downLine","downFill","day","leftSpace","rightSpace","splitPointList","startPoint","ctrlPoint","cPoints","indexs","getCandleDataPoints","drawToolTipBridge","horizentalLine","drawXAxis","scrollY","scrollScreenWidth","scrollTotalWidth","scrollWidth","scrollLeft","setLineCap","scrollBackgroundColor","scrollColor","disableGrid","gridEval","maxXAxisListLength","labelCount","ratio","newCategories","cgLength","xAxisFontSize","_xAxisTextAngle_","scrollHeight","axisLine","axisLineColor","drawYAxisGrid","xAxiseachSpacing","TotalWidth","drawYAxis","fillEndY","tStartCenter","textAlign","pos","tmpstrat","gapwidth","showTitle","titleOffsetX","titleOffsetY","drawLegend","legend","legendData","legendList","legendArea","shapeWidth","shapeRight","itemGap","lineHeight","backgroundColor","itemList","listIndex","heightArr","float","hiddenColor","fontTrans","legendText","drawPieDataPoints","pieOption","activeOpacity","activeRadius","offsetAngle","labelWidth","ringWidth","customRadius","centerColor","pie","ring","centerPosition","_pieTextMaxLength_","lineJoin","fillcolor","createCircularGradient","createRadialGradient","innerPieWidth","drawGaugeDataPoints","gaugeOption","labelOffset","fixRadius","childNumber","childWidth","pointer","gauge","oldAngle","oldData","totalAngle","tempStartAngle","_startAngle_","_endAngle_","getGaugeAxisPoints","innerRadius","pieRadius","gradient","childAngle","proc","arcbarOption","getGaugeArcbarDataPoints","pointerRadius","gradient3","eachCategories","splitAngle","childendX","_oldAngle_","getGaugeDataPoints","endNumber","startNumber","nowAngle","nowNumber","labelColor","drawGaugeLabel","drawRadarDataPoints","list","lengthList","radarOption","axisLabel","axisLabelTofix","labelPointShow","labelPointRadius","labelPointColor","opacity","gridCount","radar","coordinateAngle","eachAngle","CoordinateSeries","getRadarCoordinateSeries","xr","yr","_loop","startPos","radarDataPoints","angleList","each","listItem","tmp","proportion","getRadarDataPoints","stepLength","label","posPoint","posPointAxis","posRelativeCanvas","drawRadarLabel","lonlat2mercator","longitude","latitude","mercator","log","tan","coordinateToPoint","bounds","scale","xoffset","yoffset","xMin","yMax","isRayIntersectsSegment","poi","s_poi","e_poi","isPoiWithinPoly","poly","sinsc","epoly","normalInt","iter","arr","random","collisionNew","isIn","drawWordCloudDataPoints","wordOption","autoColors","word","wordCloudData","tHeight","tWidth","breaknum","areav","isSpin","getWordCloudPoint","strokeText","drawFunnelDataPoints","funnelOption","fillOpacity","funnel","sort","getFunnelDataPoints","funnelArea","drawFunnelText","drawCanvas","draw","Timing","easeIn","easeOut","easeInOut","linear","Animation","isStop","duration","timing","animationFrame","setTimeout","step","delay","timeStamp","Date","requestAnimationFrame","startTimeStamp","_step","timestamp","onProcess","onAnimationFinish","timingFunction","bind","u_charts_drawCharts","_this","pieSeriesArr","_pieSeries_","oldseries","fixPieSeries","animation","animationInstance","stop","dayArr","nameArr","colorArr","kdata","seriesTemp","k","calCandleMA","_series_","_calLegendData","wholeWidth","wholeHeight","margin","widthCount","widthCountArr","currentRow","itemWidth","maxHeight","maxLength","lineNum","temp","slice","maxWidth","calLegendData","legendHeight","_calYAxisData","maxTitleHeight","rightIndex","leftIndex","_calCategoriesData","categoriesData","scrollAlign","offsetLeft","currentOffset","startTouchX","lastMoveTime","getPieTextMaxLength","clearRect","coords","mapOption","activeBorderColor","activeFillColor","activeFillOpacity","xMax","yMin","coorda","geometry","coordinates","getBoundingBox","xScale","yScale","gaosi","centerPoint","properties","centroid","mapData","drawMapDataPoints","funnelData","_drawLineDataPoints","lineOption","line","lineType","drawLineDataPoints","enableMarkLine","_drawScatterDataPoints","scatter","drawScatterDataPoints","_drawBubbleDataPoints","bubbleOption","bubble","drawBubbleDataPoints","_drawMixDataPoints","areaOption","columnIndex","columnLength","firstPoint","lastPoint","addPoint","drawMixDataPoints","_drawColumnDataPoints","_drawMountDataPoints","_drawBarDataPoints","_drawAreaDataPoints","addLine","drawAreaDataPoints","pieData","roseOption","rose","drawRoseDataPoints","radarData","arcbarData","lineCap","gap","arcbar","getArcbarDataPoints","centerX","centerY","drawArcbarDataPoints","gaugeData","_drawCandleDataPoints","uChartsEvent","events","prototype","addEventListener","listener","delEventListener","_len","args","_key","params","uCharts","canvas2d","config$$1","tempWidth","strokeStyle","lineWidth","font","fillStyle","call","updateData","_getXAxisPoints0","zoom","console","centerLeft","screenWidth","MaxLeft","dobuleZoom","tcs","changedTouches","clientY","ntcs","xlength","moveCount","cts0","cts1","moveCurrent1","getCurrentDataIndex","moveCurrent2","currentEachSpacing","currentLeft","stopAnimation","mp","_touches$","currentIndex","atan2","findPieChartCurrentIndex","findRoseChartCurrentIndex","eachAngleArea","fixAngle","rangeStart","rangeEnd","findRadarChartCurrentIndex","findFunnelChartCurrentIndex","pointY","pointX","cData","findMapChartCurrentIndex","wordData","findWordChartCurrentIndex","current","spacing","findBarChartCurrentIndex","timePoints","pointValue","pointIndex","minValue","findCurrentIndex","getLegendDataIndex","isInExactLegendArea","findLegendIndex","touchLegend","showToolTip","_getToolTipData","_getMixToolTipData","getMixToolTipData","upColor","downColor","text1","text2","text3","text4","validCalPoints","getCandleToolTipData","scrollStart","scroll","now","Limit","touchMoveLimit","currMoveTime","_distance","scrollEnd","_scrollOption","u_charts","uChartsInstance","indexpc","isPc","solarWidth","solarHeight","elBtnLeft","cWidth","cHeight","chartsWidth","chartsHeight","created","pubMethods","getScreenWidth","getScreenHeight","components","ctest","solar","solar_system","computed","mounted","getServerData","onReady","drawCharts","id","ctx","document","getElementById","getContext","tap","pages_indexpc","_vm","attrs","indexpc_Component","indexpc_normalizeComponent","__webpack_exports__","Number","farule","chrule","speedrule","system","fa","ch","speed","components_solar_system","_l","planet","animationDuration","Component"],"mappings":"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","file":"static/js/1.0890f20fa2ab52a2c5b4.js","sourcesContent":["<template>\n    <div class=\"header-box\">\n      <div class=\"header-tittle\">\n        <span v-if=\"showtittle\">{{tittle}}</span>\n      </div>\n    </div>\n</template>\n\n<script>\n\nexport default {\n\n  data() {\n    return {}\n  },\n  props: {\n\n    showtittle: {\n      type: Boolean,\n      default: true\n    },\n    tittle: {\n      type: String,\n      default: '首页'\n    },\n  },\n  methods: {\n    \n  },  \n\n}\n</script>\n\n<style lang=\"less\" scoped>\n@import \"~styles/index.less\";\n@import \"~styles/variable.less\";\n.header-box{\n  width: 100%;\n  .h(100);\n  .lh(100);\n  background-color: black;\n  color: @base-header-color;\n  .fs(@base-header-size);\n  display: flex;\n  z-index: 1;\n  .header-tittle{\n    width: inherit;\n    flex: 3;\n  }\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/c-test.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"header-box\"},[_c('div',{staticClass:\"header-tittle\"},[(_vm.showtittle)?_c('span',[_vm._v(_vm._s(_vm.tittle))]):_vm._e()])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-52cf9705\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/c-test.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-52cf9705\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!less-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./c-test.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./c-test.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./c-test.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-52cf9705\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./c-test.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-52cf9705\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/c-test.vue\n// module id = null\n// module chunks = ","/*\n * uCharts (R)\n * 高性能跨平台图表库，支持H5、APP、小程序（微信/支付宝/百度/头条/QQ/360/快手）、Vue、Taro等支持canvas的框架平台\n * Copyright (C) 2018-2022 QIUN (R) 秋云 https://www.ucharts.cn All rights reserved.\n * Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n * 复制使用请保留本段注释，感谢支持开源！\n * \n * uCharts (R) 官方网站\n * https://www.uCharts.cn\n * \n * 开源地址:\n * https://gitee.com/uCharts/uCharts\n * \n * uni-app插件市场地址：\n * http://ext.dcloud.net.cn/plugin?id=271\n * \n */\r\n\r\n'use strict';\r\n\r\nvar config = {\r\n  version: 'v2.4.3-20220505',\r\n  yAxisWidth: 15,\r\n  xAxisHeight: 22,\r\n  xAxisTextPadding: 3,\r\n  padding: [10, 10, 10, 10],\r\n  pixelRatio: 1,\r\n  rotate: false,\r\n  fontSize: 13,\r\n  fontColor: '#666666',\r\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\r\n  color: ['#1890FF', '#91CB74', '#FAC858', '#EE6666', '#73C0DE', '#3CA272', '#FC8452', '#9A60B4', '#ea7ccc'],\r\n  linearColor: ['#0EE2F8', '#2BDCA8', '#FA7D8D', '#EB88E2', '#2AE3A0', '#0EE2F8', '#EB88E2', '#6773E3', '#F78A85'],\r\n  pieChartLinePadding: 15,\r\n  pieChartTextPadding: 5,\r\n  titleFontSize: 20,\r\n  subtitleFontSize: 15,\r\n  toolTipPadding: 3,\r\n  toolTipBackground: '#000000',\r\n  toolTipOpacity: 0.7,\r\n  toolTipLineHeight: 20,\r\n  radarLabelTextMargin: 13,\r\n};\r\n\r\nvar assign = function(target, ...varArgs) {\r\n  if (target == null) {\r\n    throw new TypeError('[uCharts] Cannot convert undefined or null to object');\r\n  }\r\n  if (!varArgs || varArgs.length <= 0) {\r\n    return target;\r\n  }\r\n  // 深度合并对象\r\n  function deepAssign(obj1, obj2) {\r\n    for (let key in obj2) {\r\n      obj1[key] = obj1[key] && obj1[key].toString() === \"[object Object]\" ?\r\n        deepAssign(obj1[key], obj2[key]) : obj1[key] = obj2[key];\r\n    }\r\n    return obj1;\r\n  }\r\n  varArgs.forEach(val => {\r\n    target = deepAssign(target, val);\r\n  });\r\n  return target;\r\n};\r\n\r\nvar util = {\r\n  toFixed: function toFixed(num, limit) {\r\n    limit = limit || 2;\r\n    if (this.isFloat(num)) {\r\n      num = num.toFixed(limit);\r\n    }\r\n    return num;\r\n  },\r\n  isFloat: function isFloat(num) {\r\n    return num % 1 !== 0;\r\n  },\r\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\r\n    return Math.abs(num1 - num2) < 1e-10;\r\n  },\r\n  isSameSign: function isSameSign(num1, num2) {\r\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\r\n  },\r\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\r\n    return this.isSameSign(p1.x, p2.x);\r\n  },\r\n  isCollision: function isCollision(obj1, obj2) {\r\n    obj1.end = {};\r\n    obj1.end.x = obj1.start.x + obj1.width;\r\n    obj1.end.y = obj1.start.y - obj1.height;\r\n    obj2.end = {};\r\n    obj2.end.x = obj2.start.x + obj2.width;\r\n    obj2.end.y = obj2.start.y - obj2.height;\r\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\r\n    return !flag;\r\n  }\r\n};\r\n\r\n//兼容H5点击事件\r\nfunction getH5Offset(e) {\r\n  e.mp = {\r\n    changedTouches: []\r\n  };\r\n  e.mp.changedTouches.push({\r\n    x: e.offsetX,\r\n    y: e.offsetY\r\n  });\r\n  return e;\r\n}\r\n\r\n// hex 转 rgba\r\nfunction hexToRgb(hexValue, opc) {\r\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  var hex = hexValue.replace(rgx, function(m, r, g, b) {\r\n    return r + r + g + g + b + b;\r\n  });\r\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  var r = parseInt(rgb[1], 16);\r\n  var g = parseInt(rgb[2], 16);\r\n  var b = parseInt(rgb[3], 16);\r\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + opc + ')';\r\n}\r\n\r\nfunction findRange(num, type, limit) {\r\n  if (isNaN(num)) {\r\n    throw new Error('[uCharts] series数据需为Number格式');\r\n  }\r\n  limit = limit || 10;\r\n  type = type ? type : 'upper';\r\n  var multiple = 1;\r\n  while (limit < 1) {\r\n    limit *= 10;\r\n    multiple *= 10;\r\n  }\r\n  if (type === 'upper') {\r\n    num = Math.ceil(num * multiple);\r\n  } else {\r\n    num = Math.floor(num * multiple);\r\n  }\r\n  while (num % limit !== 0) {\r\n    if (type === 'upper') {\r\n      if (num == num + 1) { //修复数据值过大num++无效的bug by 向日葵 @xrk_jy\r\n        break;\r\n      }\r\n      num++;\r\n    } else {\r\n      num--;\r\n    }\r\n  }\r\n  return num / multiple;\r\n}\r\n\r\nfunction calCandleMA(dayArr, nameArr, colorArr, kdata) {\r\n  let seriesTemp = [];\r\n  for (let k = 0; k < dayArr.length; k++) {\r\n    let seriesItem = {\r\n      data: [],\r\n      name: nameArr[k],\r\n      color: colorArr[k]\r\n    };\r\n    for (let i = 0, len = kdata.length; i < len; i++) {\r\n      if (i < dayArr[k]) {\r\n        seriesItem.data.push(null);\r\n        continue;\r\n      }\r\n      let sum = 0;\r\n      for (let j = 0; j < dayArr[k]; j++) {\r\n        sum += kdata[i - j][1];\r\n      }\r\n      seriesItem.data.push(+(sum / dayArr[k]).toFixed(3));\r\n    }\r\n    seriesTemp.push(seriesItem);\r\n  }\r\n  return seriesTemp;\r\n}\r\n\r\nfunction calValidDistance(self, distance, chartData, config, opts) {\r\n  var dataChartAreaWidth = opts.width - opts.area[1] - opts.area[3];\r\n  var dataChartWidth = chartData.eachSpacing * (opts.chartData.xAxisData.xAxisPoints.length - 1);\r\n  if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1){\r\n    if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n    dataChartWidth += (opts.extra.mount.widthRatio - 1)*chartData.eachSpacing;\r\n  }\r\n  var validDistance = distance;\r\n  if (distance >= 0) {\r\n    validDistance = 0;\r\n    self.uevent.trigger('scrollLeft');\r\n    self.scrollOption.position = 'left'\r\n    opts.xAxis.scrollPosition = 'left';\r\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\r\n    validDistance = dataChartAreaWidth - dataChartWidth;\r\n    self.uevent.trigger('scrollRight');\r\n    self.scrollOption.position = 'right'\r\n    opts.xAxis.scrollPosition = 'right';\r\n  } else {\r\n    self.scrollOption.position = distance\r\n    opts.xAxis.scrollPosition = distance;\r\n  }\r\n  return validDistance;\r\n}\r\n\r\nfunction isInAngleRange(angle, startAngle, endAngle) {\r\n  function adjust(angle) {\r\n    while (angle < 0) {\r\n      angle += 2 * Math.PI;\r\n    }\r\n    while (angle > 2 * Math.PI) {\r\n      angle -= 2 * Math.PI;\r\n    }\r\n    return angle;\r\n  }\r\n  angle = adjust(angle);\r\n  startAngle = adjust(startAngle);\r\n  endAngle = adjust(endAngle);\r\n  if (startAngle > endAngle) {\r\n    endAngle += 2 * Math.PI;\r\n    if (angle < startAngle) {\r\n      angle += 2 * Math.PI;\r\n    }\r\n  }\r\n  return angle >= startAngle && angle <= endAngle;\r\n}\r\n\r\nfunction createCurveControlPoints(points, i) {\r\n  function isNotMiddlePoint(points, i) {\r\n    if (points[i - 1] && points[i + 1]) {\r\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y,\r\n        points[i + 1].y);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  function isNotMiddlePointX(points, i) {\r\n    if (points[i - 1] && points[i + 1]) {\r\n      return points[i].x >= Math.max(points[i - 1].x, points[i + 1].x) || points[i].x <= Math.min(points[i - 1].x,\r\n        points[i + 1].x);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  var a = 0.2;\r\n  var b = 0.2;\r\n  var pAx = null;\r\n  var pAy = null;\r\n  var pBx = null;\r\n  var pBy = null;\r\n  if (i < 1) {\r\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\r\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\r\n  } else {\r\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\r\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\r\n  }\r\n\r\n  if (i > points.length - 3) {\r\n    var last = points.length - 1;\r\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\r\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\r\n  } else {\r\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\r\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\r\n  }\r\n  if (isNotMiddlePoint(points, i + 1)) {\r\n    pBy = points[i + 1].y;\r\n  }\r\n  if (isNotMiddlePoint(points, i)) {\r\n    pAy = points[i].y;\r\n  }\r\n  if (isNotMiddlePointX(points, i + 1)) {\r\n    pBx = points[i + 1].x;\r\n  }\r\n  if (isNotMiddlePointX(points, i)) {\r\n    pAx = points[i].x;\r\n  }\r\n  if (pAy >= Math.max(points[i].y, points[i + 1].y) || pAy <= Math.min(points[i].y, points[i + 1].y)) {\r\n    pAy = points[i].y;\r\n  }\r\n  if (pBy >= Math.max(points[i].y, points[i + 1].y) || pBy <= Math.min(points[i].y, points[i + 1].y)) {\r\n    pBy = points[i + 1].y;\r\n  }\r\n  if (pAx >= Math.max(points[i].x, points[i + 1].x) || pAx <= Math.min(points[i].x, points[i + 1].x)) {\r\n    pAx = points[i].x;\r\n  }\r\n  if (pBx >= Math.max(points[i].x, points[i + 1].x) || pBx <= Math.min(points[i].x, points[i + 1].x)) {\r\n    pBx = points[i + 1].x;\r\n  }\r\n  return {\r\n    ctrA: {\r\n      x: pAx,\r\n      y: pAy\r\n    },\r\n    ctrB: {\r\n      x: pBx,\r\n      y: pBy\r\n    }\r\n  };\r\n}\r\n\r\n\r\nfunction convertCoordinateOrigin(x, y, center) {\r\n  return {\r\n    x: center.x + x,\r\n    y: center.y - y\r\n  };\r\n}\r\n\r\nfunction avoidCollision(obj, target) {\r\n  if (target) {\r\n    // is collision test\r\n    while (util.isCollision(obj, target)) {\r\n      if (obj.start.x > 0) {\r\n        obj.start.y--;\r\n      } else if (obj.start.x < 0) {\r\n        obj.start.y++;\r\n      } else {\r\n        if (obj.start.y > 0) {\r\n          obj.start.y++;\r\n        } else {\r\n          obj.start.y--;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\nfunction fixPieSeries(series, opts, config){\r\n  let pieSeriesArr = [];\r\n  if(series.length>0 && series[0].data.constructor.toString().indexOf('Array') > -1){\r\n    opts._pieSeries_ = series;\r\n    let oldseries = series[0].data;\r\n    for (var i = 0; i < oldseries.length; i++) {\r\n      oldseries[i].formatter = series[0].formatter;\r\n      oldseries[i].data = oldseries[i].value;\r\n      pieSeriesArr.push(oldseries[i]);\r\n    }\r\n    opts.series = pieSeriesArr;\r\n  }else{\r\n    pieSeriesArr = series;\r\n  }\r\n  return pieSeriesArr;\r\n}\r\n\r\nfunction fillSeries(series, opts, config) {\r\n  var index = 0;\r\n  for (var i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    if (!item.color) {\r\n      item.color = config.color[index];\r\n      index = (index + 1) % config.color.length;\r\n    }\r\n    if (!item.linearIndex) {\r\n      item.linearIndex = i;\r\n    }\r\n    if (!item.index) {\r\n      item.index = 0;\r\n    }\r\n    if (!item.type) {\r\n      item.type = opts.type;\r\n    }\r\n    if (typeof item.show == \"undefined\") {\r\n      item.show = true;\r\n    }\r\n    if (!item.type) {\r\n      item.type = opts.type;\r\n    }\r\n    if (!item.pointShape) {\r\n      item.pointShape = \"circle\";\r\n    }\r\n    if (!item.legendShape) {\r\n      switch (item.type) {\r\n        case 'line':\r\n          item.legendShape = \"line\";\r\n          break;\r\n        case 'column':\r\n        case 'bar':\r\n          item.legendShape = \"rect\";\r\n          break;\r\n        case 'area':\r\n        case 'mount':\r\n          item.legendShape = \"triangle\";\r\n          break;\r\n        default:\r\n          item.legendShape = \"circle\";\r\n      }\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction fillCustomColor(linearType, customColor, series, config) {\r\n  var newcolor = customColor || [];\r\n  if (linearType == 'custom' && newcolor.length == 0 ) {\r\n    newcolor = config.linearColor;\r\n  }\r\n  if (linearType == 'custom' && newcolor.length < series.length) {\r\n    let chazhi = series.length - newcolor.length;\r\n    for (var i = 0; i < chazhi; i++) {\r\n      newcolor.push(config.linearColor[(i + 1) % config.linearColor.length]);\r\n    }\r\n  }\r\n  return newcolor;\r\n}\r\n\r\nfunction getDataRange(minData, maxData) {\r\n  var limit = 0;\r\n  var range = maxData - minData;\r\n  if (range >= 10000) {\r\n    limit = 1000;\r\n  } else if (range >= 1000) {\r\n    limit = 100;\r\n  } else if (range >= 100) {\r\n    limit = 10;\r\n  } else if (range >= 10) {\r\n    limit = 5;\r\n  } else if (range >= 1) {\r\n    limit = 1;\r\n  } else if (range >= 0.1) {\r\n    limit = 0.1;\r\n  } else if (range >= 0.01) {\r\n    limit = 0.01;\r\n  } else if (range >= 0.001) {\r\n    limit = 0.001;\r\n  } else if (range >= 0.0001) {\r\n    limit = 0.0001;\r\n  } else if (range >= 0.00001) {\r\n    limit = 0.00001;\r\n  } else {\r\n    limit = 0.000001;\r\n  }\r\n  return {\r\n    minRange: findRange(minData, 'lower', limit),\r\n    maxRange: findRange(maxData, 'upper', limit)\r\n  };\r\n}\r\n\r\nfunction measureText(text, fontSize, context) {\r\n  var width = 0;\r\n  text = String(text);\r\n  // #ifdef MP-ALIPAY || MP-BAIDU || APP-NVUE\r\n  context = false;\r\n  // #endif\r\n  if (context !== false && context !== undefined && context.setFontSize && context.measureText) {\r\n    context.setFontSize(fontSize);\r\n    return context.measureText(text).width;\r\n  } else {\r\n    var text = text.split('');\r\n    for (let i = 0; i < text.length; i++) {\r\n      let item = text[i];\r\n      if (/[a-zA-Z]/.test(item)) {\r\n        width += 7;\r\n      } else if (/[0-9]/.test(item)) {\r\n        width += 5.5;\r\n      } else if (/\\./.test(item)) {\r\n        width += 2.7;\r\n      } else if (/-/.test(item)) {\r\n        width += 3.25;\r\n      } else if (/:/.test(item)) {\r\n        width += 2.5;\r\n      } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\r\n        width += 10;\r\n      } else if (/\\(|\\)/.test(item)) {\r\n        width += 3.73;\r\n      } else if (/\\s/.test(item)) {\r\n        width += 2.5;\r\n      } else if (/%/.test(item)) {\r\n        width += 8;\r\n      } else {\r\n        width += 10;\r\n      }\r\n    }\r\n    return width * fontSize / 10;\r\n  }\r\n}\r\n\r\nfunction dataCombine(series) {\r\n  return series.reduce(function(a, b) {\r\n    return (a.data ? a.data : a).concat(b.data);\r\n  }, []);\r\n}\r\n\r\nfunction dataCombineStack(series, len) {\r\n  var sum = new Array(len);\r\n  for (var j = 0; j < sum.length; j++) {\r\n    sum[j] = 0;\r\n  }\r\n  for (var i = 0; i < series.length; i++) {\r\n    for (var j = 0; j < sum.length; j++) {\r\n      sum[j] += series[i].data[j];\r\n    }\r\n  }\r\n  return series.reduce(function(a, b) {\r\n    return (a.data ? a.data : a).concat(b.data).concat(sum);\r\n  }, []);\r\n}\r\n\r\nfunction getTouches(touches, opts, e) {\r\n  let x, y;\r\n  if (touches.clientX) {\r\n    if (opts.rotate) {\r\n      y = opts.height - touches.clientX * opts.pix;\r\n      x = (touches.pageY - e.currentTarget.offsetTop - (opts.height / opts.pix / 2) * (opts.pix - 1)) * opts.pix;\r\n    } else {\r\n      x = touches.clientX * opts.pix;\r\n      y = (touches.pageY - e.currentTarget.offsetTop - (opts.height / opts.pix / 2) * (opts.pix - 1)) * opts.pix;\r\n    }\r\n  } else {\r\n    if (opts.rotate) {\r\n      y = opts.height - touches.x * opts.pix;\r\n      x = touches.y * opts.pix;\r\n    } else {\r\n      x = touches.x * opts.pix;\r\n      y = touches.y * opts.pix;\r\n    }\r\n  }\r\n  return {\r\n    x: x,\r\n    y: y\r\n  }\r\n}\r\n\r\nfunction getSeriesDataItem(series, index, group) {\r\n  var data = [];\r\n  var newSeries = [];\r\n  var indexIsArr = index.constructor.toString().indexOf('Array') > -1;\r\n  if(indexIsArr){\r\n    let tempSeries = filterSeries(series);\r\n    for (var i = 0; i < group.length; i++) {\r\n      newSeries.push(tempSeries[group[i]]);\r\n    }\r\n  }else{\r\n    newSeries = series;\r\n  };\r\n  for (let i = 0; i < newSeries.length; i++) {\r\n    let item = newSeries[i];\r\n    let tmpindex = -1;\r\n    if(indexIsArr){\r\n      tmpindex = index[i];\r\n    }else{\r\n      tmpindex = index;\r\n    }\r\n    if (item.data[tmpindex] !== null && typeof item.data[tmpindex] !== 'undefined' && item.show) {\r\n      let seriesItem = {};\r\n      seriesItem.color = item.color;\r\n      seriesItem.type = item.type;\r\n      seriesItem.style = item.style;\r\n      seriesItem.pointShape = item.pointShape;\r\n      seriesItem.disableLegend = item.disableLegend;\r\n      seriesItem.name = item.name;\r\n      seriesItem.show = item.show;\r\n      seriesItem.data = item.formatter ? item.formatter(item.data[tmpindex]) : item.data[tmpindex];\r\n      data.push(seriesItem);\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getMaxTextListLength(list, fontSize, context) {\r\n  var lengthList = list.map(function(item) {\r\n    return measureText(item, fontSize, context);\r\n  });\r\n  return Math.max.apply(null, lengthList);\r\n}\r\n\r\nfunction getRadarCoordinateSeries(length) {\r\n  var eachAngle = 2 * Math.PI / length;\r\n  var CoordinateSeries = [];\r\n  for (var i = 0; i < length; i++) {\r\n    CoordinateSeries.push(eachAngle * i);\r\n  }\r\n  return CoordinateSeries.map(function(item) {\r\n    return -1 * item + Math.PI / 2;\r\n  });\r\n}\r\n\r\nfunction getToolTipData(seriesData, opts, index, group, categories) {\r\n  var option = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\r\n  var calPoints = opts.chartData.calPoints?opts.chartData.calPoints:[];\r\n  let points = {};\r\n  if(group.length > 0){\r\n    let filterPoints = [];\r\n    for (let i = 0; i < group.length; i++) {\r\n      filterPoints.push(calPoints[group[i]])\r\n    }\r\n    points = filterPoints[0][index[0]];\r\n  }else{\r\n    for (let i = 0; i < calPoints.length; i++) {\r\n      if(calPoints[i][index]){\r\n        points = calPoints[i][index];\r\n        break;\r\n      }\r\n    }\r\n  };\r\n  var textList = seriesData.map(function(item) {\r\n    let titleText = null;\r\n    if (opts.categories && opts.categories.length>0) {\r\n      titleText = categories[index];\r\n    };\r\n    return {\r\n      text: option.formatter ? option.formatter(item, titleText, index, opts) : item.name + ': ' + item.data,\r\n      color: item.color\r\n    };\r\n  });\r\n  var offset = {\r\n    x: Math.round(points.x),\r\n    y: Math.round(points.y)\r\n  };\r\n  return {\r\n    textList: textList,\r\n    offset: offset\r\n  };\r\n}\r\n\r\nfunction getMixToolTipData(seriesData, opts, index, categories) {\r\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\r\n  var points = opts.chartData.xAxisPoints[index] + opts.chartData.eachSpacing / 2;\r\n  var textList = seriesData.map(function(item) {\r\n    return {\r\n      text: option.formatter ? option.formatter(item, categories[index], index, opts) : item.name + ': ' + item.data,\r\n      color: item.color,\r\n      disableLegend: item.disableLegend ? true : false\r\n    };\r\n  });\r\n  textList = textList.filter(function(item) {\r\n    if (item.disableLegend !== true) {\r\n      return item;\r\n    }\r\n  });\r\n  var offset = {\r\n    x: Math.round(points),\r\n    y: 0\r\n  };\r\n  return {\r\n    textList: textList,\r\n    offset: offset\r\n  };\r\n}\r\n\r\nfunction getCandleToolTipData(series, seriesData, opts, index, categories, extra) {\r\n  var option = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\r\n  var calPoints = opts.chartData.calPoints;\r\n  let upColor = extra.color.upFill;\r\n  let downColor = extra.color.downFill;\r\n  //颜色顺序为开盘，收盘，最低，最高\r\n  let color = [upColor, upColor, downColor, upColor];\r\n  var textList = [];\r\n  seriesData.map(function(item) {\r\n    if (index == 0) {\r\n      if (item.data[1] - item.data[0] < 0) {\r\n        color[1] = downColor;\r\n      } else {\r\n        color[1] = upColor;\r\n      }\r\n    } else {\r\n      if (item.data[0] < series[index - 1][1]) {\r\n        color[0] = downColor;\r\n      }\r\n      if (item.data[1] < item.data[0]) {\r\n        color[1] = downColor;\r\n      }\r\n      if (item.data[2] > series[index - 1][1]) {\r\n        color[2] = upColor;\r\n      }\r\n      if (item.data[3] < series[index - 1][1]) {\r\n        color[3] = downColor;\r\n      }\r\n    }\r\n    let text1 = {\r\n      text: '开盘：' + item.data[0],\r\n      color: color[0]\r\n    };\r\n    let text2 = {\r\n      text: '收盘：' + item.data[1],\r\n      color: color[1]\r\n    };\r\n    let text3 = {\r\n      text: '最低：' + item.data[2],\r\n      color: color[2]\r\n    };\r\n    let text4 = {\r\n      text: '最高：' + item.data[3],\r\n      color: color[3]\r\n    };\r\n    textList.push(text1, text2, text3, text4);\r\n  });\r\n  var validCalPoints = [];\r\n  var offset = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  for (let i = 0; i < calPoints.length; i++) {\r\n    let points = calPoints[i];\r\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\r\n      validCalPoints.push(points[index]);\r\n    }\r\n  }\r\n  offset.x = Math.round(validCalPoints[0][0].x);\r\n  return {\r\n    textList: textList,\r\n    offset: offset\r\n  };\r\n}\r\n\r\nfunction filterSeries(series) {\r\n  let tempSeries = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    if (series[i].show == true) {\r\n      tempSeries.push(series[i])\r\n    }\r\n  }\r\n  return tempSeries;\r\n}\r\n\r\nfunction findCurrentIndex(currentPoints, calPoints, opts, config) {\r\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\r\n  var current={ index:-1, group:[] };\r\n  var spacing = opts.chartData.eachSpacing / 2;\r\n  let xAxisPoints = [];\r\n  if (calPoints && calPoints.length > 0) {\r\n    if (!opts.categories) {\r\n      spacing = 0;\r\n    }else{\r\n      for (let i = 1; i < opts.chartData.xAxisPoints.length; i++) {\r\n        xAxisPoints.push(opts.chartData.xAxisPoints[i] - spacing);\r\n      }\r\n      if ((opts.type == 'line' || opts.type == 'area') && opts.xAxis.boundaryGap == 'justify') {\r\n        xAxisPoints = opts.chartData.xAxisPoints;\r\n      }\r\n    }\r\n    if (isInExactChartArea(currentPoints, opts, config)) {\r\n      if (!opts.categories) {\r\n        let timePoints = Array(calPoints.length);\r\n        for (let i = 0; i < calPoints.length; i++) {\r\n          timePoints[i] = Array(calPoints[i].length)\r\n          for (let j = 0; j < calPoints[i].length; j++) {\r\n            timePoints[i][j] = (Math.abs(calPoints[i][j].x - currentPoints.x));\r\n          }\r\n        };\r\n        let pointValue =  Array(timePoints.length);\r\n        let pointIndex =  Array(timePoints.length);\r\n        for (let i = 0; i < timePoints.length; i++) {\r\n          pointValue[i] = Math.min.apply(null, timePoints[i]);\r\n          pointIndex[i] = timePoints[i].indexOf(pointValue[i]);\r\n        }\r\n        let minValue = Math.min.apply(null, pointValue);\r\n        current.index = [];\r\n        for (let i = 0; i < pointValue.length; i++) {\r\n          if(pointValue[i] == minValue){\r\n            current.group.push(i);\r\n            current.index.push(pointIndex[i]);\r\n          }\r\n        };\r\n      }else{\r\n        xAxisPoints.forEach(function(item, index) {\r\n          if (currentPoints.x + offset + spacing > item) {\r\n            current.index = index;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return current;\r\n}\r\n\r\nfunction findBarChartCurrentIndex(currentPoints, calPoints, opts, config) {\r\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\r\n  var current={ index:-1, group:[] };\r\n  var spacing = opts.chartData.eachSpacing / 2;\r\n  let yAxisPoints = opts.chartData.yAxisPoints;\r\n  if (calPoints && calPoints.length > 0) {\r\n    if (isInExactChartArea(currentPoints, opts, config)) {\r\n      yAxisPoints.forEach(function(item, index) {\r\n        if (currentPoints.y + offset + spacing > item) {\r\n          current.index = index;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  return current;\r\n}\r\n\r\nfunction findLegendIndex(currentPoints, legendData, opts) {\r\n  let currentIndex = -1;\r\n  let gap = 0;\r\n  if (isInExactLegendArea(currentPoints, legendData.area)) {\r\n    let points = legendData.points;\r\n    let index = -1;\r\n    for (let i = 0, len = points.length; i < len; i++) {\r\n      let item = points[i];\r\n      for (let j = 0; j < item.length; j++) {\r\n        index += 1;\r\n        let area = item[j]['area'];\r\n        if (area && currentPoints.x > area[0] - gap && currentPoints.x < area[2] + gap && currentPoints.y > area[1] - gap && currentPoints.y < area[3] + gap) {\r\n          currentIndex = index;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return currentIndex;\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction isInExactLegendArea(currentPoints, area) {\r\n  return currentPoints.x > area.start.x && currentPoints.x < area.end.x && currentPoints.y > area.start.y && currentPoints.y < area.end.y;\r\n}\r\n\r\nfunction isInExactChartArea(currentPoints, opts, config) {\r\n  return currentPoints.x <= opts.width - opts.area[1] + 10 && currentPoints.x >= opts.area[3] - 10 && currentPoints.y >= opts.area[0] && currentPoints.y <= opts.height - opts.area[2];\r\n}\r\n\r\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\r\n  var eachAngleArea = 2 * Math.PI / count;\r\n  var currentIndex = -1;\r\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\r\n    var fixAngle = function fixAngle(angle) {\r\n      if (angle < 0) {\r\n        angle += 2 * Math.PI;\r\n      }\r\n      if (angle > 2 * Math.PI) {\r\n        angle -= 2 * Math.PI;\r\n      }\r\n      return angle;\r\n    };\r\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\r\n    angle = -1 * angle;\r\n    if (angle < 0) {\r\n      angle += 2 * Math.PI;\r\n    }\r\n    var angleList = radarData.angleList.map(function(item) {\r\n      item = fixAngle(-1 * item);\r\n      return item;\r\n    });\r\n    angleList.forEach(function(item, index) {\r\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\r\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\r\n      if (rangeEnd < rangeStart) {\r\n        rangeEnd += 2 * Math.PI;\r\n      }\r\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <= rangeEnd) {\r\n        currentIndex = index;\r\n      }\r\n    });\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findFunnelChartCurrentIndex(currentPoints, funnelData) {\r\n  var currentIndex = -1;\r\n  for (var i = 0, len = funnelData.series.length; i < len; i++) {\r\n    var item = funnelData.series[i];\r\n    if (currentPoints.x > item.funnelArea[0] && currentPoints.x < item.funnelArea[2] && currentPoints.y > item.funnelArea[1] && currentPoints.y < item.funnelArea[3]) {\r\n      currentIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findWordChartCurrentIndex(currentPoints, wordData) {\r\n  var currentIndex = -1;\r\n  for (var i = 0, len = wordData.length; i < len; i++) {\r\n    var item = wordData[i];\r\n    if (currentPoints.x > item.area[0] && currentPoints.x < item.area[2] && currentPoints.y > item.area[1] && currentPoints.y < item.area[3]) {\r\n      currentIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findMapChartCurrentIndex(currentPoints, opts) {\r\n  var currentIndex = -1;\r\n  var cData = opts.chartData.mapData;\r\n  var data = opts.series;\r\n  var tmp = pointToCoordinate(currentPoints.y, currentPoints.x, cData.bounds, cData.scale, cData.xoffset, cData.yoffset);\r\n  var poi = [tmp.x, tmp.y];\r\n  for (var i = 0, len = data.length; i < len; i++) {\r\n    var item = data[i].geometry.coordinates;\r\n    if (isPoiWithinPoly(poi, item, opts.chartData.mapData.mercator)) {\r\n      currentIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findRoseChartCurrentIndex(currentPoints, pieData, opts) {\r\n  var currentIndex = -1;\r\n  var series = getRoseDataPoints(opts._series_, opts.extra.rose.type, pieData.radius, pieData.radius);\r\n  if (pieData && pieData.center && isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\r\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\r\n    angle = -angle;\r\n    if(opts.extra.rose && opts.extra.rose.offsetAngle){\r\n      angle = angle - opts.extra.rose.offsetAngle * Math.PI / 180;\r\n    }\r\n    for (var i = 0, len = series.length; i < len; i++) {\r\n      if (isInAngleRange(angle, series[i]._start_, series[i]._start_ + series[i]._rose_proportion_ * 2 * Math.PI)) {\r\n        currentIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findPieChartCurrentIndex(currentPoints, pieData, opts) {\r\n  var currentIndex = -1;\r\n  var series = getPieDataPoints(pieData.series);\r\n  if (pieData && pieData.center && isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\r\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\r\n    angle = -angle;\r\n    if(opts.extra.pie && opts.extra.pie.offsetAngle){\r\n      angle = angle - opts.extra.pie.offsetAngle * Math.PI / 180;\r\n    }\r\n    if(opts.extra.ring && opts.extra.ring.offsetAngle){\r\n      angle = angle - opts.extra.ring.offsetAngle * Math.PI / 180;\r\n    }\r\n    for (var i = 0, len = series.length; i < len; i++) {\r\n      if (isInAngleRange(angle, series[i]._start_, series[i]._start_ + series[i]._proportion_ * 2 * Math.PI)) {\r\n        currentIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction isInExactPieChartArea(currentPoints, center, radius) {\r\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\r\n}\r\n\r\n\r\nfunction splitPoints(points,eachSeries) {\r\n  var newPoints = [];\r\n  var items = [];\r\n  points.forEach(function(item, index) {\r\n    if(eachSeries.connectNulls){\r\n      if (item !== null) {\r\n        items.push(item);\r\n      }\r\n    }else{\r\n      if (item !== null) {\r\n        items.push(item);\r\n      } else {\r\n        if (items.length) {\r\n          newPoints.push(items);\r\n        }\r\n        items = [];\r\n      }\r\n    }\r\n    \r\n  });\r\n  if (items.length) {\r\n    newPoints.push(items);\r\n  }\r\n  return newPoints;\r\n}\r\n\r\n\r\nfunction calLegendData(series, opts, config, chartData, context) {\r\n  let legendData = {\r\n    area: {\r\n      start: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      end: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      width: 0,\r\n      height: 0,\r\n      wholeWidth: 0,\r\n      wholeHeight: 0\r\n    },\r\n    points: [],\r\n    widthArr: [],\r\n    heightArr: []\r\n  };\r\n  if (opts.legend.show === false) {\r\n    chartData.legendData = legendData;\r\n    return legendData;\r\n  }\r\n  let padding = opts.legend.padding * opts.pix;\r\n  let margin = opts.legend.margin * opts.pix;\r\n  let fontSize = opts.legend.fontSize ? opts.legend.fontSize * opts.pix : config.fontSize;\r\n  let shapeWidth = 15 * opts.pix;\r\n  let shapeRight = 5 * opts.pix;\r\n  let lineHeight = Math.max(opts.legend.lineHeight * opts.pix, fontSize);\r\n  if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\r\n    let legendList = [];\r\n    let widthCount = 0;\r\n    let widthCountArr = [];\r\n    let currentRow = [];\r\n    for (let i = 0; i < series.length; i++) {\r\n      let item = series[i];\r\n      const legendText = item.legendText ? item.legendText : item.name;\r\n      let itemWidth = shapeWidth + shapeRight + measureText(legendText || 'undefined', fontSize, context) + opts.legend.itemGap * opts.pix;\r\n      if (widthCount + itemWidth > opts.width - opts.area[1] - opts.area[3]) {\r\n        legendList.push(currentRow);\r\n        widthCountArr.push(widthCount - opts.legend.itemGap * opts.pix);\r\n        widthCount = itemWidth;\r\n        currentRow = [item];\r\n      } else {\r\n        widthCount += itemWidth;\r\n        currentRow.push(item);\r\n      }\r\n    }\r\n    if (currentRow.length) {\r\n      legendList.push(currentRow);\r\n      widthCountArr.push(widthCount - opts.legend.itemGap * opts.pix);\r\n      legendData.widthArr = widthCountArr;\r\n      let legendWidth = Math.max.apply(null, widthCountArr);\r\n      switch (opts.legend.float) {\r\n        case 'left':\r\n          legendData.area.start.x = opts.area[3];\r\n          legendData.area.end.x = opts.area[3] + legendWidth + 2 * padding;\r\n          break;\r\n        case 'right':\r\n          legendData.area.start.x = opts.width - opts.area[1] - legendWidth - 2 * padding;\r\n          legendData.area.end.x = opts.width - opts.area[1];\r\n          break;\r\n        default:\r\n          legendData.area.start.x = (opts.width - legendWidth) / 2 - padding;\r\n          legendData.area.end.x = (opts.width + legendWidth) / 2 + padding;\r\n      }\r\n      legendData.area.width = legendWidth + 2 * padding;\r\n      legendData.area.wholeWidth = legendWidth + 2 * padding;\r\n      legendData.area.height = legendList.length * lineHeight + 2 * padding;\r\n      legendData.area.wholeHeight = legendList.length * lineHeight + 2 * padding + 2 * margin;\r\n      legendData.points = legendList;\r\n    }\r\n  } else {\r\n    let len = series.length;\r\n    let maxHeight = opts.height - opts.area[0] - opts.area[2] - 2 * margin - 2 * padding;\r\n    let maxLength = Math.min(Math.floor(maxHeight / lineHeight), len);\r\n    legendData.area.height = maxLength * lineHeight + padding * 2;\r\n    legendData.area.wholeHeight = maxLength * lineHeight + padding * 2;\r\n    switch (opts.legend.float) {\r\n      case 'top':\r\n        legendData.area.start.y = opts.area[0] + margin;\r\n        legendData.area.end.y = opts.area[0] + margin + legendData.area.height;\r\n        break;\r\n      case 'bottom':\r\n        legendData.area.start.y = opts.height - opts.area[2] - margin - legendData.area.height;\r\n        legendData.area.end.y = opts.height - opts.area[2] - margin;\r\n        break;\r\n      default:\r\n        legendData.area.start.y = (opts.height - legendData.area.height) / 2;\r\n        legendData.area.end.y = (opts.height + legendData.area.height) / 2;\r\n    }\r\n    let lineNum = len % maxLength === 0 ? len / maxLength : Math.floor((len / maxLength) + 1);\r\n    let currentRow = [];\r\n    for (let i = 0; i < lineNum; i++) {\r\n      let temp = series.slice(i * maxLength, i * maxLength + maxLength);\r\n      currentRow.push(temp);\r\n    }\r\n    legendData.points = currentRow;\r\n    if (currentRow.length) {\r\n      for (let i = 0; i < currentRow.length; i++) {\r\n        let item = currentRow[i];\r\n        let maxWidth = 0;\r\n        for (let j = 0; j < item.length; j++) {\r\n          let itemWidth = shapeWidth + shapeRight + measureText(item[j].name || 'undefined', fontSize, context) + opts.legend.itemGap * opts.pix;\r\n          if (itemWidth > maxWidth) {\r\n            maxWidth = itemWidth;\r\n          }\r\n        }\r\n        legendData.widthArr.push(maxWidth);\r\n        legendData.heightArr.push(item.length * lineHeight + padding * 2);\r\n      }\r\n      let legendWidth = 0\r\n      for (let i = 0; i < legendData.widthArr.length; i++) {\r\n        legendWidth += legendData.widthArr[i];\r\n      }\r\n      legendData.area.width = legendWidth - opts.legend.itemGap * opts.pix + 2 * padding;\r\n      legendData.area.wholeWidth = legendData.area.width + padding;\r\n    }\r\n  }\r\n  switch (opts.legend.position) {\r\n    case 'top':\r\n      legendData.area.start.y = opts.area[0] + margin;\r\n      legendData.area.end.y = opts.area[0] + margin + legendData.area.height;\r\n      break;\r\n    case 'bottom':\r\n      legendData.area.start.y = opts.height - opts.area[2] - legendData.area.height - margin;\r\n      legendData.area.end.y = opts.height - opts.area[2] - margin;\r\n      break;\r\n    case 'left':\r\n      legendData.area.start.x = opts.area[3];\r\n      legendData.area.end.x = opts.area[3] + legendData.area.width;\r\n      break;\r\n    case 'right':\r\n      legendData.area.start.x = opts.width - opts.area[1] - legendData.area.width;\r\n      legendData.area.end.x = opts.width - opts.area[1];\r\n      break;\r\n  }\r\n  chartData.legendData = legendData;\r\n  return legendData;\r\n}\r\n\r\nfunction calCategoriesData(categories, opts, config, eachSpacing, context) {\r\n  var result = {\r\n    angle: 0,\r\n    xAxisHeight: config.xAxisHeight\r\n  };\r\n  var fontSize = opts.xAxis.fontSize * opts.pix || config.fontSize;\r\n  var categoriesTextLenth = categories.map(function(item,index) {\r\n    var xitem = opts.xAxis.formatter ? opts.xAxis.formatter(item,index,opts) : item;\r\n    return measureText(String(xitem), fontSize, context);\r\n  });\r\n  \r\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\r\n  if (opts.xAxis.rotateLabel == true) {\r\n    result.angle = opts.xAxis.rotateAngle * Math.PI / 180;\r\n    let tempHeight = 2 * config.xAxisTextPadding +  Math.abs(maxTextLength * Math.sin(result.angle))\r\n    tempHeight = tempHeight < fontSize + 2 * config.xAxisTextPadding ? tempHeight + 2 * config.xAxisTextPadding : tempHeight;\r\n    if(opts.enableScroll == true && opts.xAxis.scrollShow == true){\r\n      tempHeight += 12 * opts.pix;\r\n    }\r\n    result.xAxisHeight = tempHeight;\r\n  }\r\n  if (opts.xAxis.disabled){\r\n    result.xAxisHeight = 0;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getXAxisTextList(series, opts, config, stack) {\r\n  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\r\n  var data;\r\n  if (stack == 'stack') {\r\n    data = dataCombineStack(series, opts.categories.length);\r\n  } else {\r\n    data = dataCombine(series);\r\n  }\r\n  var sorted = [];\r\n  // remove null from data\r\n  data = data.filter(function(item) {\r\n    //return item !== null;\r\n    if (typeof item === 'object' && item !== null) {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        return item !== null;\r\n      } else {\r\n        return item.value !== null;\r\n      }\r\n    } else {\r\n      return item !== null;\r\n    }\r\n  });\r\n  data.map(function(item) {\r\n    if (typeof item === 'object') {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        if (opts.type == 'candle') {\r\n          item.map(function(subitem) {\r\n            sorted.push(subitem);\r\n          })\r\n        } else {\r\n          sorted.push(item[0]);\r\n        }\r\n      } else {\r\n        sorted.push(item.value);\r\n      }\r\n    } else {\r\n      sorted.push(item);\r\n    }\r\n  })\r\n\r\n  var minData = 0;\r\n  var maxData = 0;\r\n  if (sorted.length > 0) {\r\n    minData = Math.min.apply(this, sorted);\r\n    maxData = Math.max.apply(this, sorted);\r\n  }\r\n  //为了兼容v1.9.0之前的项目\r\n  if (index > -1) {\r\n    if (typeof opts.xAxis.data[index].min === 'number') {\r\n      minData = Math.min(opts.xAxis.data[index].min, minData);\r\n    }\r\n    if (typeof opts.xAxis.data[index].max === 'number') {\r\n      maxData = Math.max(opts.xAxis.data[index].max, maxData);\r\n    }\r\n  } else {\r\n    if (typeof opts.xAxis.min === 'number') {\r\n      minData = Math.min(opts.xAxis.min, minData);\r\n    }\r\n    if (typeof opts.xAxis.max === 'number') {\r\n      maxData = Math.max(opts.xAxis.max, maxData);\r\n    }\r\n  }\r\n  if (minData === maxData) {\r\n    var rangeSpan = maxData || 10;\r\n    maxData += rangeSpan;\r\n  }\r\n  //var dataRange = getDataRange(minData, maxData);\r\n  var minRange = minData;\r\n  var maxRange = maxData;\r\n  var range = [];\r\n  var eachRange = (maxRange - minRange) / opts.xAxis.splitNumber;\r\n  for (var i = 0; i <= opts.xAxis.splitNumber; i++) {\r\n    range.push(minRange + eachRange * i);\r\n  }\r\n  return range;\r\n}\r\n\r\nfunction calXAxisData(series, opts, config, context) {\r\n  //堆叠图重算Y轴\r\n  var columnstyle = assign({}, {\r\n    type: \"\"\r\n  }, opts.extra.bar);\r\n  var result = {\r\n    angle: 0,\r\n    xAxisHeight: config.xAxisHeight\r\n  };\r\n  result.ranges = getXAxisTextList(series, opts, config, columnstyle.type);\r\n  result.rangesFormat = result.ranges.map(function(item) {\r\n    //item = opts.xAxis.formatter ? opts.xAxis.formatter(item) : util.toFixed(item, 2);\r\n    item = util.toFixed(item, 2);\r\n    return item;\r\n  });\r\n  var xAxisScaleValues = result.ranges.map(function(item) {\r\n    // 如果刻度值是浮点数,则保留两位小数\r\n    item = util.toFixed(item, 2);\r\n    // 若有自定义格式则调用自定义的格式化函数\r\n    //item = opts.xAxis.formatter ? opts.xAxis.formatter(Number(item)) : item;\r\n    return item;\r\n  });\r\n  result = Object.assign(result, getXAxisPoints(xAxisScaleValues, opts, config));\r\n  // 计算X轴刻度的属性譬如每个刻度的间隔,刻度的起始点\\结束点以及总长\r\n  var eachSpacing = result.eachSpacing;\r\n  var textLength = xAxisScaleValues.map(function(item) {\r\n    return measureText(item, opts.xAxis.fontSize * opts.pix || config.fontSize, context);\r\n  });\r\n  // get max length of categories text\r\n  var maxTextLength = Math.max.apply(this, textLength);\r\n  // 如果刻度值文本内容过长,则将其逆时针旋转45°\r\n  if (maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\r\n    result.angle = 45 * Math.PI / 180;\r\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\r\n  }\r\n  if (opts.xAxis.disabled === true) {\r\n    result.xAxisHeight = 0;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\r\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\r\n  var radarOption = opts.extra.radar || {};\r\n  radarOption.max = radarOption.max || 0;\r\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\r\n  var data = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    let each = series[i];\r\n    let listItem = {};\r\n    listItem.color = each.color;\r\n    listItem.legendShape = each.legendShape;\r\n    listItem.pointShape = each.pointShape;\r\n    listItem.data = [];\r\n    each.data.forEach(function(item, index) {\r\n      let tmp = {};\r\n      tmp.angle = angleList[index];\r\n      tmp.proportion = item / maxData;\r\n      tmp.value = item;\r\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion * process * Math.sin(tmp.angle), center);\r\n      listItem.data.push(tmp);\r\n    });\r\n    data.push(listItem);\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getPieDataPoints(series, radius) {\r\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  var count = 0;\r\n  var _start_ = 0;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    count += item.data;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    if (count === 0) {\r\n      item._proportion_ = 1 / series.length * process;\r\n    } else {\r\n      item._proportion_ = item.data / count * process;\r\n    }\r\n    item._radius_ = radius;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item._start_ = _start_;\r\n    _start_ += 2 * item._proportion_ * Math.PI;\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getFunnelDataPoints(series, radius, type, eachSpacing) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  series = series.sort(function(a, b) {\r\n    return parseInt(b.data) - parseInt(a.data);\r\n  });\r\n  for (let i = 0; i < series.length; i++) {\r\n    if(type == 'funnel'){\r\n      series[i].radius = series[i].data / series[0].data * radius * process;\r\n    }else{\r\n      series[i].radius =  (eachSpacing * (series.length - i)) / (eachSpacing * series.length) * radius * process;\r\n    }\r\n    series[i]._proportion_ = series[i].data / series[0].data;\r\n  }\r\n  if(type !== 'pyramid'){\r\n    series.reverse();\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getRoseDataPoints(series, type, minRadius, radius) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var count = 0;\r\n  var _start_ = 0;\r\n  var dataArr = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    count += item.data;\r\n    dataArr.push(item.data);\r\n  }\r\n  var minData = Math.min.apply(null, dataArr);\r\n  var maxData = Math.max.apply(null, dataArr);\r\n  var radiusLength = radius - minRadius;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    if (count === 0) {\r\n      item._proportion_ = 1 / series.length * process;\r\n      item._rose_proportion_ = 1 / series.length * process;\r\n    } else {\r\n      item._proportion_ = item.data / count * process;\r\n      if(type == 'area'){\r\n        item._rose_proportion_ = 1 / series.length * process;\r\n      }else{\r\n        item._rose_proportion_ = item.data / count * process;\r\n      }\r\n    }\r\n    item._radius_ = minRadius + radiusLength * ((item.data - minData) / (maxData - minData)) || radius;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item._start_ = _start_;\r\n    _start_ += 2 * item._rose_proportion_ * Math.PI;\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getArcbarDataPoints(series, arcbarOption) {\r\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  if (process == 1) {\r\n    process = 0.999999;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    let totalAngle;\r\n    if (arcbarOption.type == 'circle') {\r\n      totalAngle = 2;\r\n    } else {\r\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\r\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\r\n      } else {\r\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\r\n      }\r\n    }\r\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\r\n    if (item._proportion_ >= 2) {\r\n      item._proportion_ = item._proportion_ % 2;\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getGaugeArcbarDataPoints(series, arcbarOption) {\r\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  if (process == 1) {\r\n    process = 0.999999;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    let totalAngle;\r\n    if (arcbarOption.type == 'circle') {\r\n      totalAngle = 2;\r\n    } else {\r\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\r\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\r\n      } else {\r\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\r\n      }\r\n    }\r\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\r\n    if (item._proportion_ >= 2) {\r\n      item._proportion_ = item._proportion_ % 2;\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getGaugeAxisPoints(categories, startAngle, endAngle) {\r\n  let totalAngle = startAngle - endAngle + 1;\r\n  let tempStartAngle = startAngle;\r\n  for (let i = 0; i < categories.length; i++) {\r\n    categories[i].value = categories[i].value === null ? 0 : categories[i].value;\r\n    categories[i]._startAngle_ = tempStartAngle;\r\n    categories[i]._endAngle_ = totalAngle * categories[i].value + startAngle;\r\n    if (categories[i]._endAngle_ >= 2) {\r\n      categories[i]._endAngle_ = categories[i]._endAngle_ % 2;\r\n    }\r\n    tempStartAngle = categories[i]._endAngle_;\r\n  }\r\n  return categories;\r\n}\r\n\r\nfunction getGaugeDataPoints(series, categories, gaugeOption) {\r\n  let process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    if (gaugeOption.pointer.color == 'auto') {\r\n      for (let i = 0; i < categories.length; i++) {\r\n        if (item.data <= categories[i].value) {\r\n          item.color = categories[i].color;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      item.color = gaugeOption.pointer.color;\r\n    }\r\n    let totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n    item._endAngle_ = totalAngle * item.data + gaugeOption.startAngle;\r\n    item._oldAngle_ = gaugeOption.oldAngle;\r\n    if (gaugeOption.oldAngle < gaugeOption.endAngle) {\r\n      item._oldAngle_ += 2;\r\n    }\r\n    if (item.data >= gaugeOption.oldData) {\r\n      item._proportion_ = (item._endAngle_ - item._oldAngle_) * process + gaugeOption.oldAngle;\r\n    } else {\r\n      item._proportion_ = item._oldAngle_ - (item._oldAngle_ - item._endAngle_) * process;\r\n    }\r\n    if (item._proportion_ >= 2) {\r\n      item._proportion_ = item._proportion_ % 2;\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getPieTextMaxLength(series, config, context, opts) {\r\n  series = getPieDataPoints(series);\r\n  let maxLength = 0;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    let text = item.formatter ? item.formatter(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\r\n    maxLength = Math.max(maxLength, measureText(text, item.textSize * opts.pix || config.fontSize, context));\r\n  }\r\n  return maxLength;\r\n}\r\n\r\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\r\n  return points.map(function(item) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    var seriesGap = 0;\r\n    var categoryGap = 0;\r\n    if (opts.type == 'mix') {\r\n      seriesGap = opts.extra.mix.column.seriesGap * opts.pix || 0;\r\n      categoryGap = opts.extra.mix.column.categoryGap * opts.pix || 0;\r\n    } else {\r\n      seriesGap = opts.extra.column.seriesGap * opts.pix || 0;\r\n      categoryGap = opts.extra.column.categoryGap * opts.pix || 0;\r\n    }\r\n    seriesGap =  Math.min(seriesGap, eachSpacing / columnLen)\r\n    categoryGap =  Math.min(categoryGap, eachSpacing / columnLen)\r\n    item.width = Math.ceil((eachSpacing - 2 * categoryGap - seriesGap * (columnLen - 1)) / columnLen);\r\n    if (opts.extra.mix && opts.extra.mix.column.width && +opts.extra.mix.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.mix.column.width * opts.pix);\r\n    }\r\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.column.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    item.x += (index + 0.5 - columnLen / 2) * (item.width + seriesGap);\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixBarData(points, eachSpacing, columnLen, index, config, opts) {\r\n  return points.map(function(item) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    var seriesGap = 0;\r\n    var categoryGap = 0;\r\n    seriesGap = opts.extra.bar.seriesGap * opts.pix || 0;\r\n    categoryGap = opts.extra.bar.categoryGap * opts.pix || 0;\r\n    seriesGap =  Math.min(seriesGap, eachSpacing / columnLen)\r\n    categoryGap =  Math.min(categoryGap, eachSpacing / columnLen)\r\n    item.width = Math.ceil((eachSpacing - 2 * categoryGap - seriesGap * (columnLen - 1)) / columnLen);\r\n    if (opts.extra.bar && opts.extra.bar.width && +opts.extra.bar.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.bar.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    item.y += (index + 0.5 - columnLen / 2) * (item.width + seriesGap);\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixColumeMeterData(points, eachSpacing, columnLen, index, config, opts, border) {\r\n  var categoryGap = opts.extra.column.categoryGap * opts.pix || 0;\r\n  return points.map(function(item) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    item.width = eachSpacing - 2 * categoryGap;\r\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.column.width * opts.pix);\r\n    }\r\n    if (index > 0) {\r\n      item.width -= border;\r\n    }\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixColumeStackData(points, eachSpacing, columnLen, index, config, opts, series) {\r\n  var categoryGap = opts.extra.column.categoryGap * opts.pix || 0;\r\n  return points.map(function(item, indexn) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    item.width = Math.ceil(eachSpacing - 2 * categoryGap);\r\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.column.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixBarStackData(points, eachSpacing, columnLen, index, config, opts, series) {\r\n  var categoryGap = opts.extra.bar.categoryGap * opts.pix || 0;\r\n  return points.map(function(item, indexn) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    item.width = Math.ceil(eachSpacing - 2 * categoryGap);\r\n    if (opts.extra.bar && opts.extra.bar.width && +opts.extra.bar.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.bar.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction getXAxisPoints(categories, opts, config) {\r\n  var spacingValid = opts.width - opts.area[1] - opts.area[3];\r\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\r\n  if ((opts.type == 'line' || opts.type == 'area' || opts.type == 'scatter' || opts.type == 'bubble' || opts.type == 'bar') && dataCount > 1 && opts.xAxis.boundaryGap == 'justify') {\r\n    dataCount -= 1;\r\n  }\r\n  var widthRatio = 0;\r\n  if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1){\r\n    if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n    widthRatio = opts.extra.mount.widthRatio - 1;\r\n    dataCount += widthRatio;\r\n  }\r\n  var eachSpacing = spacingValid / dataCount;\r\n  var xAxisPoints = [];\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  categories.forEach(function(item, index) {\r\n    xAxisPoints.push(startX + widthRatio / 2 * eachSpacing + index * eachSpacing);\r\n  });\r\n  if (opts.xAxis.boundaryGap !== 'justify') {\r\n    if (opts.enableScroll === true) {\r\n      xAxisPoints.push(startX + widthRatio * eachSpacing + categories.length * eachSpacing);\r\n    } else {\r\n      xAxisPoints.push(endX);\r\n    }\r\n  }\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    startX: startX,\r\n    endX: endX,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var cPoints = [];\r\n      item.forEach(function(items, indexs) {\r\n        var point = {};\r\n        point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\r\n        var value = items.value || items;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        height *= process;\r\n        point.y = opts.height - Math.round(height) - opts.area[2];\r\n        cPoints.push(point);\r\n      });\r\n      points.push(cPoints);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var boundaryGap = 'center';\r\n  if (opts.type == 'line' || opts.type == 'area' || opts.type == 'scatter' || opts.type == 'bubble' ) {\r\n    boundaryGap = opts.xAxis.boundaryGap;\r\n  }\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.x = xAxisPoints[index];\r\n      var value = item;\r\n      if (typeof item === 'object' && item !== null) {\r\n        if (item.constructor.toString().indexOf('Array') > -1) {\r\n          let xranges, xminRange, xmaxRange;\r\n          xranges = [].concat(opts.chartData.xAxisData.ranges);\r\n          xminRange = xranges.shift();\r\n          xmaxRange = xranges.pop();\r\n          value = item[1];\r\n          point.x = opts.area[3] + validWidth * (item[0] - xminRange) / (xmaxRange - xminRange);\r\n          if(opts.type == 'bubble'){\r\n            point.r = item[2];\r\n            point.t = item[3];\r\n          }\r\n        } else {\r\n          value = item.value;\r\n        }\r\n      }\r\n      if (boundaryGap == 'center') {\r\n        point.x += eachSpacing / 2;\r\n      }\r\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n      height *= process;\r\n      point.y = opts.height - height - opts.area[2];\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getMountDataPoints(series, minRange, maxRange, xAxisPoints, eachSpacing, opts, mountOption) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\r\n  var mountWidth = eachSpacing * mountOption.widthRatio;\r\n  series.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.x = xAxisPoints[index];\r\n      point.x += eachSpacing / 2;\r\n      var value = item.data;\r\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n      height *= process;\r\n      point.y = opts.height - height - opts.area[2];\r\n      point.value = value;\r\n      point.width = mountWidth;\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getBarDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.y = yAxisPoints[index];\r\n      var value = item;\r\n      if (typeof item === 'object' && item !== null) {\r\n        value = item.value;\r\n      }\r\n      var height = validWidth * (value - minRange) / (maxRange - minRange);\r\n      height *= process;\r\n      point.height = height;\r\n      point.value = value;\r\n      point.x = height + opts.area[3];\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\r\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\r\n\r\n      if (seriesIndex > 0) {\r\n        var value = 0;\r\n        for (let i = 0; i <= seriesIndex; i++) {\r\n          value += stackSeries[i].data[index];\r\n        }\r\n        var value0 = value - item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\r\n      } else {\r\n        var value = item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = 0;\r\n      }\r\n      var heightc = height0;\r\n      height *= process;\r\n      heightc *= process;\r\n      point.y = opts.height - Math.round(height) - opts.area[2];\r\n      point.y0 = opts.height - Math.round(heightc) - opts.area[2];\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\r\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\r\n  var points = [];\r\n  var validHeight = opts.width - opts.area[1] - opts.area[3];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.y = yAxisPoints[index];\r\n      if (seriesIndex > 0) {\r\n        var value = 0;\r\n        for (let i = 0; i <= seriesIndex; i++) {\r\n          value += stackSeries[i].data[index];\r\n        }\r\n        var value0 = value - item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\r\n      } else {\r\n        var value = item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = 0;\r\n      }\r\n      var heightc = height0;\r\n      height *= process;\r\n      heightc *= process;\r\n      point.height = height - heightc;\r\n      point.x = opts.area[3] + height;\r\n      point.x0 = opts.area[3] + heightc;\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getYAxisTextList(series, opts, config, stack, yData) {\r\n  var index = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;\r\n  var data;\r\n  if (stack == 'stack') {\r\n    data = dataCombineStack(series, opts.categories.length);\r\n  } else {\r\n    data = dataCombine(series);\r\n  }\r\n  var sorted = [];\r\n  // remove null from data\r\n  data = data.filter(function(item) {\r\n    //return item !== null;\r\n    if (typeof item === 'object' && item !== null) {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        return item !== null;\r\n      } else {\r\n        return item.value !== null;\r\n      }\r\n    } else {\r\n      return item !== null;\r\n    }\r\n  });\r\n  data.map(function(item) {\r\n    if (typeof item === 'object') {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        if (opts.type == 'candle') {\r\n          item.map(function(subitem) {\r\n            sorted.push(subitem);\r\n          })\r\n        } else {\r\n          sorted.push(item[1]);\r\n        }\r\n      } else {\r\n        sorted.push(item.value);\r\n      }\r\n    } else {\r\n      sorted.push(item);\r\n    }\r\n  })\r\n  var minData = yData.min || 0;\r\n  var maxData = yData.max || 0;\r\n  if (sorted.length > 0) {\r\n    minData = Math.min.apply(this, sorted);\r\n    maxData = Math.max.apply(this, sorted);\r\n  }\r\n  if (minData === maxData) {\r\n    // var rangeSpan = maxData || 10;\r\n    // maxData += rangeSpan;\r\n    if(maxData == 0){\r\n      maxData = 10;\r\n    }else{\r\n      minData = 0;\r\n    }\r\n  }\r\n  var dataRange = getDataRange(minData, maxData);\r\n  var minRange = (yData.min === undefined || yData.min === null) ? dataRange.minRange : yData.min;\r\n  var maxRange = (yData.max === undefined || yData.max === null) ? dataRange.maxRange : yData.max;\r\n  var range = [];\r\n  var eachRange = (maxRange - minRange) / opts.yAxis.splitNumber;\r\n  for (var i = 0; i <= opts.yAxis.splitNumber; i++) {\r\n    range.push(minRange + eachRange * i);\r\n  }\r\n  return range.reverse();\r\n}\r\n\r\nfunction calYAxisData(series, opts, config, context) {\r\n  //堆叠图重算Y轴\r\n  var columnstyle = assign({}, {\r\n    type: \"\"\r\n  }, opts.extra.column);\r\n  //如果是多Y轴，重新计算\r\n  var YLength = opts.yAxis.data.length;\r\n  var newSeries = new Array(YLength);\r\n  if (YLength > 0) {\r\n    for (let i = 0; i < YLength; i++) {\r\n      newSeries[i] = [];\r\n      for (let j = 0; j < series.length; j++) {\r\n        if (series[j].index == i) {\r\n          newSeries[i].push(series[j]);\r\n        }\r\n      }\r\n    }\r\n    var rangesArr = new Array(YLength);\r\n    var rangesFormatArr = new Array(YLength);\r\n    var yAxisWidthArr = new Array(YLength);\r\n\r\n    for (let i = 0; i < YLength; i++) {\r\n      let yData = opts.yAxis.data[i];\r\n      //如果总开关不显示，强制每个Y轴为不显示\r\n      if (opts.yAxis.disabled == true) {\r\n        yData.disabled = true;\r\n      }\r\n      if(yData.type === 'categories'){\r\n        if(!yData.formatter){\r\n          yData.formatter = (val,index,opts) => {return val + (yData.unit || '')};\r\n        }\r\n        yData.categories = yData.categories || opts.categories;\r\n        rangesArr[i] = yData.categories;\r\n      }else{\r\n        if(!yData.formatter){\r\n          yData.formatter = (val,index,opts) => {return val.toFixed(yData.tofix) + (yData.unit || '')};\r\n        }\r\n        rangesArr[i] = getYAxisTextList(newSeries[i], opts, config, columnstyle.type, yData, i);\r\n      }\r\n      let yAxisFontSizes = yData.fontSize * opts.pix || config.fontSize;\r\n      yAxisWidthArr[i] = {\r\n        position: yData.position ? yData.position : 'left',\r\n        width: 0\r\n      };\r\n      rangesFormatArr[i] = rangesArr[i].map(function(items,index) {\r\n        items = yData.formatter(items,index,opts);\r\n        yAxisWidthArr[i].width = Math.max(yAxisWidthArr[i].width, measureText(items, yAxisFontSizes, context) + 5);\r\n        return items;\r\n      });\r\n      let calibration = yData.calibration ? 4 * opts.pix : 0;\r\n      yAxisWidthArr[i].width += calibration + 3 * opts.pix;\r\n      if (yData.disabled === true) {\r\n        yAxisWidthArr[i].width = 0;\r\n      }\r\n    }\r\n  } else {\r\n    var rangesArr = new Array(1);\r\n    var rangesFormatArr = new Array(1);\r\n    var yAxisWidthArr = new Array(1);\r\n    if(opts.type === 'bar'){\r\n      rangesArr[0] = opts.categories;\r\n      if(!opts.yAxis.formatter){\r\n        opts.yAxis.formatter = (val,index,opts) => {return val + (opts.yAxis.unit || '')}\r\n      }\r\n    }else{\r\n      if(!opts.yAxis.formatter){\r\n        opts.yAxis.formatter = (val,index,opts) => {return val.toFixed(opts.yAxis.tofix ) + (opts.yAxis.unit || '')}\r\n      }\r\n      rangesArr[0] = getYAxisTextList(series, opts, config, columnstyle.type, {});\r\n    }\r\n    yAxisWidthArr[0] = {\r\n      position: 'left',\r\n      width: 0\r\n    };\r\n    var yAxisFontSize = opts.yAxis.fontSize * opts.pix || config.fontSize;\r\n    rangesFormatArr[0] = rangesArr[0].map(function(item,index) {\r\n      item = opts.yAxis.formatter(item,index,opts);\r\n      yAxisWidthArr[0].width = Math.max(yAxisWidthArr[0].width, measureText(item, yAxisFontSize, context) + 5);\r\n      return item;\r\n    });\r\n    yAxisWidthArr[0].width += 3 * opts.pix;\r\n    if (opts.yAxis.disabled === true) {\r\n      yAxisWidthArr[0] = {\r\n        position: 'left',\r\n        width: 0\r\n      };\r\n      opts.yAxis.data[0] = {\r\n        disabled: true\r\n      };\r\n    } else {\r\n      opts.yAxis.data[0] = {\r\n        disabled: false,\r\n        position: 'left',\r\n        max: opts.yAxis.max,\r\n        min: opts.yAxis.min,\r\n        formatter: opts.yAxis.formatter\r\n      };\r\n      if(opts.type === 'bar'){\r\n        opts.yAxis.data[0].categories = opts.categories;\r\n        opts.yAxis.data[0].type = 'categories';\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    rangesFormat: rangesFormatArr,\r\n    ranges: rangesArr,\r\n    yAxisWidth: yAxisWidthArr\r\n  };\r\n}\r\n\r\nfunction calTooltipYAxisData(point, series, opts, config, eachSpacing) {\r\n  let ranges = [].concat(opts.chartData.yAxisData.ranges);\r\n  let spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  let minAxis = opts.area[0];\r\n  let items = [];\r\n  for (let i = 0; i < ranges.length; i++) {\r\n    let maxVal = ranges[i].shift();\r\n    let minVal = ranges[i].pop();\r\n    let item = maxVal - (maxVal - minVal) * (point - minAxis) / spacingValid;\r\n    item = opts.yAxis.data[i].formatter ? opts.yAxis.data[i].formatter(item) : item.toFixed(0);\r\n    items.push(String(item))\r\n  }\r\n  return items;\r\n}\r\n\r\nfunction calMarkLineData(points, opts) {\r\n  let minRange, maxRange;\r\n  let spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  for (let i = 0; i < points.length; i++) {\r\n    points[i].yAxisIndex = points[i].yAxisIndex ? points[i].yAxisIndex : 0;\r\n    let range = [].concat(opts.chartData.yAxisData.ranges[points[i].yAxisIndex]);\r\n    minRange = range.pop();\r\n    maxRange = range.shift();\r\n    let height = spacingValid * (points[i].value - minRange) / (maxRange - minRange);\r\n    points[i].y = opts.height - Math.round(height) - opts.area[2];\r\n  }\r\n  return points;\r\n}\r\n\r\nfunction contextRotate(context, opts) {\r\n  if (opts.rotateLock !== true) {\r\n    context.translate(opts.height, 0);\r\n    context.rotate(90 * Math.PI / 180);\r\n  } else if (opts._rotate_ !== true) {\r\n    context.translate(opts.height, 0);\r\n    context.rotate(90 * Math.PI / 180);\r\n    opts._rotate_ = true;\r\n  }\r\n}\r\n\r\nfunction drawPointShape(points, color, shape, context, opts) {\r\n  context.beginPath();\r\n  if (opts.dataPointShapeType == 'hollow') {\r\n    context.setStrokeStyle(color);\r\n    context.setFillStyle(opts.background);\r\n    context.setLineWidth(2 * opts.pix);\r\n  } else {\r\n    context.setStrokeStyle(\"#ffffff\");\r\n    context.setFillStyle(color);\r\n    context.setLineWidth(1 * opts.pix);\r\n  }\r\n  if (shape === 'diamond') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x, item.y - 4.5);\r\n        context.lineTo(item.x - 4.5, item.y);\r\n        context.lineTo(item.x, item.y + 4.5);\r\n        context.lineTo(item.x + 4.5, item.y);\r\n        context.lineTo(item.x, item.y - 4.5);\r\n      }\r\n    });\r\n  } else if (shape === 'circle') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x + 2.5 * opts.pix, item.y);\r\n        context.arc(item.x, item.y, 3 * opts.pix, 0, 2 * Math.PI, false);\r\n      }\r\n    });\r\n  } else if (shape === 'square') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x - 3.5, item.y - 3.5);\r\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\r\n      }\r\n    });\r\n  } else if (shape === 'triangle') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x, item.y - 4.5);\r\n        context.lineTo(item.x - 4.5, item.y + 4.5);\r\n        context.lineTo(item.x + 4.5, item.y + 4.5);\r\n        context.lineTo(item.x, item.y - 4.5);\r\n      }\r\n    });\r\n  } else if (shape === 'triangle') {\r\n    return;\r\n  }\r\n  context.closePath();\r\n  context.fill();\r\n  context.stroke();\r\n}\r\n\r\nfunction drawRingTitle(opts, config, context, center) {\r\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\r\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\r\n  var title = opts.title.name || '';\r\n  var subtitle = opts.subtitle.name || '';\r\n  var titleFontColor = opts.title.color || opts.fontColor;\r\n  var subtitleFontColor = opts.subtitle.color || opts.fontColor;\r\n  var titleHeight = title ? titlefontSize : 0;\r\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\r\n  var margin = 5;\r\n  if (subtitle) {\r\n    var textWidth = measureText(subtitle, subtitlefontSize * opts.pix, context);\r\n    var startX = center.x - textWidth / 2 + (opts.subtitle.offsetX|| 0) * opts.pix ;\r\n    var startY = center.y + subtitlefontSize * opts.pix / 2 + (opts.subtitle.offsetY || 0) * opts.pix;\r\n    if (title) {\r\n      startY += (titleHeight * opts.pix + margin) / 2;\r\n    }\r\n    context.beginPath();\r\n    context.setFontSize(subtitlefontSize * opts.pix);\r\n    context.setFillStyle(subtitleFontColor);\r\n    context.fillText(subtitle, startX, startY);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n  if (title) {\r\n    var _textWidth = measureText(title, titlefontSize * opts.pix, context);\r\n    var _startX = center.x - _textWidth / 2 + (opts.title.offsetX || 0);\r\n    var _startY = center.y + titlefontSize * opts.pix / 2 + (opts.title.offsetY || 0) * opts.pix;\r\n    if (subtitle) {\r\n      _startY -= (subtitleHeight * opts.pix + margin) / 2;\r\n    }\r\n    context.beginPath();\r\n    context.setFontSize(titlefontSize * opts.pix);\r\n    context.setFillStyle(titleFontColor);\r\n    context.fillText(title, _startX, _startY);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n}\r\n\r\nfunction drawPointText(points, series, config, context, opts) {\r\n  // 绘制数据文案\r\n  var data = series.data;\r\n  var textOffset = series.textOffset ? series.textOffset : 0;\r\n  points.forEach(function(item, index) {\r\n    if (item !== null) {\r\n      context.beginPath();\r\n      var fontSize = series.textSize ? series.textSize * opts.pix : config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(series.textColor || opts.fontColor);\r\n      var value = data[index]\r\n      if (typeof data[index] === 'object' && data[index] !== null) {\r\n        if (data[index].constructor.toString().indexOf('Array')>-1) {\r\n          value = data[index][1];\r\n        } else {\r\n          value = data[index].value\r\n        }\r\n      }\r\n      var formatVal = series.formatter ? series.formatter(value,index,series,opts) : value;\r\n      context.setTextAlign('center');\r\n      context.fillText(String(formatVal), item.x, item.y - 4 + textOffset * opts.pix);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.setTextAlign('left');\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawMountPointText(points, series, config, context, opts) {\r\n  // 绘制数据文案\r\n  var data = series.data;\r\n  var textOffset = series.textOffset ? series.textOffset : 0;\r\n  points.forEach(function(item, index) {\r\n    if (item !== null) {\r\n      context.beginPath();\r\n      var fontSize = series[index].textSize ? series[index].textSize * opts.pix : config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(series[index].textColor || opts.fontColor);\r\n      var value = item.value\r\n      var formatVal = series[index].formatter ? series[index].formatter(value,index,series,opts) : value;\r\n      context.setTextAlign('center');\r\n      context.fillText(String(formatVal), item.x, item.y - 4 + textOffset * opts.pix);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.setTextAlign('left');\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawBarPointText(points, series, config, context, opts) {\r\n  // 绘制数据文案\r\n  var data = series.data;\r\n  var textOffset = series.textOffset ? series.textOffset : 0;\r\n  points.forEach(function(item, index) {\r\n    if (item !== null) {\r\n      context.beginPath();\r\n      var fontSize = series.textSize ? series.textSize * opts.pix : config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(series.textColor || opts.fontColor);\r\n      var value = data[index]\r\n      if (typeof data[index] === 'object' && data[index] !== null) {\r\n        value = data[index].value ;\r\n      }\r\n      var formatVal = series.formatter ? series.formatter(value,index,series,opts) : value;\r\n      context.setTextAlign('left');\r\n      context.fillText(String(formatVal), item.x + 4 * opts.pix , item.y + fontSize / 2 - 3 );\r\n      context.closePath();\r\n      context.stroke();\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context) {\r\n  radius -= gaugeOption.width / 2 + gaugeOption.labelOffset * opts.pix;\r\n  radius = radius < 10 ? 10 : radius;\r\n  let totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n  let splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\r\n  let totalNumber = gaugeOption.endNumber - gaugeOption.startNumber;\r\n  let splitNumber = totalNumber / gaugeOption.splitLine.splitNumber;\r\n  let nowAngle = gaugeOption.startAngle;\r\n  let nowNumber = gaugeOption.startNumber;\r\n  for (let i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\r\n    var pos = {\r\n      x: radius * Math.cos(nowAngle * Math.PI),\r\n      y: radius * Math.sin(nowAngle * Math.PI)\r\n    };\r\n    var labelText = gaugeOption.formatter ? gaugeOption.formatter(nowNumber,i,opts) : nowNumber;\r\n    pos.x += centerPosition.x - measureText(labelText, config.fontSize, context) / 2;\r\n    pos.y += centerPosition.y;\r\n    var startX = pos.x;\r\n    var startY = pos.y;\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(gaugeOption.labelColor || opts.fontColor);\r\n    context.fillText(labelText, startX, startY + config.fontSize / 2);\r\n    context.closePath();\r\n    context.stroke();\r\n    nowAngle += splitAngle;\r\n    if (nowAngle >= 2) {\r\n      nowAngle = nowAngle % 2;\r\n    }\r\n    nowNumber += splitNumber;\r\n  }\r\n}\r\n\r\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\r\n  var radarOption = opts.extra.radar || {};\r\n  angleList.forEach(function(angle, index) {\r\n    if(radarOption.labelPointShow === true && opts.categories[index] !== ''){\r\n      var posPoint = {\r\n        x: radius * Math.cos(angle),\r\n        y: radius * Math.sin(angle)\r\n      };\r\n      var posPointAxis = convertCoordinateOrigin(posPoint.x, posPoint.y, centerPosition);\r\n      context.setFillStyle(radarOption.labelPointColor);\r\n      context.beginPath();\r\n      context.arc(posPointAxis.x, posPointAxis.y, radarOption.labelPointRadius * opts.pix, 0, 2 * Math.PI, false);\r\n      context.closePath();\r\n      context.fill();\r\n    }\r\n    var pos = {\r\n      x: (radius + config.radarLabelTextMargin * opts.pix) * Math.cos(angle),\r\n      y: (radius + config.radarLabelTextMargin * opts.pix) * Math.sin(angle)\r\n    };\r\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\r\n    var startX = posRelativeCanvas.x;\r\n    var startY = posRelativeCanvas.y;\r\n    if (util.approximatelyEqual(pos.x, 0)) {\r\n      startX -= measureText(opts.categories[index] || '', config.fontSize, context) / 2;\r\n    } else if (pos.x < 0) {\r\n      startX -= measureText(opts.categories[index] || '', config.fontSize, context);\r\n    }\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(radarOption.labelColor || opts.fontColor);\r\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\r\n    context.closePath();\r\n    context.stroke();\r\n  });\r\n\r\n}\r\n\r\nfunction drawPieText(series, opts, config, context, radius, center) {\r\n  var lineRadius = config.pieChartLinePadding;\r\n  var textObjectCollection = [];\r\n  var lastTextObject = null;\r\n  var seriesConvert = series.map(function(item,index) {\r\n    var text = item.formatter ? item.formatter(item,index,series,opts) : util.toFixed(item._proportion_.toFixed(4) * 100) + '%';\r\n    text = item.labelText ? item.labelText : text;\r\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\r\n    if (item._rose_proportion_) {\r\n      arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._rose_proportion_ / 2);\r\n    }\r\n    var color = item.color;\r\n    var radius = item._radius_;\r\n    return {\r\n      arc: arc,\r\n      text: text,\r\n      color: color,\r\n      radius: radius,\r\n      textColor: item.textColor,\r\n      textSize: item.textSize,\r\n      labelShow: item.labelShow\r\n    };\r\n  });\r\n  for (let i = 0; i < seriesConvert.length; i++) {\r\n    let item = seriesConvert[i];\r\n    // line end\r\n    let orginX1 = Math.cos(item.arc) * (item.radius + lineRadius);\r\n    let orginY1 = Math.sin(item.arc) * (item.radius + lineRadius);\r\n    // line start\r\n    let orginX2 = Math.cos(item.arc) * item.radius;\r\n    let orginY2 = Math.sin(item.arc) * item.radius;\r\n    // text start\r\n    let orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\r\n    let orginY3 = orginY1;\r\n    let textWidth = measureText(item.text, item.textSize * opts.pix || config.fontSize, context);\r\n    let startY = orginY3;\r\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\r\n        x: orginX3\r\n      })) {\r\n      if (orginX3 > 0) {\r\n        startY = Math.min(orginY3, lastTextObject.start.y);\r\n      } else if (orginX1 < 0) {\r\n        startY = Math.max(orginY3, lastTextObject.start.y);\r\n      } else {\r\n        if (orginY3 > 0) {\r\n          startY = Math.max(orginY3, lastTextObject.start.y);\r\n        } else {\r\n          startY = Math.min(orginY3, lastTextObject.start.y);\r\n        }\r\n      }\r\n    }\r\n    if (orginX3 < 0) {\r\n      orginX3 -= textWidth;\r\n    }\r\n    let textObject = {\r\n      lineStart: {\r\n        x: orginX2,\r\n        y: orginY2\r\n      },\r\n      lineEnd: {\r\n        x: orginX1,\r\n        y: orginY1\r\n      },\r\n      start: {\r\n        x: orginX3,\r\n        y: startY\r\n      },\r\n      width: textWidth,\r\n      height: config.fontSize,\r\n      text: item.text,\r\n      color: item.color,\r\n      textColor: item.textColor,\r\n      textSize: item.textSize\r\n    };\r\n    lastTextObject = avoidCollision(textObject, lastTextObject);\r\n    textObjectCollection.push(lastTextObject);\r\n  }\r\n  for (let i = 0; i < textObjectCollection.length; i++) {\r\n    if(seriesConvert[i].labelShow === false){\r\n      continue;\r\n    }\r\n    let item = textObjectCollection[i];\r\n    let lineStartPoistion = convertCoordinateOrigin(item.lineStart.x, item.lineStart.y, center);\r\n    let lineEndPoistion = convertCoordinateOrigin(item.lineEnd.x, item.lineEnd.y, center);\r\n    let textPosition = convertCoordinateOrigin(item.start.x, item.start.y, center);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.setFontSize(item.textSize * opts.pix || config.fontSize);\r\n    context.beginPath();\r\n    context.setStrokeStyle(item.color);\r\n    context.setFillStyle(item.color);\r\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\r\n    let curveStartX = item.start.x < 0 ? textPosition.x + item.width : textPosition.x;\r\n    let textStartX = item.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\r\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\r\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\r\n    context.stroke();\r\n    context.closePath();\r\n    context.beginPath();\r\n    context.moveTo(textPosition.x + item.width, textPosition.y);\r\n    context.arc(curveStartX, textPosition.y, 2 * opts.pix, 0, 2 * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n    context.beginPath();\r\n    context.setFontSize(item.textSize * opts.pix || config.fontSize);\r\n    context.setFillStyle(item.textColor || opts.fontColor);\r\n    context.fillText(item.text, textStartX, textPosition.y + 3);\r\n    context.closePath();\r\n    context.stroke();\r\n    context.closePath();\r\n  }\r\n}\r\n\r\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\r\n  var toolTipOption = opts.extra.tooltip || {};\r\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\r\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\r\n  var startY = opts.area[0];\r\n  var endY = opts.height - opts.area[2];\r\n  if (toolTipOption.gridType == 'dash') {\r\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\r\n  }\r\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\r\n  context.setLineWidth(1 * opts.pix);\r\n  context.beginPath();\r\n  context.moveTo(offsetX, startY);\r\n  context.lineTo(offsetX, endY);\r\n  context.stroke();\r\n  context.setLineDash([]);\r\n  if (toolTipOption.xAxisLabel) {\r\n    let labelText = opts.categories[opts.tooltip.index];\r\n    context.setFontSize(config.fontSize);\r\n    let textWidth = measureText(labelText, config.fontSize, context);\r\n    let textX = offsetX - 0.5 * textWidth;\r\n    let textY = endY;\r\n    context.beginPath();\r\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\r\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.rect(textX - config.toolTipPadding, textY, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\r\n    context.closePath();\r\n    context.stroke();\r\n    context.fill();\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(toolTipOption.labelFontColor || opts.fontColor);\r\n    context.fillText(String(labelText), textX, textY + config.toolTipPadding + config.fontSize);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n}\r\n\r\nfunction drawMarkLine(opts, config, context) {\r\n  let markLineOption = assign({}, {\r\n    type: 'solid',\r\n    dashLength: 4,\r\n    data: []\r\n  }, opts.extra.markLine);\r\n  let startX = opts.area[3];\r\n  let endX = opts.width - opts.area[1];\r\n  let points = calMarkLineData(markLineOption.data, opts);\r\n  for (let i = 0; i < points.length; i++) {\r\n    let item = assign({}, {\r\n      lineColor: '#DE4A42',\r\n      showLabel: false,\r\n      labelFontColor: '#666666',\r\n      labelBgColor: '#DFE8FF',\r\n      labelBgOpacity: 0.8,\r\n      labelAlign: 'left',\r\n      labelOffsetX: 0,\r\n      labelOffsetY: 0,\r\n    }, points[i]);\r\n    if (markLineOption.type == 'dash') {\r\n      context.setLineDash([markLineOption.dashLength, markLineOption.dashLength]);\r\n    }\r\n    context.setStrokeStyle(item.lineColor);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.beginPath();\r\n    context.moveTo(startX, item.y);\r\n    context.lineTo(endX, item.y);\r\n    context.stroke();\r\n    context.setLineDash([]);\r\n    if (item.showLabel) {\r\n      let labelText = item.labelText ? item.labelText : item.value;\r\n      context.setFontSize(config.fontSize);\r\n      let textWidth = measureText(labelText, config.fontSize, context);\r\n      let bgWidth = textWidth + config.toolTipPadding * 2;\r\n      let bgStartX = item.labelAlign == 'left' ? opts.area[3] - bgWidth : opts.width - opts.area[1];\r\n      bgStartX += item.labelOffsetX;\r\n      let bgStartY = item.y - 0.5 * config.fontSize - config.toolTipPadding;\r\n      bgStartY += item.labelOffsetY;\r\n      let textX = bgStartX + config.toolTipPadding;\r\n      let textY = item.y;\r\n      context.setFillStyle(hexToRgb(item.labelBgColor, item.labelBgOpacity));\r\n      context.setStrokeStyle(item.labelBgColor);\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.beginPath();\r\n      context.rect(bgStartX, bgStartY, bgWidth, config.fontSize + 2 * config.toolTipPadding);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.fill();\r\n      context.setFontSize(config.fontSize);\r\n      context.setTextAlign('left');\r\n      context.setFillStyle(item.labelFontColor);\r\n      context.fillText(String(labelText), textX, bgStartY + config.fontSize + config.toolTipPadding/2);\r\n      context.stroke();\r\n      context.setTextAlign('left');\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints) {\r\n  var toolTipOption = assign({}, {\r\n    gridType: 'solid',\r\n    dashLength: 4\r\n  }, opts.extra.tooltip);\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  if (toolTipOption.gridType == 'dash') {\r\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\r\n  }\r\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\r\n  context.setLineWidth(1 * opts.pix);\r\n  context.beginPath();\r\n  context.moveTo(startX, opts.tooltip.offset.y);\r\n  context.lineTo(endX, opts.tooltip.offset.y);\r\n  context.stroke();\r\n  context.setLineDash([]);\r\n  if (toolTipOption.yAxisLabel) {\r\n    let labelText = calTooltipYAxisData(opts.tooltip.offset.y, opts.series, opts, config, eachSpacing);\r\n    let widthArr = opts.chartData.yAxisData.yAxisWidth;\r\n    let tStartLeft = opts.area[3];\r\n    let tStartRight = opts.width - opts.area[1];\r\n    for (let i = 0; i < labelText.length; i++) {\r\n      context.setFontSize(config.fontSize);\r\n      let textWidth = measureText(labelText[i], config.fontSize, context);\r\n      let bgStartX, bgEndX, bgWidth;\r\n      if (widthArr[i].position == 'left') {\r\n        bgStartX = tStartLeft - widthArr[i].width;\r\n        bgEndX = Math.max(bgStartX, bgStartX + textWidth + config.toolTipPadding * 2);\r\n      } else {\r\n        bgStartX = tStartRight;\r\n        bgEndX = Math.max(bgStartX + widthArr[i].width, bgStartX + textWidth + config.toolTipPadding * 2);\r\n      }\r\n      bgWidth = bgEndX - bgStartX;\r\n      let textX = bgStartX + (bgWidth - textWidth) / 2;\r\n      let textY = opts.tooltip.offset.y;\r\n      context.beginPath();\r\n      context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\r\n      context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 *\r\n        config.toolTipPadding);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFontSize(config.fontSize);\r\n      context.setFillStyle(toolTipOption.labelFontColor || opts.fontColor);\r\n      context.fillText(labelText[i], textX, textY + 0.5 * config.fontSize);\r\n      context.closePath();\r\n      context.stroke();\r\n      if (widthArr[i].position == 'left') {\r\n        tStartLeft -= (widthArr[i].width + opts.yAxis.padding * opts.pix);\r\n      } else {\r\n        tStartRight += widthArr[i].width + opts.yAxis.padding * opts.pix;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\r\n  var toolTipOption = assign({}, {\r\n    activeBgColor: '#000000',\r\n    activeBgOpacity: 0.08,\r\n    activeWidth: eachSpacing\r\n  }, opts.extra.column);\r\n  toolTipOption.activeWidth = toolTipOption.activeWidth > eachSpacing ? eachSpacing : toolTipOption.activeWidth;\r\n  var startY = opts.area[0];\r\n  var endY = opts.height - opts.area[2];\r\n  context.beginPath();\r\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\r\n  context.rect(offsetX - toolTipOption.activeWidth / 2, startY, toolTipOption.activeWidth, endY - startY);\r\n  context.closePath();\r\n  context.fill();\r\n  context.setFillStyle(\"#FFFFFF\");\r\n}\r\n\r\nfunction drawBarToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\r\n  var toolTipOption = assign({}, {\r\n    activeBgColor: '#000000',\r\n    activeBgOpacity: 0.08\r\n  }, opts.extra.bar);\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  context.beginPath();\r\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\r\n  context.rect( startX ,offsetX - eachSpacing / 2 ,  endX - startX,eachSpacing);\r\n  context.closePath();\r\n  context.fill();\r\n  context.setFillStyle(\"#FFFFFF\");\r\n}\r\n\r\n\r\nfunction drawToolTip(textList, offset, opts, config, context, eachSpacing, xAxisPoints) {\r\n  var toolTipOption = assign({}, {\r\n    showBox: true,\r\n    showArrow: true,\r\n    showCategory: false,\r\n    bgColor: '#000000',\r\n    bgOpacity: 0.7,\r\n    borderColor: '#000000',\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n    borderOpacity: 0.7,\r\n    fontColor: '#FFFFFF',\r\n    splitLine: true,\r\n  }, opts.extra.tooltip);\r\n  if(toolTipOption.showCategory==true && opts.categories){\r\n    textList.unshift({text:opts.categories[opts.tooltip.index],color:null})\r\n  }\r\n  var legendWidth = 4 * opts.pix;\r\n  var legendMarginRight = 5 * opts.pix;\r\n  var arrowWidth = toolTipOption.showArrow ? 8 * opts.pix : 0;\r\n  var isOverRightBorder = false;\r\n  if (opts.type == 'line' || opts.type == 'mount' || opts.type == 'area' || opts.type == 'candle' || opts.type == 'mix') {\r\n    if (toolTipOption.splitLine == true) {\r\n      drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\r\n    }\r\n  }\r\n  offset = assign({\r\n    x: 0,\r\n    y: 0\r\n  }, offset);\r\n  offset.y -= 8 * opts.pix;\r\n  var textWidth = textList.map(function(item) {\r\n    return measureText(item.text, config.fontSize, context);\r\n  });\r\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\r\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\r\n  if (toolTipOption.showBox == false) {\r\n    return\r\n  }\r\n  // if beyond the right border\r\n  if (offset.x - Math.abs(opts._scrollDistance_ || 0) + arrowWidth + toolTipWidth > opts.width) {\r\n    isOverRightBorder = true;\r\n  }\r\n  if (toolTipHeight + offset.y > opts.height) {\r\n    offset.y = opts.height - toolTipHeight;\r\n  }\r\n  // draw background rect\r\n  context.beginPath();\r\n  context.setFillStyle(hexToRgb(toolTipOption.bgColor || config.toolTipBackground, toolTipOption.bgOpacity || config.toolTipOpacity));\r\n  context.setLineWidth(toolTipOption.borderWidth * opts.pix);\r\n  context.setStrokeStyle(hexToRgb(toolTipOption.borderColor, toolTipOption.borderOpacity));\r\n  var radius = toolTipOption.borderRadius;\r\n  if (isOverRightBorder) {\r\n    if (toolTipOption.showArrow) {\r\n      context.moveTo(offset.x, offset.y + 10 * opts.pix);\r\n      context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pix + 5 * opts.pix);\r\n    }\r\n    context.arc(offset.x - arrowWidth - radius, offset.y + toolTipHeight - radius, radius, 0, Math.PI / 2, false);\r\n    context.arc(offset.x - arrowWidth - Math.round(toolTipWidth) + radius, offset.y + toolTipHeight - radius, radius,\r\n      Math.PI / 2, Math.PI, false);\r\n    context.arc(offset.x - arrowWidth - Math.round(toolTipWidth) + radius, offset.y + radius, radius, -Math.PI, -Math.PI / 2, false);\r\n    context.arc(offset.x - arrowWidth - radius, offset.y + radius, radius, -Math.PI / 2, 0, false);\r\n    if (toolTipOption.showArrow) {\r\n      context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pix - 5 * opts.pix);\r\n      context.lineTo(offset.x, offset.y + 10 * opts.pix);\r\n    }\r\n  } else {\r\n    if (toolTipOption.showArrow) {\r\n      context.moveTo(offset.x, offset.y + 10 * opts.pix);\r\n      context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pix - 5 * opts.pix);\r\n    }\r\n    context.arc(offset.x + arrowWidth + radius, offset.y + radius, radius, -Math.PI, -Math.PI / 2, false);\r\n    context.arc(offset.x + arrowWidth + Math.round(toolTipWidth) - radius, offset.y + radius, radius, -Math.PI / 2, 0,\r\n      false);\r\n    context.arc(offset.x + arrowWidth + Math.round(toolTipWidth) - radius, offset.y + toolTipHeight - radius, radius, 0,\r\n      Math.PI / 2, false);\r\n    context.arc(offset.x + arrowWidth + radius, offset.y + toolTipHeight - radius, radius, Math.PI / 2, Math.PI, false);\r\n    if (toolTipOption.showArrow) {\r\n      context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pix + 5 * opts.pix);\r\n      context.lineTo(offset.x, offset.y + 10 * opts.pix);\r\n    }\r\n  }\r\n  context.closePath();\r\n  context.fill();\r\n  if (toolTipOption.borderWidth > 0) {\r\n    context.stroke();\r\n  }\r\n  // draw legend\r\n  textList.forEach(function(item, index) {\r\n    if (item.color !== null) {\r\n      context.beginPath();\r\n      context.setFillStyle(item.color);\r\n      var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\r\n      var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding + 1;\r\n      if (isOverRightBorder) {\r\n        startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\r\n      }\r\n      context.fillRect(startX, startY, legendWidth, config.fontSize);\r\n      context.closePath();\r\n    }\r\n  });\r\n  // draw text list\r\n  textList.forEach(function(item, index) {\r\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\r\n    if (isOverRightBorder) {\r\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\r\n    }\r\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding;\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(toolTipOption.fontColor);\r\n    context.fillText(item.text, startX, startY + config.fontSize);\r\n    context.closePath();\r\n    context.stroke();\r\n  });\r\n}\r\n\r\nfunction drawColumnDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let columnOption = assign({}, {\r\n    type: 'group',\r\n    width: eachSpacing / 2,\r\n    meterBorder: 4,\r\n    meterFillColor: '#FFFFFF',\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    seriesGap: 2,\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.column);\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n  }\r\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\r\n    drawToolTipSplitArea(opts.tooltip.offset.x, opts, config, context, eachSpacing);\r\n  }\r\n  columnOption.customColor = fillCustomColor(columnOption.linearType, columnOption.customColor, series, config);\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    switch (columnOption.type) {\r\n      case 'group':\r\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n        var tooltipPoints = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(tooltipPoints);\r\n        points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          //fix issues/I27B1N yyoinge & Joeshu\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - item.width / 2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color\r\n            var strokeColor = item.color || eachSeries.color\r\n            if (columnOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (columnOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n                grd.addColorStop(columnOption.colorStop, hexToRgb(columnOption.customColor[eachSeries.linearIndex],columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            // 圆角边框\r\n            if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle === true) {\r\n              const left = startX;\r\n              const top = item.y;\r\n              const width = item.width;\r\n              const height = opts.height - opts.area[2] - item.y;\r\n              if (columnOption.barBorderCircle) {\r\n                columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n              }\r\n              let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n              let minRadius = Math.min(width/2,height/2);\r\n              r0 = r0 > minRadius ? minRadius : r0;\r\n              r1 = r1 > minRadius ? minRadius : r1;\r\n              r2 = r2 > minRadius ? minRadius : r2;\r\n              r3 = r3 > minRadius ? minRadius : r3;\r\n              r0 = r0 < 0 ? 0 : r0;\r\n              r1 = r1 < 0 ? 0 : r1;\r\n              r2 = r2 < 0 ? 0 : r2;\r\n              r3 = r3 < 0 ? 0 : r3;\r\n              context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n              context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n              context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n              context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n            } else {\r\n              context.moveTo(startX, item.y);\r\n              context.lineTo(startX + item.width, item.y);\r\n              context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n              context.lineTo(startX, opts.height - opts.area[2]);\r\n              context.lineTo(startX, item.y);\r\n              context.setLineWidth(1)\r\n              context.setStrokeStyle(strokeColor);\r\n            }\r\n            context.setFillStyle(fillColor);\r\n            context.closePath();\r\n            //context.stroke();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'stack':\r\n        // 绘制堆叠数据图\r\n        var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(points);\r\n        points = fixColumeStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color;\r\n            var startX = item.x - item.width / 2 + 1;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            var height0 = opts.height - item.y0 - opts.area[2];\r\n            if (seriesIndex > 0) {\r\n              height -= height0;\r\n            }\r\n            context.setFillStyle(fillColor);\r\n            context.moveTo(startX, item.y);\r\n            context.fillRect(startX, item.y, item.width, height);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'meter':\r\n        // 绘制温度计数据图\r\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n        calPoints.push(points);\r\n        points = fixColumeMeterData(points, eachSpacing, series.length, seriesIndex, config, opts, columnOption.meterBorder);\r\n          for (let i = 0; i < points.length; i++) {\r\n            let item = points[i];\r\n            if (item !== null && i > leftNum && i < rightNum) {\r\n              //画背景颜色\r\n              context.beginPath();\r\n              if (seriesIndex == 0 && columnOption.meterBorder > 0) {\r\n                context.setStrokeStyle(eachSeries.color);\r\n                context.setLineWidth(columnOption.meterBorder * opts.pix);\r\n              }\r\n              if(seriesIndex == 0){\r\n                context.setFillStyle(columnOption.meterFillColor);\r\n              }else{\r\n                context.setFillStyle(item.color || eachSeries.color);\r\n              }\r\n              var startX = item.x - item.width / 2;\r\n              var height = opts.height - item.y - opts.area[2];\r\n              if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle === true) {\r\n                const left = startX;\r\n                const top = item.y;\r\n                const width = item.width;\r\n                const height = opts.height - opts.area[2] - item.y;\r\n                if (columnOption.barBorderCircle) {\r\n                  columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n                }\r\n                let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n                let minRadius = Math.min(width/2,height/2);\r\n                r0 = r0 > minRadius ? minRadius : r0;\r\n                r1 = r1 > minRadius ? minRadius : r1;\r\n                r2 = r2 > minRadius ? minRadius : r2;\r\n                r3 = r3 > minRadius ? minRadius : r3;\r\n                r0 = r0 < 0 ? 0 : r0;\r\n                r1 = r1 < 0 ? 0 : r1;\r\n                r2 = r2 < 0 ? 0 : r2;\r\n                r3 = r3 < 0 ? 0 : r3;\r\n                context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n                context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n                context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n                context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n                context.fill();\r\n              }else{\r\n                context.moveTo(startX, item.y);\r\n                context.lineTo(startX + item.width, item.y);\r\n                context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n                context.lineTo(startX, opts.height - opts.area[2]);\r\n                context.lineTo(startX, item.y);\r\n                context.fill();\r\n              }\r\n              if (seriesIndex == 0 && columnOption.meterBorder > 0) {\r\n                context.closePath();\r\n                context.stroke();\r\n              }\r\n            }\r\n          }\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      switch (columnOption.type) {\r\n        case 'group':\r\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n          points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n          drawPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n        case 'stack':\r\n          var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n          drawPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n        case 'meter':\r\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n          drawPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawMountDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let mountOption = assign({}, {\r\n    type: 'mount',\r\n    widthRatio: 1,\r\n    borderWidth: 1,\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.mount);\r\n  mountOption.widthRatio = mountOption.widthRatio <= 0 ? 0 : mountOption.widthRatio;\r\n  mountOption.widthRatio = mountOption.widthRatio >= 2 ? 2 : mountOption.widthRatio;\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n  }\r\n  mountOption.customColor = fillCustomColor(mountOption.linearType, mountOption.customColor, series, config);\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[0]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var points = getMountDataPoints(series, minRange, maxRange, xAxisPoints, eachSpacing, opts, mountOption, process);\r\n    switch (mountOption.type) {\r\n      case 'bar':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            // 圆角边框\r\n            if ((mountOption.barBorderRadius && mountOption.barBorderRadius.length === 4) || mountOption.barBorderCircle === true) {\r\n              const left = startX;\r\n              const top = item.y;\r\n              const width = item.width;\r\n              const height = opts.height - opts.area[2] - item.y - mountOption.borderWidth * opts.pix / 2; \r\n              if (mountOption.barBorderCircle) {\r\n                mountOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n              }\r\n              let [r0, r1, r2, r3] = mountOption.barBorderRadius;\r\n              let minRadius = Math.min(width/2,height/2);\r\n              r0 = r0 > minRadius ? minRadius : r0;\r\n              r1 = r1 > minRadius ? minRadius : r1;\r\n              r2 = r2 > minRadius ? minRadius : r2;\r\n              r3 = r3 > minRadius ? minRadius : r3;\r\n              r0 = r0 < 0 ? 0 : r0;\r\n              r1 = r1 < 0 ? 0 : r1;\r\n              r2 = r2 < 0 ? 0 : r2;\r\n              r3 = r3 < 0 ? 0 : r3;\r\n              context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n              context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n              context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n              context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n            } else {\r\n              context.moveTo(startX, item.y);\r\n              context.lineTo(startX + item.width, item.y);\r\n              context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n              context.lineTo(startX, opts.height - opts.area[2]);\r\n              context.lineTo(startX, item.y);\r\n            }\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.closePath();\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'triangle':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            context.moveTo(startX, opts.height - opts.area[2]);\r\n            context.lineTo(item.x, item.y);\r\n            context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'mount':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            context.moveTo(startX, opts.height - opts.area[2]);\r\n            context.bezierCurveTo(item.x - item.width/4, opts.height - opts.area[2], item.x - item.width/4, item.y, item.x, item.y);\r\n            context.bezierCurveTo(item.x + item.width/4, item.y, item.x + item.width/4, opts.height - opts.area[2], startX + item.width, opts.height - opts.area[2]);\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'sharp':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            context.moveTo(startX, opts.height - opts.area[2]);\r\n            context.quadraticCurveTo(item.x - 0, opts.height - opts.area[2] - height/4, item.x, item.y);\r\n            context.quadraticCurveTo(item.x + 0, opts.height - opts.area[2] - height/4, startX + item.width, opts.height - opts.area[2])\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n    }\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[0]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var points = getMountDataPoints(series, minRange, maxRange, xAxisPoints, eachSpacing, opts, mountOption, process);\r\n    drawMountPointText(points, series, config, context, opts);\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: points,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawBarDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let yAxisPoints = [];\r\n  let eachSpacing = (opts.height - opts.area[0] - opts.area[2])/opts.categories.length;\r\n  for (let i = 0; i < opts.categories.length; i++) {\r\n    yAxisPoints.push(opts.area[0] + eachSpacing / 2 + eachSpacing * i);\r\n  }\r\n  let columnOption = assign({}, {\r\n    type: 'group',\r\n    width: eachSpacing / 2,\r\n    meterBorder: 4,\r\n    meterFillColor: '#FFFFFF',\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    seriesGap: 2,\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.bar);\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = yAxisPoints.length + 2;\r\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\r\n    drawBarToolTipSplitArea(opts.tooltip.offset.y, opts, config, context, eachSpacing);\r\n  }\r\n  columnOption.customColor = fillCustomColor(columnOption.linearType, columnOption.customColor, series, config);\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.xAxisData.ranges);\r\n    maxRange = ranges.pop();\r\n    minRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    switch (columnOption.type) {\r\n      case 'group':\r\n        var points = getBarDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, process);\r\n        var tooltipPoints = getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(tooltipPoints);\r\n        points = fixBarData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          //fix issues/I27B1N yyoinge & Joeshu\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            //var startX = item.x - item.width / 2;\r\n            var startX = opts.area[3];\r\n            var startY = item.y - item.width / 2;\r\n            var height = item.height;\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color\r\n            var strokeColor = item.color || eachSeries.color\r\n            if (columnOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, item.x, item.y);\r\n              //透明渐变\r\n              if (columnOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n                grd.addColorStop(columnOption.colorStop, hexToRgb(columnOption.customColor[eachSeries.linearIndex],columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            // 圆角边框\r\n            if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle === true) {\r\n              const left = startX;\r\n              const width = item.width;\r\n              const top = item.y - item.width / 2;\r\n              const height = item.height;\r\n              if (columnOption.barBorderCircle) {\r\n                columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n              }\r\n              let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n              let minRadius = Math.min(width/2,height/2);\r\n              r0 = r0 > minRadius ? minRadius : r0;\r\n              r1 = r1 > minRadius ? minRadius : r1;\r\n              r2 = r2 > minRadius ? minRadius : r2;\r\n              r3 = r3 > minRadius ? minRadius : r3;\r\n              r0 = r0 < 0 ? 0 : r0;\r\n              r1 = r1 < 0 ? 0 : r1;\r\n              r2 = r2 < 0 ? 0 : r2;\r\n              r3 = r3 < 0 ? 0 : r3;\r\n              \r\n              context.arc(left + r3, top + r3, r3, -Math.PI, -Math.PI / 2);\r\n              context.arc(item.x - r0, top + r0, r0, -Math.PI / 2, 0);\r\n              context.arc(item.x - r1, top + width - r1, r1, 0, Math.PI / 2);\r\n              context.arc(left + r2, top + width - r2, r2, Math.PI / 2, Math.PI);\r\n            } else {\r\n              context.moveTo(startX, startY);\r\n              context.lineTo(item.x, startY);\r\n              context.lineTo(item.x, startY + item.width);\r\n              context.lineTo(startX, startY + item.width);\r\n              context.lineTo(startX, startY);\r\n              context.setLineWidth(1)\r\n              context.setStrokeStyle(strokeColor);\r\n            }\r\n            context.setFillStyle(fillColor);\r\n            context.closePath();\r\n            //context.stroke();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'stack':\r\n        // 绘制堆叠数据图\r\n        var points = getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(points);\r\n        points = fixBarStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color;\r\n            var startX = item.x0;\r\n            context.setFillStyle(fillColor);\r\n            context.moveTo(startX, item.y - item.width/2);\r\n            context.fillRect(startX, item.y - item.width/2, item.height , item.width);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.xAxisData.ranges);\r\n      maxRange = ranges.pop();\r\n      minRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      switch (columnOption.type) {\r\n        case 'group':\r\n          var points = getBarDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, process);\r\n          points = fixBarData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n          drawBarPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n        case 'stack':\r\n          var points = getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n          drawBarPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  return {\r\n    yAxisPoints: yAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawCandleDataPoints(series, seriesMA, opts, config, context) {\r\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\r\n  var candleOption = assign({}, {\r\n    color: {},\r\n    average: {}\r\n  }, opts.extra.candle);\r\n  candleOption.color = assign({}, {\r\n    upLine: '#f04864',\r\n    upFill: '#f04864',\r\n    downLine: '#2fc25b',\r\n    downFill: '#2fc25b'\r\n  }, candleOption.color);\r\n  candleOption.average = assign({}, {\r\n    show: false,\r\n    name: [],\r\n    day: [],\r\n    color: config.color\r\n  }, candleOption.average);\r\n  opts.extra.candle = candleOption;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  //画均线\r\n  if (candleOption.average.show || seriesMA) { //Merge pull request !12 from 邱贵翔\r\n    seriesMA.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      var splitPointList = splitPoints(points,eachSeries);\r\n      for (let i = 0; i < splitPointList.length; i++) {\r\n        let points = splitPointList[i];\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setLineWidth(1);\r\n        if (points.length === 1) {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n        } else {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          let startPoint = 0;\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x,\r\n                item.y);\r\n            }\r\n          }\r\n          context.moveTo(points[0].x, points[0].y);\r\n        }\r\n        context.closePath();\r\n        context.stroke();\r\n      }\r\n    });\r\n  }\r\n  //画K线\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    var splitPointList = splitPoints(points,eachSeries);\r\n    for (let i = 0; i < splitPointList[0].length; i++) {\r\n      if (i > leftNum && i < rightNum) {\r\n        let item = splitPointList[0][i];\r\n        context.beginPath();\r\n        //如果上涨\r\n        if (data[i][1] - data[i][0] > 0) {\r\n          context.setStrokeStyle(candleOption.color.upLine);\r\n          context.setFillStyle(candleOption.color.upFill);\r\n          context.setLineWidth(1 * opts.pix);\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\r\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.lineTo(item[2].x, item[2].y); //底点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\r\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n        } else {\r\n          context.setStrokeStyle(candleOption.color.downLine);\r\n          context.setFillStyle(candleOption.color.downFill);\r\n          context.setLineWidth(1 * opts.pix);\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\r\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.lineTo(item[2].x, item[2].y); //底点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\r\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n        }\r\n        context.closePath();\r\n        context.fill();\r\n        context.stroke();\r\n      }\r\n    }\r\n  });\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawAreaDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var areaOption = assign({}, {\r\n    type: 'straight',\r\n    opacity: 0.2,\r\n    addLine: false,\r\n    width: 2,\r\n    gradient: false\r\n  }, opts.extra.area);\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let endY = opts.height - opts.area[2];\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    let data = eachSeries.data;\r\n    let points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    let splitPointList = splitPoints(points,eachSeries);\r\n    for (let i = 0; i < splitPointList.length; i++) {\r\n      let points = splitPointList[i];\r\n      // 绘制区域数\r\n      context.beginPath();\r\n      context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n      if (areaOption.gradient) {\r\n        let gradient = context.createLinearGradient(0, opts.area[0], 0, opts.height - opts.area[2]);\r\n        gradient.addColorStop('0', hexToRgb(eachSeries.color, areaOption.opacity));\r\n        gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\r\n        context.setFillStyle(gradient);\r\n      } else {\r\n        context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n      }\r\n      context.setLineWidth(areaOption.width * opts.pix);\r\n      if (points.length > 1) {\r\n        let firstPoint = points[0];\r\n        let lastPoint = points[points.length - 1];\r\n        context.moveTo(firstPoint.x, firstPoint.y);\r\n        let startPoint = 0;\r\n        if (areaOption.type === 'curve') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              let ctrlPoint = createCurveControlPoints(points, j - 1);\r\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n            }\r\n          };\r\n        } \r\n        if (areaOption.type === 'straight') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        if (areaOption.type === 'step') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, points[j - 1].y);\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        context.lineTo(lastPoint.x, endY);\r\n        context.lineTo(firstPoint.x, endY);\r\n        context.lineTo(firstPoint.x, firstPoint.y);\r\n      } else {\r\n        let item = points[0];\r\n        context.moveTo(item.x - eachSpacing / 2, item.y);\r\n        context.lineTo(item.x + eachSpacing / 2, item.y);\r\n        context.lineTo(item.x + eachSpacing / 2, endY);\r\n        context.lineTo(item.x - eachSpacing / 2, endY);\r\n        context.moveTo(item.x - eachSpacing / 2, item.y);\r\n      }\r\n      context.closePath();\r\n      context.fill();\r\n      //画连线\r\n      if (areaOption.addLine) {\r\n        if (eachSeries.lineType == 'dash') {\r\n          let dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\r\n          dashLength *= opts.pix;\r\n          context.setLineDash([dashLength, dashLength]);\r\n        }\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setLineWidth(areaOption.width * opts.pix);\r\n        if (points.length === 1) {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n        } else {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          let startPoint = 0;\r\n          if (areaOption.type === 'curve') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                let ctrlPoint = createCurveControlPoints(points, j - 1);\r\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          if (areaOption.type === 'straight') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          if (areaOption.type === 'step') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, points[j - 1].y);\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          context.moveTo(points[0].x, points[0].y);\r\n        }\r\n        context.stroke();\r\n        context.setLineDash([]);\r\n      }\r\n    }\r\n    //画点\r\n    if (opts.dataPointShape !== false) {\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      drawPointText(points, eachSeries, config, context, opts);\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawScatterDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var scatterOption = assign({}, {\r\n    type: 'circle'\r\n  }, opts.extra.scatter);\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    context.beginPath();\r\n    context.setStrokeStyle(eachSeries.color);\r\n    context.setFillStyle(eachSeries.color);\r\n    context.setLineWidth(1 * opts.pix);\r\n    var shape = eachSeries.pointShape;\r\n    if (shape === 'diamond') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x, item.y - 4.5);\r\n          context.lineTo(item.x - 4.5, item.y);\r\n          context.lineTo(item.x, item.y + 4.5);\r\n          context.lineTo(item.x + 4.5, item.y);\r\n          context.lineTo(item.x, item.y - 4.5);\r\n        }\r\n      });\r\n    } else if (shape === 'circle') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x + 2.5 * opts.pix, item.y);\r\n          context.arc(item.x, item.y, 3 * opts.pix, 0, 2 * Math.PI, false);\r\n        }\r\n      });\r\n    } else if (shape === 'square') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x - 3.5, item.y - 3.5);\r\n          context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\r\n        }\r\n      });\r\n    } else if (shape === 'triangle') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x, item.y - 4.5);\r\n          context.lineTo(item.x - 4.5, item.y + 4.5);\r\n          context.lineTo(item.x + 4.5, item.y + 4.5);\r\n          context.lineTo(item.x, item.y - 4.5);\r\n        }\r\n      });\r\n    } else if (shape === 'triangle') {\r\n      return;\r\n    }\r\n    context.closePath();\r\n    context.fill();\r\n    context.stroke();\r\n  });\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      drawPointText(points, eachSeries, config, context, opts);\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawBubbleDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var bubbleOption = assign({}, {\r\n    opacity: 1,\r\n    border:2\r\n  }, opts.extra.bubble);\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    context.beginPath();\r\n    context.setStrokeStyle(eachSeries.color);\r\n    context.setLineWidth(bubbleOption.border * opts.pix);\r\n    context.setFillStyle(hexToRgb(eachSeries.color, bubbleOption.opacity));\r\n    points.forEach(function(item, index) {\r\n      context.moveTo(item.x + item.r, item.y);\r\n      context.arc(item.x, item.y, item.r * opts.pix, 0, 2 * Math.PI, false);\r\n    });\r\n    context.closePath();\r\n    context.fill();\r\n    context.stroke();\r\n    \r\n    if (opts.dataLabel !== false && process === 1) {\r\n      points.forEach(function(item, index) {\r\n        context.beginPath();\r\n        var fontSize = series.textSize * opts.pix || config.fontSize;\r\n        context.setFontSize(fontSize);\r\n        context.setFillStyle(series.textColor || \"#FFFFFF\");\r\n        context.setTextAlign('center');\r\n        context.fillText(String(item.t), item.x, item.y + fontSize/2);\r\n        context.closePath();\r\n        context.stroke();\r\n        context.setTextAlign('left');\r\n      });\r\n    }\r\n  });\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawLineDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var lineOption = assign({}, {\r\n    type: 'straight',\r\n    width: 2\r\n  }, opts.extra.line);\r\n  lineOption.width *= opts.pix;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    var splitPointList = splitPoints(points,eachSeries);\r\n    if (eachSeries.lineType == 'dash') {\r\n      let dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\r\n      dashLength *= opts.pix;\r\n      context.setLineDash([dashLength, dashLength]);\r\n    }\r\n    context.beginPath();\r\n    context.setStrokeStyle(eachSeries.color);\r\n    context.setLineWidth(lineOption.width);\r\n    splitPointList.forEach(function(points, index) {\r\n      if (points.length === 1) {\r\n        context.moveTo(points[0].x, points[0].y);\r\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n      } else {\r\n        context.moveTo(points[0].x, points[0].y);\r\n        let startPoint = 0;\r\n        if (lineOption.type === 'curve') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        if (lineOption.type === 'straight') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        if (lineOption.type === 'step') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, points[j - 1].y);\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        context.moveTo(points[0].x, points[0].y);\r\n      }\r\n    });\r\n    context.stroke();\r\n    context.setLineDash([]);\r\n    if (opts.dataPointShape !== false) {\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      drawPointText(points, eachSeries, config, context, opts);\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawMixDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let columnOption = assign({}, {\r\n    width: eachSpacing / 2,\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    seriesGap: 2,\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.mix.column);\r\n  let areaOption = assign({}, {\r\n    opacity: 0.2,\r\n    gradient: false\r\n  }, opts.extra.mix.area);\r\n  let endY = opts.height - opts.area[2];\r\n  let calPoints = [];\r\n  var columnIndex = 0;\r\n  var columnLength = 0;\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    if (eachSeries.type == 'column') {\r\n      columnLength += 1;\r\n    }\r\n  });\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  columnOption.customColor = fillCustomColor(columnOption.linearType, columnOption.customColor, series, config);\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    // 绘制柱状数据图\r\n    if (eachSeries.type == 'column') {\r\n      points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\r\n      for (let i = 0; i < points.length; i++) {\r\n        let item = points[i];\r\n        if (item !== null && i > leftNum && i < rightNum) {\r\n          var startX = item.x - item.width / 2;\r\n          var height = opts.height - item.y - opts.area[2];\r\n          context.beginPath();\r\n          var fillColor = item.color || eachSeries.color\r\n          var strokeColor = item.color || eachSeries.color\r\n          if (columnOption.linearType !== 'none') {\r\n            var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n            //透明渐变\r\n            if (columnOption.linearType == 'opacity') {\r\n              grd.addColorStop(0, hexToRgb(fillColor, columnOption.linearOpacity));\r\n              grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n            } else {\r\n              grd.addColorStop(0, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n              grd.addColorStop(columnOption.colorStop, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n              grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n            }\r\n            fillColor = grd\r\n          }\r\n          // 圆角边框\r\n          if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle) {\r\n            const left = startX;\r\n            const top = item.y;\r\n            const width = item.width;\r\n            const height = opts.height - opts.area[2] - item.y;\r\n            if (columnOption.barBorderCircle) {\r\n              columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n            }\r\n            let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n            let minRadius = Math.min(width/2,height/2);\r\n            r0 = r0 > minRadius ? minRadius : r0;\r\n            r1 = r1 > minRadius ? minRadius : r1;\r\n            r2 = r2 > minRadius ? minRadius : r2;\r\n            r3 = r3 > minRadius ? minRadius : r3;\r\n            r0 = r0 < 0 ? 0 : r0;\r\n            r1 = r1 < 0 ? 0 : r1;\r\n            r2 = r2 < 0 ? 0 : r2;\r\n            r3 = r3 < 0 ? 0 : r3;\r\n            context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n            context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n            context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n            context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n          } else {\r\n            context.moveTo(startX, item.y);\r\n            context.lineTo(startX + item.width, item.y);\r\n            context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n            context.lineTo(startX, opts.height - opts.area[2]);\r\n            context.lineTo(startX, item.y);\r\n            context.setLineWidth(1)\r\n            context.setStrokeStyle(strokeColor);\r\n          }\r\n          context.setFillStyle(fillColor);\r\n          context.closePath();\r\n          context.fill();\r\n        }\r\n      }\r\n      columnIndex += 1;\r\n    }\r\n    //绘制区域图数据\r\n    if (eachSeries.type == 'area') {\r\n      let splitPointList = splitPoints(points,eachSeries);\r\n      for (let i = 0; i < splitPointList.length; i++) {\r\n        let points = splitPointList[i];\r\n        // 绘制区域数据\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n        if (areaOption.gradient) {\r\n          let gradient = context.createLinearGradient(0, opts.area[0], 0, opts.height - opts.area[2]);\r\n          gradient.addColorStop('0', hexToRgb(eachSeries.color, areaOption.opacity));\r\n          gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\r\n          context.setFillStyle(gradient);\r\n        } else {\r\n          context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n        }\r\n        context.setLineWidth(2 * opts.pix);\r\n        if (points.length > 1) {\r\n          var firstPoint = points[0];\r\n          let lastPoint = points[points.length - 1];\r\n          context.moveTo(firstPoint.x, firstPoint.y);\r\n          let startPoint = 0;\r\n          if (eachSeries.style === 'curve') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n              }\r\n            };\r\n          } else {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          context.lineTo(lastPoint.x, endY);\r\n          context.lineTo(firstPoint.x, endY);\r\n          context.lineTo(firstPoint.x, firstPoint.y);\r\n        } else {\r\n          let item = points[0];\r\n          context.moveTo(item.x - eachSpacing / 2, item.y);\r\n          context.lineTo(item.x + eachSpacing / 2, item.y);\r\n          context.lineTo(item.x + eachSpacing / 2, endY);\r\n          context.lineTo(item.x - eachSpacing / 2, endY);\r\n          context.moveTo(item.x - eachSpacing / 2, item.y);\r\n        }\r\n        context.closePath();\r\n        context.fill();\r\n      }\r\n    }\r\n    // 绘制折线数据图\r\n    if (eachSeries.type == 'line') {\r\n      var splitPointList = splitPoints(points,eachSeries);\r\n      splitPointList.forEach(function(points, index) {\r\n        if (eachSeries.lineType == 'dash') {\r\n          let dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\r\n          dashLength *= opts.pix;\r\n          context.setLineDash([dashLength, dashLength]);\r\n        }\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setLineWidth(2 * opts.pix);\r\n        if (points.length === 1) {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n        } else {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          let startPoint = 0;\r\n          if (eachSeries.style == 'curve') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\r\n                  item.x, item.y);\r\n              }\r\n            }\r\n          } else {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            }\r\n          }\r\n          context.moveTo(points[0].x, points[0].y);\r\n        }\r\n        context.stroke();\r\n        context.setLineDash([]);\r\n      });\r\n    }\r\n    // 绘制点数据图\r\n    if (eachSeries.type == 'point') {\r\n      eachSeries.addPoint = true;\r\n    }\r\n    if (eachSeries.addPoint == true && eachSeries.type !== 'column') {\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    var columnIndex = 0;\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      if (eachSeries.type !== 'column') {\r\n        drawPointText(points, eachSeries, config, context, opts);\r\n      } else {\r\n        points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\r\n        drawPointText(points, eachSeries, config, context, opts);\r\n        columnIndex += 1;\r\n      }\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing,\r\n  }\r\n}\r\n\r\n\r\nfunction drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints) {\r\n  var toolTipOption = opts.extra.tooltip || {};\r\n  if (toolTipOption.horizentalLine && opts.tooltip && process === 1 && (opts.type == 'line' || opts.type == 'area' || opts.type == 'column' || opts.type == 'mount' || opts.type == 'candle' || opts.type == 'mix')) {\r\n    drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints)\r\n  }\r\n  context.save();\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n  }\r\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\r\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context, eachSpacing, xAxisPoints);\r\n  }\r\n  context.restore();\r\n\r\n}\r\n\r\nfunction drawXAxis(categories, opts, config, context) {\r\n\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    startX = xAxisData.startX,\r\n    endX = xAxisData.endX,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var boundaryGap = 'center';\r\n  if (opts.type == 'bar' || opts.type == 'line' || opts.type == 'area'|| opts.type == 'scatter' || opts.type == 'bubble') {\r\n    boundaryGap = opts.xAxis.boundaryGap;\r\n  }\r\n  var startY = opts.height - opts.area[2];\r\n  var endY = opts.area[0];\r\n\r\n  //绘制滚动条\r\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\r\n    var scrollY = opts.height - opts.area[2] + config.xAxisHeight;\r\n    var scrollScreenWidth = endX - startX;\r\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\r\n    if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1){\r\n      if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n      scrollTotalWidth += (opts.extra.mount.widthRatio - 1)*eachSpacing;\r\n    }\r\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\r\n    var scrollLeft = 0;\r\n    if (opts._scrollDistance_) {\r\n      scrollLeft = -opts._scrollDistance_ * (scrollScreenWidth) / scrollTotalWidth;\r\n    }\r\n    context.beginPath();\r\n    context.setLineCap('round');\r\n    context.setLineWidth(6 * opts.pix);\r\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\r\n    context.moveTo(startX, scrollY);\r\n    context.lineTo(endX, scrollY);\r\n    context.stroke();\r\n    context.closePath();\r\n    context.beginPath();\r\n    context.setLineCap('round');\r\n    context.setLineWidth(6 * opts.pix);\r\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\r\n    context.moveTo(startX + scrollLeft, scrollY);\r\n    context.lineTo(startX + scrollLeft + scrollWidth, scrollY);\r\n    context.stroke();\r\n    context.closePath();\r\n    context.setLineCap('butt');\r\n  }\r\n  context.save();\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n  }\r\n  //绘制X轴刻度线\r\n  if (opts.xAxis.calibration === true) {\r\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\r\n    context.setLineCap('butt');\r\n    context.setLineWidth(1 * opts.pix);\r\n    xAxisPoints.forEach(function(item, index) {\r\n      if (index > 0) {\r\n        context.beginPath();\r\n        context.moveTo(item - eachSpacing / 2, startY);\r\n        context.lineTo(item - eachSpacing / 2, startY + 3 * opts.pix);\r\n        context.closePath();\r\n        context.stroke();\r\n      }\r\n    });\r\n  }\r\n  //绘制X轴网格\r\n  if (opts.xAxis.disableGrid !== true) {\r\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\r\n    context.setLineCap('butt');\r\n    context.setLineWidth(1 * opts.pix);\r\n    if (opts.xAxis.gridType == 'dash') {\r\n      context.setLineDash([opts.xAxis.dashLength * opts.pix, opts.xAxis.dashLength * opts.pix]);\r\n    }\r\n    opts.xAxis.gridEval = opts.xAxis.gridEval || 1;\r\n    xAxisPoints.forEach(function(item, index) {\r\n      if (index % opts.xAxis.gridEval == 0) {\r\n        context.beginPath();\r\n        context.moveTo(item, startY);\r\n        context.lineTo(item, endY);\r\n        context.stroke();\r\n      }\r\n    });\r\n    context.setLineDash([]);\r\n  }\r\n  //绘制X轴文案\r\n  if (opts.xAxis.disabled !== true) {\r\n    // 对X轴列表做抽稀处理\r\n    //默认全部显示X轴标签\r\n    let maxXAxisListLength = categories.length;\r\n    //如果设置了X轴单屏数量\r\n    if (opts.xAxis.labelCount) {\r\n      //如果设置X轴密度\r\n      if (opts.xAxis.itemCount) {\r\n        maxXAxisListLength = Math.ceil(categories.length / opts.xAxis.itemCount * opts.xAxis.labelCount);\r\n      } else {\r\n        maxXAxisListLength = opts.xAxis.labelCount;\r\n      }\r\n      maxXAxisListLength -= 1;\r\n    }\r\n\r\n    let ratio = Math.ceil(categories.length / maxXAxisListLength);\r\n\r\n    let newCategories = [];\r\n    let cgLength = categories.length;\r\n    for (let i = 0; i < cgLength; i++) {\r\n      if (i % ratio !== 0) {\r\n        newCategories.push(\"\");\r\n      } else {\r\n        newCategories.push(categories[i]);\r\n      }\r\n    }\r\n    newCategories[cgLength - 1] = categories[cgLength - 1];\r\n    var xAxisFontSize = opts.xAxis.fontSize * opts.pix || config.fontSize;\r\n    if (config._xAxisTextAngle_ === 0) {\r\n      newCategories.forEach(function(item, index) {\r\n        var xitem = opts.xAxis.formatter ? opts.xAxis.formatter(item,index,opts) : item;\r\n        var offset = -measureText(String(xitem), xAxisFontSize, context) / 2;\r\n        if (boundaryGap == 'center') {\r\n          offset += eachSpacing / 2;\r\n        }\r\n        var scrollHeight = 0;\r\n        if (opts.xAxis.scrollShow) {\r\n          scrollHeight = 6 * opts.pix;\r\n        }\r\n        context.beginPath();\r\n        context.setFontSize(xAxisFontSize);\r\n        context.setFillStyle(opts.xAxis.fontColor || opts.fontColor);\r\n        context.fillText(String(xitem), xAxisPoints[index] + offset, startY + xAxisFontSize + (config.xAxisHeight - scrollHeight - xAxisFontSize) / 2);\r\n        context.closePath();\r\n        context.stroke();\r\n      });\r\n    } else {\r\n      newCategories.forEach(function(item, index) {\r\n        var xitem = opts.xAxis.formatter ? opts.xAxis.formatter(item) : item;\r\n        context.save();\r\n        context.beginPath();\r\n        context.setFontSize(xAxisFontSize);\r\n        context.setFillStyle(opts.xAxis.fontColor || opts.fontColor);\r\n        var textWidth = measureText(String(xitem), xAxisFontSize, context);\r\n        var offsetX = xAxisPoints[index];\r\n        if (boundaryGap == 'center') {\r\n          offsetX = xAxisPoints[index] + eachSpacing / 2;\r\n        }\r\n        var scrollHeight = 0;\r\n        if (opts.xAxis.scrollShow) {\r\n          scrollHeight = 6 * opts.pix;\r\n        }\r\n        var offsetY = startY + 6 * opts.pix + xAxisFontSize - xAxisFontSize * Math.abs(Math.sin(config._xAxisTextAngle_));\r\n        if(opts.xAxis.rotateAngle < 0){\r\n          offsetX -= xAxisFontSize / 2;\r\n          textWidth = 0;\r\n        }else{\r\n          offsetX += xAxisFontSize / 2;\r\n          textWidth = -textWidth;\r\n        }\r\n        context.translate(offsetX, offsetY);\r\n        context.rotate(-1 * config._xAxisTextAngle_);\r\n        context.fillText(String(xitem), textWidth , 0 );\r\n        context.closePath();\r\n        context.stroke();\r\n        context.restore();\r\n      });\r\n    }\r\n  }\r\n  context.restore();\r\n  //绘制X轴轴线\r\n  if (opts.xAxis.axisLine) {\r\n    context.beginPath();\r\n    context.setStrokeStyle(opts.xAxis.axisLineColor);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.moveTo(startX, opts.height - opts.area[2]);\r\n    context.lineTo(endX, opts.height - opts.area[2]);\r\n    context.stroke();\r\n  }\r\n}\r\n\r\nfunction drawYAxisGrid(categories, opts, config, context) {\r\n  if (opts.yAxis.disableGrid === true) {\r\n    return;\r\n  }\r\n  let spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  let eachSpacing = spacingValid / opts.yAxis.splitNumber;\r\n  let startX = opts.area[3];\r\n  let xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\r\n    xAxiseachSpacing = opts.chartData.xAxisData.eachSpacing;\r\n  let TotalWidth = xAxiseachSpacing * (xAxisPoints.length - 1);\r\n  if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1 ){\r\n    if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n    TotalWidth += (opts.extra.mount.widthRatio - 1)*xAxiseachSpacing;\r\n  }\r\n  let endX = startX + TotalWidth;\r\n  let points = [];\r\n  let startY = 1\r\n  if (opts.xAxis.axisLine === false) {\r\n    startY = 0\r\n  }\r\n  for (let i = startY; i < opts.yAxis.splitNumber + 1; i++) {\r\n    points.push(opts.height - opts.area[2] - eachSpacing * i);\r\n  }\r\n  context.save();\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n  }\r\n  if (opts.yAxis.gridType == 'dash') {\r\n    context.setLineDash([opts.yAxis.dashLength * opts.pix, opts.yAxis.dashLength * opts.pix]);\r\n  }\r\n  context.setStrokeStyle(opts.yAxis.gridColor);\r\n  context.setLineWidth(1 * opts.pix);\r\n  points.forEach(function(item, index) {\r\n    context.beginPath();\r\n    context.moveTo(startX, item);\r\n    context.lineTo(endX, item);\r\n    context.stroke();\r\n  });\r\n  context.setLineDash([]);\r\n  context.restore();\r\n}\r\n\r\nfunction drawYAxis(series, opts, config, context) {\r\n  if (opts.yAxis.disabled === true) {\r\n    return;\r\n  }\r\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  var eachSpacing = spacingValid / opts.yAxis.splitNumber;\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  var endY = opts.height - opts.area[2];\r\n  var fillEndY = endY + config.xAxisHeight;\r\n  if (opts.xAxis.scrollShow) {\r\n    fillEndY -= 3 * opts.pix;\r\n  }\r\n  if (opts.xAxis.rotateLabel) {\r\n    fillEndY = opts.height - opts.area[2] + opts.fontSize * opts.pix / 2;\r\n  }\r\n  // set YAxis background\r\n  context.beginPath();\r\n  context.setFillStyle(opts.background);\r\n  if (opts.enableScroll == true && opts.xAxis.scrollPosition && opts.xAxis.scrollPosition !== 'left') {\r\n    context.fillRect(0, 0, startX, fillEndY);\r\n  }\r\n  if (opts.enableScroll == true && opts.xAxis.scrollPosition && opts.xAxis.scrollPosition !== 'right') {\r\n    context.fillRect(endX, 0, opts.width, fillEndY);\r\n  }\r\n  context.closePath();\r\n  context.stroke();\r\n  \r\n  let tStartLeft = opts.area[3];\r\n  let tStartRight = opts.width - opts.area[1];\r\n  let tStartCenter = opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2;\r\n  if (opts.yAxis.data) {\r\n    for (let i = 0; i < opts.yAxis.data.length; i++) {\r\n      let yData = opts.yAxis.data[i];\r\n      var points = [];\r\n      if(yData.type === 'categories'){\r\n        for (let i = 0; i <= yData.categories.length; i++) {\r\n          points.push(opts.area[0] + spacingValid / yData.categories.length / 2 + spacingValid / yData.categories.length * i);\r\n        }\r\n      }else{\r\n        for (let i = 0; i <= opts.yAxis.splitNumber; i++) {\r\n          points.push(opts.area[0] + eachSpacing * i);\r\n        }\r\n      }\r\n      if (yData.disabled !== true) {\r\n        let rangesFormat = opts.chartData.yAxisData.rangesFormat[i];\r\n        let yAxisFontSize = yData.fontSize ? yData.fontSize * opts.pix : config.fontSize;\r\n        let yAxisWidth = opts.chartData.yAxisData.yAxisWidth[i];\r\n        let textAlign = yData.textAlign || \"right\";\r\n        //画Y轴刻度及文案\r\n        rangesFormat.forEach(function(item, index) {\r\n          var pos = points[index];\r\n          context.beginPath();\r\n          context.setFontSize(yAxisFontSize);\r\n          context.setLineWidth(1 * opts.pix);\r\n          context.setStrokeStyle(yData.axisLineColor || '#cccccc');\r\n          context.setFillStyle(yData.fontColor || opts.fontColor);\r\n          let tmpstrat = 0;\r\n          let gapwidth = 4 * opts.pix;\r\n          if (yAxisWidth.position == 'left') {\r\n            //画刻度线\r\n            if (yData.calibration == true) {\r\n              context.moveTo(tStartLeft, pos);\r\n              context.lineTo(tStartLeft - 3 * opts.pix, pos);\r\n              gapwidth += 3 * opts.pix;\r\n            }\r\n            //画文字\r\n            switch (textAlign) {\r\n              case \"left\":\r\n                context.setTextAlign('left');\r\n                tmpstrat = tStartLeft - yAxisWidth.width\r\n                break;\r\n              case \"right\":\r\n                context.setTextAlign('right');\r\n                tmpstrat = tStartLeft - gapwidth\r\n                break;\r\n              default:\r\n                context.setTextAlign('center');\r\n                tmpstrat = tStartLeft - yAxisWidth.width / 2\r\n            }\r\n            context.fillText(String(item), tmpstrat, pos + yAxisFontSize / 2 - 3 * opts.pix);\r\n\r\n          } else if (yAxisWidth.position == 'right') {\r\n            //画刻度线\r\n            if (yData.calibration == true) {\r\n              context.moveTo(tStartRight, pos);\r\n              context.lineTo(tStartRight + 3 * opts.pix, pos);\r\n              gapwidth += 3 * opts.pix;\r\n            }\r\n            switch (textAlign) {\r\n              case \"left\":\r\n                context.setTextAlign('left');\r\n                tmpstrat = tStartRight + gapwidth\r\n                break;\r\n              case \"right\":\r\n                context.setTextAlign('right');\r\n                tmpstrat = tStartRight + yAxisWidth.width\r\n                break;\r\n              default:\r\n                context.setTextAlign('center');\r\n                tmpstrat = tStartRight + yAxisWidth.width / 2\r\n            }\r\n            context.fillText(String(item), tmpstrat, pos + yAxisFontSize / 2 - 3 * opts.pix);\r\n          } else if (yAxisWidth.position == 'center') {\r\n            //画刻度线\r\n            if (yData.calibration == true) {\r\n              context.moveTo(tStartCenter, pos);\r\n              context.lineTo(tStartCenter - 3 * opts.pix, pos);\r\n              gapwidth += 3 * opts.pix;\r\n            }\r\n            //画文字\r\n            switch (textAlign) {\r\n              case \"left\":\r\n                context.setTextAlign('left');\r\n                tmpstrat = tStartCenter - yAxisWidth.width\r\n                break;\r\n              case \"right\":\r\n                context.setTextAlign('right');\r\n                tmpstrat = tStartCenter - gapwidth\r\n                break;\r\n              default:\r\n                context.setTextAlign('center');\r\n                tmpstrat = tStartCenter - yAxisWidth.width / 2\r\n            }\r\n            context.fillText(String(item), tmpstrat, pos + yAxisFontSize / 2 - 3 * opts.pix);\r\n          }\r\n          context.closePath();\r\n          context.stroke();\r\n          context.setTextAlign('left');\r\n        });\r\n        //画Y轴轴线\r\n        if (yData.axisLine !== false) {\r\n          context.beginPath();\r\n          context.setStrokeStyle(yData.axisLineColor || '#cccccc');\r\n          context.setLineWidth(1 * opts.pix);\r\n          if (yAxisWidth.position == 'left') {\r\n            context.moveTo(tStartLeft, opts.height - opts.area[2]);\r\n            context.lineTo(tStartLeft, opts.area[0]);\r\n          } else if (yAxisWidth.position == 'right') {\r\n            context.moveTo(tStartRight, opts.height - opts.area[2]);\r\n            context.lineTo(tStartRight, opts.area[0]);\r\n          } else if (yAxisWidth.position == 'center') {\r\n            context.moveTo(tStartCenter, opts.height - opts.area[2]);\r\n            context.lineTo(tStartCenter, opts.area[0]);\r\n          }\r\n          context.stroke();\r\n        }\r\n        //画Y轴标题\r\n        if (opts.yAxis.showTitle) {\r\n          let titleFontSize = yData.titleFontSize * opts.pix || config.fontSize;\r\n          let title = yData.title;\r\n          context.beginPath();\r\n          context.setFontSize(titleFontSize);\r\n          context.setFillStyle(yData.titleFontColor || opts.fontColor);\r\n          if (yAxisWidth.position == 'left') {\r\n            context.fillText(title, tStartLeft - measureText(title, titleFontSize, context) / 2 + (yData.titleOffsetX || 0), opts.area[0] - (10 - (yData.titleOffsetY || 0)) * opts.pix);\r\n          } else if (yAxisWidth.position == 'right') {\r\n            context.fillText(title, tStartRight - measureText(title, titleFontSize, context) / 2 + (yData.titleOffsetX || 0), opts.area[0] - (10 - (yData.titleOffsetY || 0)) * opts.pix);\r\n          } else if (yAxisWidth.position == 'center') {\r\n            context.fillText(title, tStartCenter - measureText(title, titleFontSize, context) / 2 + (yData.titleOffsetX || 0), opts.area[0] - (10 - (yData.titleOffsetY || 0)) * opts.pix);\r\n          }\r\n          context.closePath();\r\n          context.stroke();\r\n        }\r\n        if (yAxisWidth.position == 'left') {\r\n          tStartLeft -= (yAxisWidth.width + opts.yAxis.padding * opts.pix);\r\n        } else {\r\n          tStartRight += yAxisWidth.width + opts.yAxis.padding * opts.pix;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunction drawLegend(series, opts, config, context, chartData) {\r\n  if (opts.legend.show === false) {\r\n    return;\r\n  }\r\n  let legendData = chartData.legendData;\r\n  let legendList = legendData.points;\r\n  let legendArea = legendData.area;\r\n  let padding = opts.legend.padding * opts.pix;\r\n  let fontSize = opts.legend.fontSize * opts.pix;\r\n  let shapeWidth = 15 * opts.pix;\r\n  let shapeRight = 5 * opts.pix;\r\n  let itemGap = opts.legend.itemGap * opts.pix;\r\n  let lineHeight = Math.max(opts.legend.lineHeight * opts.pix, fontSize);\r\n  //画背景及边框\r\n  context.beginPath();\r\n  context.setLineWidth(opts.legend.borderWidth * opts.pix);\r\n  context.setStrokeStyle(opts.legend.borderColor);\r\n  context.setFillStyle(opts.legend.backgroundColor);\r\n  context.moveTo(legendArea.start.x, legendArea.start.y);\r\n  context.rect(legendArea.start.x, legendArea.start.y, legendArea.width, legendArea.height);\r\n  context.closePath();\r\n  context.fill();\r\n  context.stroke();\r\n  legendList.forEach(function(itemList, listIndex) {\r\n    let width = 0;\r\n    let height = 0;\r\n    width = legendData.widthArr[listIndex];\r\n    height = legendData.heightArr[listIndex];\r\n    let startX = 0;\r\n    let startY = 0;\r\n    if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\r\n      switch (opts.legend.float) {\r\n        case 'left':\r\n          startX = legendArea.start.x + padding;\r\n        break;\r\n        case 'right':\r\n          startX = legendArea.start.x + legendArea.width - width;\r\n        break;\r\n        default:\r\n        startX = legendArea.start.x + (legendArea.width - width) / 2;\r\n      }\r\n      startY = legendArea.start.y + padding + listIndex * lineHeight;\r\n    } else {\r\n      if (listIndex == 0) {\r\n        width = 0;\r\n      } else {\r\n        width = legendData.widthArr[listIndex - 1];\r\n      }\r\n      startX = legendArea.start.x + padding + width;\r\n      startY = legendArea.start.y + padding + (legendArea.height - height) / 2;\r\n    }\r\n    context.setFontSize(config.fontSize);\r\n    for (let i = 0; i < itemList.length; i++) {\r\n      let item = itemList[i];\r\n      item.area = [0, 0, 0, 0];\r\n      item.area[0] = startX;\r\n      item.area[1] = startY;\r\n      item.area[3] = startY + lineHeight;\r\n      context.beginPath();\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.setStrokeStyle(item.show ? item.color : opts.legend.hiddenColor);\r\n      context.setFillStyle(item.show ? item.color : opts.legend.hiddenColor);\r\n      switch (item.legendShape) {\r\n        case 'line':\r\n          context.moveTo(startX, startY + 0.5 * lineHeight - 2 * opts.pix);\r\n          context.fillRect(startX, startY + 0.5 * lineHeight - 2 * opts.pix, 15 * opts.pix, 4 * opts.pix);\r\n          break;\r\n        case 'triangle':\r\n          context.moveTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.lineTo(startX + 2.5 * opts.pix, startY + 0.5 * lineHeight + 5 * opts.pix);\r\n          context.lineTo(startX + 12.5 * opts.pix, startY + 0.5 * lineHeight + 5 * opts.pix);\r\n          context.lineTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          break;\r\n        case 'diamond':\r\n          context.moveTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.lineTo(startX + 2.5 * opts.pix, startY + 0.5 * lineHeight);\r\n          context.lineTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight + 5 * opts.pix);\r\n          context.lineTo(startX + 12.5 * opts.pix, startY + 0.5 * lineHeight);\r\n          context.lineTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          break;\r\n        case 'circle':\r\n          context.moveTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight);\r\n          context.arc(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight, 5 * opts.pix, 0, 2 * Math.PI);\r\n          break;\r\n        case 'rect':\r\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pix, 15 * opts.pix, 10 * opts.pix);\r\n          break;\r\n        case 'square':\r\n          context.moveTo(startX + 5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.fillRect(startX + 5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix, 10 * opts.pix, 10 * opts.pix);\r\n          break;\r\n        case 'none':\r\n          break;\r\n        default:\r\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pix, 15 * opts.pix, 10 * opts.pix);\r\n      }\r\n      context.closePath();\r\n      context.fill();\r\n      context.stroke();\r\n      startX += shapeWidth + shapeRight;\r\n      let fontTrans = 0.5 * lineHeight + 0.5 * fontSize - 2;\r\n      const legendText = item.legendText ? item.legendText : item.name;\r\n      context.beginPath();\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(item.show ? opts.legend.fontColor : opts.legend.hiddenColor);\r\n      context.fillText(legendText, startX, startY + fontTrans);\r\n      context.closePath();\r\n      context.stroke();\r\n      if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\r\n        startX += measureText(legendText, fontSize, context) + itemGap;\r\n        item.area[2] = startX;\r\n      } else {\r\n        item.area[2] = startX + measureText(legendText, fontSize, context) + itemGap;;\r\n        startX -= shapeWidth + shapeRight;\r\n        startY += lineHeight;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawPieDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var pieOption = assign({}, {\r\n    activeOpacity: 0.5,\r\n    activeRadius: 10,\r\n    offsetAngle: 0,\r\n    labelWidth: 15,\r\n    ringWidth: 30,\r\n    customRadius: 0,\r\n    border: false,\r\n    borderWidth: 2,\r\n    borderColor: '#FFFFFF',\r\n    centerColor: '#FFFFFF',\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.type == \"pie\" ? opts.extra.pie : opts.extra.ring);\r\n  var centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  };\r\n  if (config.pieChartLinePadding == 0) {\r\n    config.pieChartLinePadding = pieOption.activeRadius * opts.pix;\r\n  }\r\n\r\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\r\n  radius = radius < 10 ? 10 : radius;\r\n  if (pieOption.customRadius > 0) {\r\n    radius = pieOption.customRadius * opts.pix;\r\n  }\r\n  series = getPieDataPoints(series, radius, process);\r\n  var activeRadius = pieOption.activeRadius * opts.pix;\r\n  pieOption.customColor = fillCustomColor(pieOption.linearType, pieOption.customColor, series, config);\r\n  series = series.map(function(eachSeries) {\r\n    eachSeries._start_ += (pieOption.offsetAngle) * Math.PI / 180;\r\n    return eachSeries;\r\n  });\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    if (opts.tooltip) {\r\n      if (opts.tooltip.index == seriesIndex) {\r\n        context.beginPath();\r\n        context.setFillStyle(hexToRgb(eachSeries.color, pieOption.activeOpacity || 0.5));\r\n        context.moveTo(centerPosition.x, centerPosition.y);\r\n        context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_ + activeRadius, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\r\n        context.closePath();\r\n        context.fill();\r\n      }\r\n    }\r\n    context.beginPath();\r\n    context.setLineWidth(pieOption.borderWidth * opts.pix);\r\n    context.lineJoin = \"round\";\r\n    context.setStrokeStyle(pieOption.borderColor);\r\n    var fillcolor = eachSeries.color;\r\n    if (pieOption.linearType == 'custom') {\r\n      var grd;\r\n      if(context.createCircularGradient){\r\n        grd = context.createCircularGradient(centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }else{\r\n        grd = context.createRadialGradient(centerPosition.x, centerPosition.y, 0,centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }\r\n      grd.addColorStop(0, hexToRgb(pieOption.customColor[eachSeries.linearIndex], 1))\r\n      grd.addColorStop(1, hexToRgb(eachSeries.color, 1))\r\n      fillcolor = grd\r\n    }\r\n    context.setFillStyle(fillcolor);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n    if (pieOption.border == true) {\r\n      context.stroke();\r\n    }\r\n  });\r\n  if (opts.type === 'ring') {\r\n    var innerPieWidth = radius * 0.6;\r\n    if (typeof pieOption.ringWidth === 'number' && pieOption.ringWidth > 0) {\r\n      innerPieWidth = Math.max(0, radius - pieOption.ringWidth * opts.pix);\r\n    }\r\n    context.beginPath();\r\n    context.setFillStyle(pieOption.centerColor);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n  }\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    drawPieText(series, opts, config, context, radius, centerPosition);\r\n  }\r\n  if (process === 1 && opts.type === 'ring') {\r\n    drawRingTitle(opts, config, context, centerPosition);\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawRoseDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var roseOption = assign({}, {\r\n    type: 'area',\r\n    activeOpacity: 0.5,\r\n    activeRadius: 10,\r\n    offsetAngle: 0,\r\n    labelWidth: 15,\r\n    border: false,\r\n    borderWidth: 2,\r\n    borderColor: '#FFFFFF',\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.rose);\r\n  if (config.pieChartLinePadding == 0) {\r\n    config.pieChartLinePadding = roseOption.activeRadius * opts.pix;\r\n  }\r\n  var centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  };\r\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\r\n  radius = radius < 10 ? 10 : radius;\r\n  var minRadius = roseOption.minRadius || radius * 0.5;\r\n  series = getRoseDataPoints(series, roseOption.type, minRadius, radius, process);\r\n  var activeRadius = roseOption.activeRadius * opts.pix;\r\n  roseOption.customColor = fillCustomColor(roseOption.linearType, roseOption.customColor, series, config);\r\n  series = series.map(function(eachSeries) {\r\n    eachSeries._start_ += (roseOption.offsetAngle || 0) * Math.PI / 180;\r\n    return eachSeries;\r\n  });\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    if (opts.tooltip) {\r\n      if (opts.tooltip.index == seriesIndex) {\r\n        context.beginPath();\r\n        context.setFillStyle(hexToRgb(eachSeries.color, roseOption.activeOpacity || 0.5));\r\n        context.moveTo(centerPosition.x, centerPosition.y);\r\n        context.arc(centerPosition.x, centerPosition.y, activeRadius + eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._rose_proportion_ * Math.PI);\r\n        context.closePath();\r\n        context.fill();\r\n      }\r\n    }\r\n    context.beginPath();\r\n    context.setLineWidth(roseOption.borderWidth * opts.pix);\r\n    context.lineJoin = \"round\";\r\n    context.setStrokeStyle(roseOption.borderColor);\r\n    var fillcolor = eachSeries.color;\r\n    if (roseOption.linearType == 'custom') {\r\n      var grd;\r\n      if(context.createCircularGradient){\r\n        grd = context.createCircularGradient(centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }else{\r\n        grd = context.createRadialGradient(centerPosition.x, centerPosition.y, 0,centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }\r\n      grd.addColorStop(0, hexToRgb(roseOption.customColor[eachSeries.linearIndex], 1))\r\n      grd.addColorStop(1, hexToRgb(eachSeries.color, 1))\r\n      fillcolor = grd\r\n    }\r\n    context.setFillStyle(fillcolor);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._rose_proportion_ * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n    if (roseOption.border == true) {\r\n      context.stroke();\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    drawPieText(series, opts, config, context, radius, centerPosition);\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawArcbarDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var arcbarOption = assign({}, {\r\n    startAngle: 0.75,\r\n    endAngle: 0.25,\r\n    type: 'default',\r\n    lineCap: 'round',\r\n    width: 12 ,\r\n    gap: 2 ,\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.arcbar);\r\n  series = getArcbarDataPoints(series, arcbarOption, process);\r\n  var centerPosition;\r\n  if (arcbarOption.centerX || arcbarOption.centerY) {\r\n    centerPosition = {\r\n      x: arcbarOption.centerX ? arcbarOption.centerX : opts.width / 2,\r\n      y: arcbarOption.centerY ? arcbarOption.centerY : opts.height / 2\r\n    };\r\n  } else {\r\n    centerPosition = {\r\n      x: opts.width / 2,\r\n      y: opts.height / 2\r\n    };\r\n  }\r\n  var radius;\r\n  if (arcbarOption.radius) {\r\n    radius = arcbarOption.radius;\r\n  } else {\r\n    radius = Math.min(centerPosition.x, centerPosition.y);\r\n    radius -= 5 * opts.pix;\r\n    radius -= arcbarOption.width / 2;\r\n  }\r\n  radius = radius < 10 ? 10 : radius;\r\n  arcbarOption.customColor = fillCustomColor(arcbarOption.linearType, arcbarOption.customColor, series, config);\r\n  \r\n  for (let i = 0; i < series.length; i++) {\r\n    let eachSeries = series[i];\r\n    //背景颜色\r\n    context.setLineWidth(arcbarOption.width * opts.pix);\r\n    context.setStrokeStyle(arcbarOption.backgroundColor || '#E9E9E9');\r\n    context.setLineCap(arcbarOption.lineCap);\r\n    context.beginPath();\r\n    if (arcbarOption.type == 'default') {\r\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width * opts.pix + arcbarOption.gap * opts.pix) * i, arcbarOption.startAngle * Math.PI, arcbarOption.endAngle * Math.PI, false);\r\n    } else {\r\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width * opts.pix + arcbarOption.gap * opts.pix) * i, 0, 2 * Math.PI, false);\r\n    }\r\n    context.stroke();\r\n    //进度条\r\n    var fillColor = eachSeries.color\r\n    if(arcbarOption.linearType == 'custom'){\r\n      var grd = context.createLinearGradient(centerPosition.x - radius, centerPosition.y, centerPosition.x + radius, centerPosition.y);\r\n      grd.addColorStop(1, hexToRgb(arcbarOption.customColor[eachSeries.linearIndex], 1))\r\n      grd.addColorStop(0, hexToRgb(eachSeries.color, 1))\r\n      fillColor = grd;\r\n    }\r\n    context.setLineWidth(arcbarOption.width * opts.pix);\r\n    context.setStrokeStyle(fillColor);\r\n    context.setLineCap(arcbarOption.lineCap);\r\n    context.beginPath();\r\n    context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width * opts.pix + arcbarOption.gap * opts.pix) * i, arcbarOption.startAngle * Math.PI, eachSeries._proportion_ * Math.PI, false);\r\n    context.stroke();\r\n  }\r\n  drawRingTitle(opts, config, context, centerPosition);\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawGaugeDataPoints(categories, series, opts, config, context) {\r\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\r\n  var gaugeOption = assign({}, {\r\n    type: 'default',\r\n    startAngle: 0.75,\r\n    endAngle: 0.25,\r\n    width: 15,\r\n    labelOffset:13,\r\n    splitLine: {\r\n      fixRadius: 0,\r\n      splitNumber: 10,\r\n      width: 15,\r\n      color: '#FFFFFF',\r\n      childNumber: 5,\r\n      childWidth: 5\r\n    },\r\n    pointer: {\r\n      width: 15,\r\n      color: 'auto'\r\n    }\r\n  }, opts.extra.gauge);\r\n  if (gaugeOption.oldAngle == undefined) {\r\n    gaugeOption.oldAngle = gaugeOption.startAngle;\r\n  }\r\n  if (gaugeOption.oldData == undefined) {\r\n    gaugeOption.oldData = 0;\r\n  }\r\n  categories = getGaugeAxisPoints(categories, gaugeOption.startAngle, gaugeOption.endAngle);\r\n  var centerPosition = {\r\n    x: opts.width / 2,\r\n    y: opts.height / 2\r\n  };\r\n  var radius = Math.min(centerPosition.x, centerPosition.y);\r\n  radius -= 5 * opts.pix;\r\n  radius -= gaugeOption.width / 2;\r\n  radius = radius < 10 ? 10 : radius;\r\n  var innerRadius = radius - gaugeOption.width;\r\n  var totalAngle = 0;\r\n  //判断仪表盘的样式：default百度样式，progress新样式\r\n  if (gaugeOption.type == 'progress') {\r\n    //## 第一步画中心圆形背景和进度条背景\r\n    //中心圆形背景\r\n    var pieRadius = radius - gaugeOption.width * 3;\r\n    context.beginPath();\r\n    let gradient = context.createLinearGradient(centerPosition.x, centerPosition.y - pieRadius, centerPosition.x, centerPosition.y + pieRadius);\r\n    //配置渐变填充（起点：中心点向上减半径；结束点中心点向下加半径）\r\n    gradient.addColorStop('0', hexToRgb(series[0].color, 0.3));\r\n    gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\r\n    context.setFillStyle(gradient);\r\n    context.arc(centerPosition.x, centerPosition.y, pieRadius, 0, 2 * Math.PI, false);\r\n    context.fill();\r\n    //画进度条背景\r\n    context.setLineWidth(gaugeOption.width);\r\n    context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\r\n    context.setLineCap('round');\r\n    context.beginPath();\r\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, gaugeOption.endAngle * Math.PI, false);\r\n    context.stroke();\r\n    //## 第二步画刻度线\r\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n    let splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\r\n    let childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\r\n    let startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\r\n    let endX = -radius - gaugeOption.width - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\r\n    context.save();\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\r\n    let len = gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1;\r\n    let proc = series[0].data * process;\r\n    for (let i = 0; i < len; i++) {\r\n      context.beginPath();\r\n      //刻度线随进度变色\r\n      if (proc > (i / len)) {\r\n        context.setStrokeStyle(hexToRgb(series[0].color, 1));\r\n      } else {\r\n        context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\r\n      }\r\n      context.setLineWidth(3 * opts.pix);\r\n      context.moveTo(startX, 0);\r\n      context.lineTo(endX, 0);\r\n      context.stroke();\r\n      context.rotate(childAngle * Math.PI);\r\n    }\r\n    context.restore();\r\n    //## 第三步画进度条\r\n    series = getGaugeArcbarDataPoints(series, gaugeOption, process);\r\n    context.setLineWidth(gaugeOption.width);\r\n    context.setStrokeStyle(series[0].color);\r\n    context.setLineCap('round');\r\n    context.beginPath();\r\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, series[0]._proportion_ * Math.PI, false);\r\n    context.stroke();\r\n    //## 第四步画指针\r\n    let pointerRadius = radius - gaugeOption.width * 2.5;\r\n    context.save();\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((series[0]._proportion_ - 1) * Math.PI);\r\n    context.beginPath();\r\n    context.setLineWidth(gaugeOption.width / 3);\r\n    let gradient3 = context.createLinearGradient(0, -pointerRadius * 0.6, 0, pointerRadius * 0.6);\r\n    gradient3.addColorStop('0', hexToRgb('#FFFFFF', 0));\r\n    gradient3.addColorStop('0.5', hexToRgb(series[0].color, 1));\r\n    gradient3.addColorStop('1.0', hexToRgb('#FFFFFF', 0));\r\n    context.setStrokeStyle(gradient3);\r\n    context.arc(0, 0, pointerRadius, 0.85 * Math.PI, 1.15 * Math.PI, false);\r\n    context.stroke();\r\n    context.beginPath();\r\n    context.setLineWidth(1);\r\n    context.setStrokeStyle(series[0].color);\r\n    context.setFillStyle(series[0].color);\r\n    context.moveTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\r\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2 - 4, 0);\r\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, 4);\r\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\r\n    context.stroke();\r\n    context.fill();\r\n    context.restore();\r\n    //default百度样式\r\n  } else {\r\n    //画背景\r\n    context.setLineWidth(gaugeOption.width);\r\n    context.setLineCap('butt');\r\n    for (let i = 0; i < categories.length; i++) {\r\n      let eachCategories = categories[i];\r\n      context.beginPath();\r\n      context.setStrokeStyle(eachCategories.color);\r\n      context.arc(centerPosition.x, centerPosition.y, radius, eachCategories._startAngle_ * Math.PI, eachCategories._endAngle_ * Math.PI, false);\r\n      context.stroke();\r\n    }\r\n    context.save();\r\n    //画刻度线\r\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n    let splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\r\n    let childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\r\n    let startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\r\n    let endX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\r\n    let childendX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.childWidth;\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\r\n    for (let i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\r\n      context.beginPath();\r\n      context.setStrokeStyle(gaugeOption.splitLine.color);\r\n      context.setLineWidth(2 * opts.pix);\r\n      context.moveTo(startX, 0);\r\n      context.lineTo(endX, 0);\r\n      context.stroke();\r\n      context.rotate(splitAngle * Math.PI);\r\n    }\r\n    context.restore();\r\n    context.save();\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\r\n    for (let i = 0; i < gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1; i++) {\r\n      context.beginPath();\r\n      context.setStrokeStyle(gaugeOption.splitLine.color);\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.moveTo(startX, 0);\r\n      context.lineTo(childendX, 0);\r\n      context.stroke();\r\n      context.rotate(childAngle * Math.PI);\r\n    }\r\n    context.restore();\r\n    //画指针\r\n    series = getGaugeDataPoints(series, categories, gaugeOption, process);\r\n    for (let i = 0; i < series.length; i++) {\r\n      let eachSeries = series[i];\r\n      context.save();\r\n      context.translate(centerPosition.x, centerPosition.y);\r\n      context.rotate((eachSeries._proportion_ - 1) * Math.PI);\r\n      context.beginPath();\r\n      context.setFillStyle(eachSeries.color);\r\n      context.moveTo(gaugeOption.pointer.width, 0);\r\n      context.lineTo(0, -gaugeOption.pointer.width / 2);\r\n      context.lineTo(-innerRadius, 0);\r\n      context.lineTo(0, gaugeOption.pointer.width / 2);\r\n      context.lineTo(gaugeOption.pointer.width, 0);\r\n      context.closePath();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFillStyle('#FFFFFF');\r\n      context.arc(0, 0, gaugeOption.pointer.width / 6, 0, 2 * Math.PI, false);\r\n      context.fill();\r\n      context.restore();\r\n    }\r\n    if (opts.dataLabel !== false) {\r\n      drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context);\r\n    }\r\n  }\r\n  //画仪表盘标题，副标题\r\n  drawRingTitle(opts, config, context, centerPosition);\r\n  if (process === 1 && opts.type === 'gauge') {\r\n    opts.extra.gauge.oldAngle = series[0]._proportion_;\r\n    opts.extra.gauge.oldData = series[0].data;\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    innerRadius: innerRadius,\r\n    categories: categories,\r\n    totalAngle: totalAngle\r\n  };\r\n}\r\n\r\nfunction drawRadarDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var radarOption = assign({}, {\r\n    gridColor: '#cccccc',\r\n    gridType: 'radar',\r\n    gridEval:1,\r\n    axisLabel:false,\r\n    axisLabelTofix:0,\r\n    labelColor:'#666666',\r\n    labelPointShow:false,\r\n    labelPointRadius:3,\r\n    labelPointColor:'#cccccc',\r\n    opacity: 0.2,\r\n    gridCount: 3,\r\n    border:false,\r\n    borderWidth:2,\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.radar);\r\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\r\n  var centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  };\r\n  var xr = (opts.width - opts.area[1] - opts.area[3]) / 2\r\n  var yr = (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  var radius = Math.min(xr - (getMaxTextListLength(opts.categories, config.fontSize, context) + config.radarLabelTextMargin), yr - config.radarLabelTextMargin);\r\n  radius -= config.radarLabelTextMargin * opts.pix;\r\n  radius = radius < 10 ? 10 : radius;\r\n  // 画分割线\r\n  context.beginPath();\r\n  context.setLineWidth(1 * opts.pix);\r\n  context.setStrokeStyle(radarOption.gridColor);\r\n  coordinateAngle.forEach(function(angle,index) {\r\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    if (index % radarOption.gridEval == 0) {\r\n      context.lineTo(pos.x, pos.y);\r\n    }\r\n  });\r\n  context.stroke();\r\n  context.closePath();\r\n  \r\n  // 画背景网格\r\n  var _loop = function _loop(i) {\r\n    var startPos = {};\r\n    context.beginPath();\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.setStrokeStyle(radarOption.gridColor);\r\n    if (radarOption.gridType == 'radar') {\r\n      coordinateAngle.forEach(function(angle, index) {\r\n        var pos = convertCoordinateOrigin(radius / radarOption.gridCount * i * Math.cos(angle), radius /\r\n          radarOption.gridCount * i * Math.sin(angle), centerPosition);\r\n        if (index === 0) {\r\n          startPos = pos;\r\n          context.moveTo(pos.x, pos.y);\r\n        } else {\r\n          context.lineTo(pos.x, pos.y);\r\n        }\r\n      });\r\n      context.lineTo(startPos.x, startPos.y);\r\n    } else {\r\n      var pos = convertCoordinateOrigin(radius / radarOption.gridCount * i * Math.cos(1.5), radius / radarOption.gridCount * i * Math.sin(1.5), centerPosition);\r\n      context.arc(centerPosition.x, centerPosition.y, centerPosition.y - pos.y, 0, 2 * Math.PI, false);\r\n    }\r\n    context.stroke();\r\n    context.closePath();\r\n  };\r\n  for (var i = 1; i <= radarOption.gridCount; i++) {\r\n    _loop(i);\r\n  }\r\n  radarOption.customColor = fillCustomColor(radarOption.linearType, radarOption.customColor, series, config);\r\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\r\n  radarDataPoints.forEach(function(eachSeries, seriesIndex) {\r\n    // 绘制区域数据\r\n    context.beginPath();\r\n    context.setLineWidth(radarOption.borderWidth * opts.pix);\r\n    context.setStrokeStyle(eachSeries.color);\r\n    \r\n    var fillcolor = hexToRgb(eachSeries.color, radarOption.opacity);\r\n    if (radarOption.linearType == 'custom') {\r\n      var grd;\r\n      if(context.createCircularGradient){\r\n        grd = context.createCircularGradient(centerPosition.x, centerPosition.y, radius)\r\n      }else{\r\n        grd = context.createRadialGradient(centerPosition.x, centerPosition.y, 0,centerPosition.x, centerPosition.y, radius)\r\n      }\r\n      grd.addColorStop(0, hexToRgb(radarOption.customColor[series[seriesIndex].linearIndex], radarOption.opacity))\r\n      grd.addColorStop(1, hexToRgb(eachSeries.color, radarOption.opacity))\r\n      fillcolor = grd\r\n    }\r\n    \r\n    context.setFillStyle(fillcolor);\r\n    eachSeries.data.forEach(function(item, index) {\r\n      if (index === 0) {\r\n        context.moveTo(item.position.x, item.position.y);\r\n      } else {\r\n        context.lineTo(item.position.x, item.position.y);\r\n      }\r\n    });\r\n    context.closePath();\r\n    context.fill();\r\n    if(radarOption.border === true){\r\n      context.stroke();\r\n    }\r\n    context.closePath();\r\n    if (opts.dataPointShape !== false) {\r\n      var points = eachSeries.data.map(function(item) {\r\n        return item.position;\r\n      });\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n  // 画刻度值\r\n  if(radarOption.axisLabel === true){\r\n    const maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\r\n    const stepLength = radius / radarOption.gridCount;\r\n    const fontSize = opts.fontSize * opts.pix;\r\n    context.setFontSize(fontSize);\r\n    context.setFillStyle(opts.fontColor);\r\n    context.setTextAlign('left');\r\n    for (var i = 0; i < radarOption.gridCount + 1; i++) {\r\n      let label = i * maxData / radarOption.gridCount;\r\n      label = label.toFixed(radarOption.axisLabelTofix);\r\n      context.fillText(String(label), centerPosition.x + 3 * opts.pix, centerPosition.y - i * stepLength + fontSize / 2);\r\n    }\r\n  }\r\n  \r\n  // draw label text\r\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\r\n  \r\n  // draw dataLabel\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    radarDataPoints.forEach(function(eachSeries, seriesIndex) {\r\n      context.beginPath();\r\n      var fontSize = eachSeries.textSize * opts.pix || config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(eachSeries.textColor || opts.fontColor);\r\n      eachSeries.data.forEach(function(item, index) {\r\n        //如果是中心点垂直的上下点位\r\n        if(Math.abs(item.position.x - centerPosition.x)<2){\r\n          //如果在上面\r\n          if(item.position.y < centerPosition.y){\r\n            context.setTextAlign('center');\r\n            context.fillText(item.value, item.position.x, item.position.y - 4);\r\n          }else{\r\n            context.setTextAlign('center');\r\n            context.fillText(item.value, item.position.x, item.position.y + fontSize + 2);\r\n          }\r\n        }else{\r\n          //如果在左侧\r\n          if(item.position.x < centerPosition.x){\r\n            context.setTextAlign('right');\r\n            context.fillText(item.value, item.position.x - 4, item.position.y + fontSize / 2 - 2);\r\n          }else{\r\n            context.setTextAlign('left');\r\n            context.fillText(item.value, item.position.x + 4, item.position.y + fontSize / 2 - 2);\r\n          }\r\n        }\r\n      });\r\n      context.closePath();\r\n      context.stroke();\r\n    });\r\n    context.setTextAlign('left');\r\n  }\r\n  \r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    angleList: coordinateAngle\r\n  };\r\n}\r\n\r\n// 经纬度转墨卡托\r\nfunction lonlat2mercator(longitude, latitude) {\r\n  var mercator = Array(2);\r\n  var x = longitude * 20037508.34 / 180;\r\n  var y = Math.log(Math.tan((90 + latitude) * Math.PI / 360)) / (Math.PI / 180);\r\n  y = y * 20037508.34 / 180;\r\n  mercator[0] = x;\r\n  mercator[1] = y;\r\n  return mercator;\r\n}\r\n\r\n// 墨卡托转经纬度\r\nfunction mercator2lonlat(longitude, latitude) {\r\n  var lonlat = Array(2)\r\n  var x = longitude / 20037508.34 * 180;\r\n  var y = latitude / 20037508.34 * 180;\r\n  y = 180 / Math.PI * (2 * Math.atan(Math.exp(y * Math.PI / 180)) - Math.PI / 2);\r\n  lonlat[0] = x;\r\n  lonlat[1] = y;\r\n  return lonlat;\r\n}\r\n\r\nfunction getBoundingBox(data) {\r\n  var bounds = {},coords;\r\n  bounds.xMin = 180;\r\n  bounds.xMax = 0;\r\n  bounds.yMin = 90;\r\n  bounds.yMax = 0\r\n  for (var i = 0; i < data.length; i++) {\r\n    var coorda = data[i].geometry.coordinates\r\n    for (var k = 0; k < coorda.length; k++) {\r\n      coords = coorda[k];\r\n      if (coords.length == 1) {\r\n        coords = coords[0]\r\n      }\r\n      for (var j = 0; j < coords.length; j++) {\r\n        var longitude = coords[j][0];\r\n        var latitude = coords[j][1];\r\n        var point = {\r\n          x: longitude,\r\n          y: latitude\r\n        }\r\n        bounds.xMin = bounds.xMin < point.x ? bounds.xMin : point.x;\r\n        bounds.xMax = bounds.xMax > point.x ? bounds.xMax : point.x;\r\n        bounds.yMin = bounds.yMin < point.y ? bounds.yMin : point.y;\r\n        bounds.yMax = bounds.yMax > point.y ? bounds.yMax : point.y;\r\n      }\r\n    }\r\n  }\r\n  return bounds;\r\n}\r\n\r\nfunction coordinateToPoint(latitude, longitude, bounds, scale, xoffset, yoffset) {\r\n  return {\r\n    x: (longitude - bounds.xMin) * scale + xoffset,\r\n    y: (bounds.yMax - latitude) * scale + yoffset\r\n  };\r\n}\r\n\r\nfunction pointToCoordinate(pointY, pointX, bounds, scale, xoffset, yoffset) {\r\n  return {\r\n    x: (pointX - xoffset) / scale + bounds.xMin,\r\n    y: bounds.yMax - (pointY - yoffset) / scale\r\n  };\r\n}\r\n\r\nfunction isRayIntersectsSegment(poi, s_poi, e_poi) {\r\n  if (s_poi[1] == e_poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[1] > poi[1] && e_poi[1] > poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[1] < poi[1] && e_poi[1] < poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[1] == poi[1] && e_poi[1] > poi[1]) {\r\n    return false;\r\n  }\r\n  if (e_poi[1] == poi[1] && s_poi[1] > poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[0] < poi[0] && e_poi[1] < poi[1]) {\r\n    return false;\r\n  }\r\n  let xseg = e_poi[0] - (e_poi[0] - s_poi[0]) * (e_poi[1] - poi[1]) / (e_poi[1] - s_poi[1]);\r\n  if (xseg < poi[0]) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction isPoiWithinPoly(poi, poly, mercator) {\r\n  let sinsc = 0;\r\n  for (let i = 0; i < poly.length; i++) {\r\n    let epoly = poly[i][0];\r\n    if (poly.length == 1) {\r\n      epoly = poly[i][0]\r\n    }\r\n    for (let j = 0; j < epoly.length - 1; j++) {\r\n      let s_poi = epoly[j];\r\n      let e_poi = epoly[j + 1];\r\n      if (mercator) {\r\n        s_poi = lonlat2mercator(epoly[j][0], epoly[j][1]);\r\n        e_poi = lonlat2mercator(epoly[j + 1][0], epoly[j + 1][1]);\r\n      }\r\n      if (isRayIntersectsSegment(poi, s_poi, e_poi)) {\r\n        sinsc += 1;\r\n      }\r\n    }\r\n  }\r\n  if (sinsc % 2 == 1) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction drawMapDataPoints(series, opts, config, context) {\r\n  var mapOption = assign({}, {\r\n    border: true,\r\n    mercator: false,\r\n    borderWidth: 1,\r\n    borderColor: '#666666',\r\n    fillOpacity: 0.6,\r\n    activeBorderColor: '#f04864',\r\n    activeFillColor: '#facc14',\r\n    activeFillOpacity: 1\r\n  }, opts.extra.map);\r\n  var coords, point;\r\n  var data = series;\r\n  var bounds = getBoundingBox(data);\r\n  if (mapOption.mercator) {\r\n    var max = lonlat2mercator(bounds.xMax, bounds.yMax)\r\n    var min = lonlat2mercator(bounds.xMin, bounds.yMin)\r\n    bounds.xMax = max[0]\r\n    bounds.yMax = max[1]\r\n    bounds.xMin = min[0]\r\n    bounds.yMin = min[1]\r\n  }\r\n  var xScale = opts.width / Math.abs(bounds.xMax - bounds.xMin);\r\n  var yScale = opts.height / Math.abs(bounds.yMax - bounds.yMin);\r\n  var scale = xScale < yScale ? xScale : yScale;\r\n  var xoffset = opts.width / 2 - Math.abs(bounds.xMax - bounds.xMin) / 2 * scale;\r\n  var yoffset = opts.height / 2 - Math.abs(bounds.yMax - bounds.yMin) / 2 * scale;\r\n  for (var i = 0; i < data.length; i++) {\r\n    context.beginPath();\r\n    context.setLineWidth(mapOption.borderWidth * opts.pix);\r\n    context.setStrokeStyle(mapOption.borderColor);\r\n    context.setFillStyle(hexToRgb(series[i].color, mapOption.fillOpacity));\r\n    if (opts.tooltip) {\r\n      if (opts.tooltip.index == i) {\r\n        context.setStrokeStyle(mapOption.activeBorderColor);\r\n        context.setFillStyle(hexToRgb(mapOption.activeFillColor, mapOption.activeFillOpacity));\r\n      }\r\n    }\r\n    var coorda = data[i].geometry.coordinates\r\n    for (var k = 0; k < coorda.length; k++) {\r\n      coords = coorda[k];\r\n      if (coords.length == 1) {\r\n        coords = coords[0]\r\n      }\r\n      for (var j = 0; j < coords.length; j++) {\r\n        var gaosi = Array(2);\r\n        if (mapOption.mercator) {\r\n          gaosi = lonlat2mercator(coords[j][0], coords[j][1])\r\n        } else {\r\n          gaosi = coords[j]\r\n        }\r\n        point = coordinateToPoint(gaosi[1], gaosi[0], bounds, scale, xoffset, yoffset)\r\n        if (j === 0) {\r\n          context.beginPath();\r\n          context.moveTo(point.x, point.y);\r\n        } else {\r\n          context.lineTo(point.x, point.y);\r\n        }\r\n      }\r\n      context.fill();\r\n      if (mapOption.border == true) {\r\n        context.stroke();\r\n      }\r\n    }\r\n  }\r\n  if (opts.dataLabel == true) {\r\n    for (var i = 0; i < data.length; i++) {\r\n      var centerPoint = data[i].properties.centroid;\r\n      if (centerPoint) {\r\n        if (mapOption.mercator) {\r\n          centerPoint = lonlat2mercator(data[i].properties.centroid[0], data[i].properties.centroid[1])\r\n        }\r\n        point = coordinateToPoint(centerPoint[1], centerPoint[0], bounds, scale, xoffset, yoffset);\r\n        let fontSize = data[i].textSize * opts.pix || config.fontSize;\r\n        let text = data[i].properties.name;\r\n        context.beginPath();\r\n        context.setFontSize(fontSize)\r\n        context.setFillStyle(data[i].textColor || opts.fontColor)\r\n        context.fillText(text, point.x - measureText(text, fontSize, context) / 2, point.y + fontSize / 2);\r\n        context.closePath();\r\n        context.stroke();\r\n      }\r\n    }\r\n  }\r\n  opts.chartData.mapData = {\r\n    bounds: bounds,\r\n    scale: scale,\r\n    xoffset: xoffset,\r\n    yoffset: yoffset,\r\n    mercator: mapOption.mercator\r\n  }\r\n  drawToolTipBridge(opts, config, context, 1);\r\n  context.draw();\r\n}\r\n\r\nfunction normalInt(min, max, iter) {\r\n  iter = iter == 0 ? 1 : iter;\r\n  var arr = [];\r\n  for (var i = 0; i < iter; i++) {\r\n    arr[i] = Math.random();\r\n  };\r\n  return Math.floor(arr.reduce(function(i, j) {\r\n    return i + j\r\n  }) / iter * (max - min)) + min;\r\n};\r\n\r\nfunction collisionNew(area, points, width, height) {\r\n  var isIn = false;\r\n  for (let i = 0; i < points.length; i++) {\r\n    if (points[i].area) {\r\n      if (area[3] < points[i].area[1] || area[0] > points[i].area[2] || area[1] > points[i].area[3] || area[2] < points[i].area[0]) {\r\n        if (area[0] < 0 || area[1] < 0 || area[2] > width || area[3] > height) {\r\n          isIn = true;\r\n          break;\r\n        } else {\r\n          isIn = false;\r\n        }\r\n      } else {\r\n        isIn = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return isIn;\r\n};\r\n\r\nfunction getWordCloudPoint(opts, type, context) {\r\n  let points = opts.series;\r\n  switch (type) {\r\n    case 'normal':\r\n      for (let i = 0; i < points.length; i++) {\r\n        let text = points[i].name;\r\n        let tHeight = points[i].textSize * opts.pix;\r\n        let tWidth = measureText(text, tHeight, context);\r\n        let x, y;\r\n        let area;\r\n        let breaknum = 0;\r\n        while (true) {\r\n          breaknum++;\r\n          x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\r\n          y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\r\n          area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 +\r\n            opts.height / 2\r\n          ];\r\n          let isCollision = collisionNew(area, points, opts.width, opts.height);\r\n          if (!isCollision) break;\r\n          if (breaknum == 1000) {\r\n            area = [-100, -100, -100, -100];\r\n            break;\r\n          }\r\n        };\r\n        points[i].area = area;\r\n      }\r\n      break;\r\n    case 'vertical':\r\n      function Spin() {\r\n        //获取均匀随机值，是否旋转，旋转的概率为（1-0.5）\r\n        if (Math.random() > 0.7) {\r\n          return true;\r\n        } else {\r\n          return false\r\n        };\r\n      };\r\n      for (let i = 0; i < points.length; i++) {\r\n        let text = points[i].name;\r\n        let tHeight = points[i].textSize * opts.pix;\r\n        let tWidth = measureText(text, tHeight, context);\r\n        let isSpin = Spin();\r\n        let x, y, area, areav;\r\n        let breaknum = 0;\r\n        while (true) {\r\n          breaknum++;\r\n          let isCollision;\r\n          if (isSpin) {\r\n            x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\r\n            y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\r\n            area = [y - 5 - tWidth + opts.width / 2, (-x - 5 + opts.height / 2), y + 5 + opts.width / 2, (-x + tHeight + 5 + opts.height / 2)];\r\n            areav = [opts.width - (opts.width / 2 - opts.height / 2) - (-x + tHeight + 5 + opts.height / 2) - 5, (opts.height / 2 - opts.width / 2) + (y - 5 - tWidth + opts.width / 2) - 5, opts.width - (opts.width / 2 - opts.height / 2) - (-x + tHeight + 5 + opts.height / 2) + tHeight, (opts.height / 2 - opts.width / 2) + (y - 5 - tWidth + opts.width / 2) + tWidth + 5];\r\n            isCollision = collisionNew(areav, points, opts.height, opts.width);\r\n          } else {\r\n            x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\r\n            y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\r\n            area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 + opts.height / 2];\r\n            isCollision = collisionNew(area, points, opts.width, opts.height);\r\n          }\r\n          if (!isCollision) break;\r\n          if (breaknum == 1000) {\r\n            area = [-1000, -1000, -1000, -1000];\r\n            break;\r\n          }\r\n        };\r\n        if (isSpin) {\r\n          points[i].area = areav;\r\n          points[i].areav = area;\r\n        } else {\r\n          points[i].area = area;\r\n        }\r\n        points[i].rotate = isSpin;\r\n      };\r\n      break;\r\n  }\r\n  return points;\r\n}\r\n\r\nfunction drawWordCloudDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let wordOption = assign({}, {\r\n    type: 'normal',\r\n    autoColors: true\r\n  }, opts.extra.word);\r\n  if (!opts.chartData.wordCloudData) {\r\n    opts.chartData.wordCloudData = getWordCloudPoint(opts, wordOption.type, context);\r\n  }\r\n  context.beginPath();\r\n  context.setFillStyle(opts.background);\r\n  context.rect(0, 0, opts.width, opts.height);\r\n  context.fill();\r\n  context.save();\r\n  let points = opts.chartData.wordCloudData;\r\n  context.translate(opts.width / 2, opts.height / 2);\r\n  for (let i = 0; i < points.length; i++) {\r\n    context.save();\r\n    if (points[i].rotate) {\r\n      context.rotate(90 * Math.PI / 180);\r\n    }\r\n    let text = points[i].name;\r\n    let tHeight = points[i].textSize * opts.pix;\r\n    let tWidth = measureText(text, tHeight, context);\r\n    context.beginPath();\r\n    context.setStrokeStyle(points[i].color);\r\n    context.setFillStyle(points[i].color);\r\n    context.setFontSize(tHeight);\r\n    if (points[i].rotate) {\r\n      if (points[i].areav[0] > 0) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.strokeText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\r\n          } else {\r\n            context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\r\n          }\r\n        } else {\r\n          context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\r\n        }\r\n      }\r\n    } else {\r\n      if (points[i].area[0] > 0) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.strokeText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\r\n          } else {\r\n            context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\r\n          }\r\n        } else {\r\n          context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\r\n        }\r\n      }\r\n    }\r\n    context.stroke();\r\n    context.restore();\r\n  }\r\n  context.restore();\r\n}\r\n\r\nfunction drawFunnelDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let funnelOption = assign({}, {\r\n    type:'funnel',\r\n    activeWidth: 10,\r\n    activeOpacity: 0.3,\r\n    border: false,\r\n    borderWidth: 2,\r\n    borderColor: '#FFFFFF',\r\n    fillOpacity: 1,\r\n    labelAlign: 'right',\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.funnel);\r\n  let eachSpacing = (opts.height - opts.area[0] - opts.area[2]) / series.length;\r\n  let centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.height - opts.area[2]\r\n  };\r\n  let activeWidth = funnelOption.activeWidth * opts.pix;\r\n  let radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - activeWidth, (opts.height - opts.area[0] - opts.area[2]) / 2 - activeWidth);\r\n  series = getFunnelDataPoints(series, radius, funnelOption.type, eachSpacing, process);\r\n  context.save();\r\n  context.translate(centerPosition.x, centerPosition.y);\r\n  funnelOption.customColor = fillCustomColor(funnelOption.linearType, funnelOption.customColor, series, config);\r\n  if(funnelOption.type == 'pyramid'){\r\n    for (let i = 0; i < series.length; i++) {\r\n      if (i == series.length -1) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(-activeWidth, -eachSpacing);\r\n            context.lineTo(-series[i].radius - activeWidth, 0);\r\n            context.lineTo(series[i].radius + activeWidth, 0);\r\n            context.lineTo(activeWidth, -eachSpacing);\r\n            context.lineTo(-activeWidth, -eachSpacing);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, -eachSpacing);\r\n        context.lineTo(-series[i].radius, 0);\r\n        context.lineTo(series[i].radius, 0);\r\n        context.lineTo(0, -eachSpacing);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      } else {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(0, 0);\r\n            context.lineTo(-series[i].radius - activeWidth, 0);\r\n            context.lineTo(-series[i + 1].radius - activeWidth, -eachSpacing);\r\n            context.lineTo(series[i + 1].radius + activeWidth, -eachSpacing);\r\n            context.lineTo(series[i].radius + activeWidth, 0);\r\n            context.lineTo(0, 0);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, 0);\r\n        context.lineTo(-series[i].radius, 0);\r\n        context.lineTo(-series[i + 1].radius, -eachSpacing);\r\n        context.lineTo(series[i + 1].radius, -eachSpacing);\r\n        context.lineTo(series[i].radius, 0);\r\n        context.lineTo(0, 0);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      }\r\n      context.translate(0, -eachSpacing)\r\n    }\r\n  }else{\r\n    for (let i = 0; i < series.length; i++) {\r\n      if (i == 0) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(-activeWidth, 0);\r\n            context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\r\n            context.lineTo(series[i].radius + activeWidth, -eachSpacing);\r\n            context.lineTo(activeWidth, 0);\r\n            context.lineTo(-activeWidth, 0);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing, centerPosition.x + series[i].radius, centerPosition.y];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, 0);\r\n        context.lineTo(-series[i].radius, -eachSpacing);\r\n        context.lineTo(series[i].radius, -eachSpacing);\r\n        context.lineTo(0, 0);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      } else {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(0, 0);\r\n            context.lineTo(-series[i - 1].radius - activeWidth, 0);\r\n            context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\r\n            context.lineTo(series[i].radius + activeWidth, -eachSpacing);\r\n            context.lineTo(series[i - 1].radius + activeWidth, 0);\r\n            context.lineTo(0, 0);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, 0);\r\n        context.lineTo(-series[i - 1].radius, 0);\r\n        context.lineTo(-series[i].radius, -eachSpacing);\r\n        context.lineTo(series[i].radius, -eachSpacing);\r\n        context.lineTo(series[i - 1].radius, 0);\r\n        context.lineTo(0, 0);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      }\r\n      context.translate(0, -eachSpacing)\r\n    }\r\n  }\r\n  \r\n  context.restore();\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    drawFunnelText(series, opts, context, eachSpacing, funnelOption.labelAlign, activeWidth, centerPosition);\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawFunnelText(series, opts, context, eachSpacing, labelAlign, activeWidth, centerPosition) {\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    if(item.labelShow === false){\r\n      continue;\r\n    }\r\n    let startX, endX, startY, fontSize;\r\n    let text = item.formatter ? item.formatter(item,i,series,opts) : util.toFixed(item._proportion_ * 100) + '%';\r\n    text = item.labelText ? item.labelText : text;\r\n    if (labelAlign == 'right') {\r\n      if(opts.extra.funnel.type === 'pyramid'){\r\n        if (i == series.length -1) {\r\n          startX = (item.funnelArea[2] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[2] + series[i + 1].funnelArea[2]) / 2;\r\n        }\r\n      }else{\r\n        if (i == 0) {\r\n          startX = (item.funnelArea[2] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[2] + series[i - 1].funnelArea[2]) / 2;\r\n        }\r\n      }\r\n      endX = startX + activeWidth * 2;\r\n      startY = item.funnelArea[1] + eachSpacing / 2;\r\n      fontSize = item.textSize * opts.pix || opts.fontSize * opts.pix;\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.setStrokeStyle(item.color);\r\n      context.setFillStyle(item.color);\r\n      context.beginPath();\r\n      context.moveTo(startX, startY);\r\n      context.lineTo(endX, startY);\r\n      context.stroke();\r\n      context.closePath();\r\n      context.beginPath();\r\n      context.moveTo(endX, startY);\r\n      context.arc(endX, startY, 2 * opts.pix, 0, 2 * Math.PI);\r\n      context.closePath();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(item.textColor || opts.fontColor);\r\n      context.fillText(text, endX + 5, startY + fontSize / 2 - 2);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.closePath();\r\n    } else {\r\n      if(opts.extra.funnel.type === 'pyramid'){\r\n        if (i == series.length -1) {\r\n          startX = (item.funnelArea[0] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[0] + series[i + 1].funnelArea[0]) / 2;\r\n        }\r\n      }else{\r\n        if (i == 0) {\r\n          startX = (item.funnelArea[0] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[0] + series[i - 1].funnelArea[0]) / 2;\r\n        }\r\n      }\r\n      endX = startX - activeWidth * 2;\r\n      startY = item.funnelArea[1] + eachSpacing / 2;\r\n      fontSize = item.textSize * opts.pix || opts.fontSize * opts.pix;\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.setStrokeStyle(item.color);\r\n      context.setFillStyle(item.color);\r\n      context.beginPath();\r\n      context.moveTo(startX, startY);\r\n      context.lineTo(endX, startY);\r\n      context.stroke();\r\n      context.closePath();\r\n      context.beginPath();\r\n      context.moveTo(endX, startY);\r\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\r\n      context.closePath();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(item.textColor || opts.fontColor);\r\n      context.fillText(text, endX - 5 - measureText(text, fontSize, context), startY + fontSize / 2 - 2);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.closePath();\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\nfunction drawCanvas(opts, context) {\r\n  context.draw();\r\n}\r\n\r\nvar Timing = {\r\n  easeIn: function easeIn(pos) {\r\n    return Math.pow(pos, 3);\r\n  },\r\n  easeOut: function easeOut(pos) {\r\n    return Math.pow(pos - 1, 3) + 1;\r\n  },\r\n  easeInOut: function easeInOut(pos) {\r\n    if ((pos /= 0.5) < 1) {\r\n      return 0.5 * Math.pow(pos, 3);\r\n    } else {\r\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\r\n    }\r\n  },\r\n  linear: function linear(pos) {\r\n    return pos;\r\n  }\r\n};\r\n\r\nfunction Animation(opts) {\r\n  this.isStop = false;\r\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\r\n  opts.timing = opts.timing || 'easeInOut';\r\n  var delay = 17;\r\n  function createAnimationFrame() {\r\n    if (typeof setTimeout !== 'undefined') {\r\n      return function(step, delay) {\r\n        setTimeout(function() {\r\n          var timeStamp = +new Date();\r\n          step(timeStamp);\r\n        }, delay);\r\n      };\r\n    } else if (typeof requestAnimationFrame !== 'undefined') {\r\n      return requestAnimationFrame;\r\n    } else {\r\n      return function(step) {\r\n        step(null);\r\n      };\r\n    }\r\n  };\r\n  var animationFrame = createAnimationFrame();\r\n  var startTimeStamp = null;\r\n  var _step = function step(timestamp) {\r\n    if (timestamp === null || this.isStop === true) {\r\n      opts.onProcess && opts.onProcess(1);\r\n      opts.onAnimationFinish && opts.onAnimationFinish();\r\n      return;\r\n    }\r\n    if (startTimeStamp === null) {\r\n      startTimeStamp = timestamp;\r\n    }\r\n    if (timestamp - startTimeStamp < opts.duration) {\r\n      var process = (timestamp - startTimeStamp) / opts.duration;\r\n      var timingFunction = Timing[opts.timing];\r\n      process = timingFunction(process);\r\n      opts.onProcess && opts.onProcess(process);\r\n      animationFrame(_step, delay);\r\n    } else {\r\n      opts.onProcess && opts.onProcess(1);\r\n      opts.onAnimationFinish && opts.onAnimationFinish();\r\n    }\r\n  };\r\n  _step = _step.bind(this);\r\n  animationFrame(_step, delay);\r\n}\r\n\r\nAnimation.prototype.stop = function() {\r\n  this.isStop = true;\r\n};\r\n\r\nfunction drawCharts(type, opts, config, context) {\r\n  var _this = this;\r\n  var series = opts.series;\r\n  //兼容ECharts饼图类数据格式\r\n  if (type === 'pie' || type === 'ring' || type === 'mount' || type === 'rose' || type === 'funnel') {\r\n    series = fixPieSeries(series, opts, config);\r\n  }\r\n  var categories = opts.categories;\r\n  if (type === 'mount') {\r\n    categories = [];\r\n    for (let j = 0; j < series.length; j++) {\r\n      if(series[j].show !== false) categories.push(series[j].name)\r\n    }\r\n    opts.categories = categories;\r\n  }\r\n  series = fillSeries(series, opts, config);\r\n  var duration = opts.animation ? opts.duration : 0;\r\n  _this.animationInstance && _this.animationInstance.stop();\r\n  var seriesMA = null;\r\n  if (type == 'candle') {\r\n    let average = assign({}, opts.extra.candle.average);\r\n    if (average.show) {\r\n      seriesMA = calCandleMA(average.day, average.name, average.color, series[0].data);\r\n      seriesMA = fillSeries(seriesMA, opts, config);\r\n      opts.seriesMA = seriesMA;\r\n    } else if (opts.seriesMA) {\r\n      seriesMA = opts.seriesMA = fillSeries(opts.seriesMA, opts, config);\r\n    } else {\r\n      seriesMA = series;\r\n    }\r\n  } else {\r\n    seriesMA = series;\r\n  }\r\n  /* 过滤掉show=false的series */\r\n  opts._series_ = series = filterSeries(series);\r\n  //重新计算图表区域\r\n  opts.area = new Array(4);\r\n  //复位绘图区域\r\n  for (let j = 0; j < 4; j++) {\r\n    opts.area[j] = opts.padding[j] * opts.pix;\r\n  }\r\n  //通过计算三大区域：图例、X轴、Y轴的大小，确定绘图区域\r\n  var _calLegendData = calLegendData(seriesMA, opts, config, opts.chartData, context),\r\n    legendHeight = _calLegendData.area.wholeHeight,\r\n    legendWidth = _calLegendData.area.wholeWidth;\r\n\r\n  switch (opts.legend.position) {\r\n    case 'top':\r\n      opts.area[0] += legendHeight;\r\n      break;\r\n    case 'bottom':\r\n      opts.area[2] += legendHeight;\r\n      break;\r\n    case 'left':\r\n      opts.area[3] += legendWidth;\r\n      break;\r\n    case 'right':\r\n      opts.area[1] += legendWidth;\r\n      break;\r\n  }\r\n\r\n  let _calYAxisData = {},\r\n    yAxisWidth = 0;\r\n  if (opts.type === 'line' || opts.type === 'column'|| opts.type === 'mount' || opts.type === 'area' || opts.type === 'mix' || opts.type === 'candle' || opts.type === 'scatter'  || opts.type === 'bubble' || opts.type === 'bar') {\r\n      _calYAxisData = calYAxisData(series, opts, config, context);\r\n      yAxisWidth = _calYAxisData.yAxisWidth;\r\n    //如果显示Y轴标题\r\n    if (opts.yAxis.showTitle) {\r\n      let maxTitleHeight = 0;\r\n      for (let i = 0; i < opts.yAxis.data.length; i++) {\r\n        maxTitleHeight = Math.max(maxTitleHeight, opts.yAxis.data[i].titleFontSize ? opts.yAxis.data[i].titleFontSize * opts.pix : config.fontSize)\r\n      }\r\n      opts.area[0] += maxTitleHeight;\r\n    }\r\n    let rightIndex = 0,\r\n      leftIndex = 0;\r\n    //计算主绘图区域左右位置\r\n    for (let i = 0; i < yAxisWidth.length; i++) {\r\n      if (yAxisWidth[i].position == 'left') {\r\n        if (leftIndex > 0) {\r\n          opts.area[3] += yAxisWidth[i].width + opts.yAxis.padding * opts.pix;\r\n        } else {\r\n          opts.area[3] += yAxisWidth[i].width;\r\n        }\r\n        leftIndex += 1;\r\n      } else if (yAxisWidth[i].position == 'right') {\r\n        if (rightIndex > 0) {\r\n          opts.area[1] += yAxisWidth[i].width + opts.yAxis.padding * opts.pix;\r\n        } else {\r\n          opts.area[1] += yAxisWidth[i].width;\r\n        }\r\n        rightIndex += 1;\r\n      }\r\n    }\r\n  } else {\r\n    config.yAxisWidth = yAxisWidth;\r\n  }\r\n  opts.chartData.yAxisData = _calYAxisData;\r\n\r\n  if (opts.categories && opts.categories.length && opts.type !== 'radar' && opts.type !== 'gauge' && opts.type !== 'bar') {\r\n    opts.chartData.xAxisData = getXAxisPoints(opts.categories, opts, config);\r\n    let _calCategoriesData = calCategoriesData(opts.categories, opts, config, opts.chartData.xAxisData.eachSpacing, context),\r\n      xAxisHeight = _calCategoriesData.xAxisHeight,\r\n      angle = _calCategoriesData.angle;\r\n    config.xAxisHeight = xAxisHeight;\r\n    config._xAxisTextAngle_ = angle;\r\n    opts.area[2] += xAxisHeight;\r\n    opts.chartData.categoriesData = _calCategoriesData;\r\n  } else {\r\n    if (opts.type === 'line' || opts.type === 'area' || opts.type === 'scatter' || opts.type === 'bubble' || opts.type === 'bar') {\r\n      opts.chartData.xAxisData = calXAxisData(series, opts, config, context);\r\n      categories = opts.chartData.xAxisData.rangesFormat;\r\n      let _calCategoriesData = calCategoriesData(categories, opts, config, opts.chartData.xAxisData.eachSpacing, context),\r\n        xAxisHeight = _calCategoriesData.xAxisHeight,\r\n        angle = _calCategoriesData.angle;\r\n      config.xAxisHeight = xAxisHeight;\r\n      config._xAxisTextAngle_ = angle;\r\n      opts.area[2] += xAxisHeight;\r\n      opts.chartData.categoriesData = _calCategoriesData;\r\n    } else {\r\n      opts.chartData.xAxisData = {\r\n        xAxisPoints: []\r\n      };\r\n    }\r\n  }\r\n\r\n  //计算右对齐偏移距离\r\n  if (opts.enableScroll && opts.xAxis.scrollAlign == 'right' && opts._scrollDistance_ === undefined) {\r\n    let offsetLeft = 0,\r\n      xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\r\n      startX = opts.chartData.xAxisData.startX,\r\n      endX = opts.chartData.xAxisData.endX,\r\n      eachSpacing = opts.chartData.xAxisData.eachSpacing;\r\n    let totalWidth = eachSpacing * (xAxisPoints.length - 1);\r\n    let screenWidth = endX - startX;\r\n    offsetLeft = screenWidth - totalWidth;\r\n    _this.scrollOption.currentOffset = offsetLeft;\r\n    _this.scrollOption.startTouchX = offsetLeft;\r\n    _this.scrollOption.distance = 0;\r\n    _this.scrollOption.lastMoveTime = 0;\r\n    opts._scrollDistance_ = offsetLeft;\r\n  }\r\n\r\n  if (type === 'pie' || type === 'ring' || type === 'rose') {\r\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(seriesMA, config, context, opts);\r\n  }\r\n  \r\n  switch (type) {\r\n    case 'word':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawWordCloudDataPoints(series, opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'map':\r\n      context.clearRect(0, 0, opts.width, opts.height);\r\n      drawMapDataPoints(series, opts, config, context);\r\n      break;\r\n    case 'funnel':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.funnelData = drawFunnelDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'line':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawLineDataPoints.xAxisPoints,\r\n            calPoints = _drawLineDataPoints.calPoints,\r\n            eachSpacing = _drawLineDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'scatter':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawScatterDataPoints = drawScatterDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawScatterDataPoints.xAxisPoints,\r\n            calPoints = _drawScatterDataPoints.calPoints,\r\n            eachSpacing = _drawScatterDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'bubble':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawBubbleDataPoints = drawBubbleDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawBubbleDataPoints.xAxisPoints,\r\n            calPoints = _drawBubbleDataPoints.calPoints,\r\n            eachSpacing = _drawBubbleDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'mix':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawMixDataPoints = drawMixDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawMixDataPoints.xAxisPoints,\r\n            calPoints = _drawMixDataPoints.calPoints,\r\n            eachSpacing = _drawMixDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'column':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawColumnDataPoints.xAxisPoints,\r\n            calPoints = _drawColumnDataPoints.calPoints,\r\n            eachSpacing = _drawColumnDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'mount':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawMountDataPoints = drawMountDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawMountDataPoints.xAxisPoints,\r\n            calPoints = _drawMountDataPoints.calPoints,\r\n            eachSpacing = _drawMountDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'bar':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawBarDataPoints = drawBarDataPoints(series, opts, config, context, process),\r\n            yAxisPoints = _drawBarDataPoints.yAxisPoints,\r\n            calPoints = _drawBarDataPoints.calPoints,\r\n            eachSpacing = _drawBarDataPoints.eachSpacing;\r\n          opts.chartData.yAxisPoints = yAxisPoints;\r\n          opts.chartData.xAxisPoints = opts.chartData.xAxisData.xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, yAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'area':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawAreaDataPoints.xAxisPoints,\r\n            calPoints = _drawAreaDataPoints.calPoints,\r\n            eachSpacing = _drawAreaDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'ring':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'pie':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'rose':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.pieData = drawRoseDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'radar':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'arcbar':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.arcbarData = drawArcbarDataPoints(series, opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'gauge':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.gaugeData = drawGaugeDataPoints(categories, series, opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'candle':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawCandleDataPoints = drawCandleDataPoints(series, seriesMA, opts, config, context, process),\r\n            xAxisPoints = _drawCandleDataPoints.xAxisPoints,\r\n            calPoints = _drawCandleDataPoints.calPoints,\r\n            eachSpacing = _drawCandleDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          if (seriesMA) {\r\n            drawLegend(seriesMA, opts, config, context, opts.chartData);\r\n          } else {\r\n            drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          }\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n  }\r\n}\r\n\r\nfunction uChartsEvent() {\r\n  this.events = {};\r\n}\r\n\r\nuChartsEvent.prototype.addEventListener = function(type, listener) {\r\n  this.events[type] = this.events[type] || [];\r\n  this.events[type].push(listener);\r\n};\r\n\r\nuChartsEvent.prototype.delEventListener = function(type) {\r\n  this.events[type] = [];\r\n};\r\n\r\nuChartsEvent.prototype.trigger = function() {\r\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n    args[_key] = arguments[_key];\r\n  }\r\n  var type = args[0];\r\n  var params = args.slice(1);\r\n  if (!!this.events[type]) {\r\n    this.events[type].forEach(function(listener) {\r\n      try {\r\n        listener.apply(null, params);\r\n      } catch (e) {\r\n          //console.log('[uCharts] '+e);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nvar uCharts = function uCharts(opts) {\r\n  opts.pix = opts.pixelRatio ? opts.pixelRatio : 1;\r\n  opts.fontSize = opts.fontSize ? opts.fontSize : 13;\r\n  opts.fontColor = opts.fontColor ? opts.fontColor : config.fontColor;\r\n  if (opts.background == \"\" || opts.background == \"none\") {\r\n    opts.background = \"#FFFFFF\"\r\n  }\r\n  opts.title = assign({}, opts.title);\r\n  opts.subtitle = assign({}, opts.subtitle);\r\n  opts.duration = opts.duration ? opts.duration : 1000;\r\n  opts.yAxis = assign({}, {\r\n    data: [],\r\n    showTitle: false,\r\n    disabled: false,\r\n    disableGrid: false,\r\n    splitNumber: 5,\r\n    gridType: 'solid',\r\n    dashLength: 4 * opts.pix,\r\n    gridColor: '#cccccc',\r\n    padding: 10,\r\n    fontColor: '#666666'\r\n  }, opts.yAxis);\r\n  opts.xAxis = assign({}, {\r\n    rotateLabel: false,\r\n    rotateAngle:45,\r\n    disabled: false,\r\n    disableGrid: false,\r\n    splitNumber: 5,\r\n    calibration:false,\r\n    gridType: 'solid',\r\n    dashLength: 4,\r\n    scrollAlign: 'left',\r\n    boundaryGap: 'center',\r\n    axisLine: true,\r\n    axisLineColor: '#cccccc'\r\n  }, opts.xAxis);\r\n  opts.xAxis.scrollPosition = opts.xAxis.scrollAlign;\r\n  opts.legend = assign({}, {\r\n    show: true,\r\n    position: 'bottom',\r\n    float: 'center',\r\n    backgroundColor: 'rgba(0,0,0,0)',\r\n    borderColor: 'rgba(0,0,0,0)',\r\n    borderWidth: 0,\r\n    padding: 5,\r\n    margin: 5,\r\n    itemGap: 10,\r\n    fontSize: opts.fontSize,\r\n    lineHeight: opts.fontSize,\r\n    fontColor: opts.fontColor,\r\n    formatter: {},\r\n    hiddenColor: '#CECECE'\r\n  }, opts.legend);\r\n  opts.extra = assign({}, opts.extra);\r\n  opts.rotate = opts.rotate ? true : false;\r\n  opts.animation = opts.animation ? true : false;\r\n  opts.rotate = opts.rotate ? true : false;\r\n  opts.canvas2d = opts.canvas2d ? true : false;\r\n  \r\n  let config$$1 = assign({}, config);\r\n  config$$1.color = opts.color ? opts.color : config$$1.color;\r\n  if (opts.type == 'pie') {\r\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.pie.labelWidth * opts.pix || config$$1.pieChartLinePadding * opts.pix;\r\n  }\r\n  if (opts.type == 'ring') {\r\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.ring.labelWidth * opts.pix || config$$1.pieChartLinePadding * opts.pix;\r\n  }\r\n  if (opts.type == 'rose') {\r\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.rose.labelWidth * opts.pix || config$$1.pieChartLinePadding * opts.pix;\r\n  }\r\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pix;\r\n\r\n  //屏幕旋转\r\n  config$$1.rotate = opts.rotate;\r\n  if (opts.rotate) {\r\n    let tempWidth = opts.width;\r\n    let tempHeight = opts.height;\r\n    opts.width = tempHeight;\r\n    opts.height = tempWidth;\r\n  }\r\n\r\n  //适配高分屏\r\n  opts.padding = opts.padding ? opts.padding : config$$1.padding;\r\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pix;\r\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pix;\r\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\r\n    config$$1.xAxisHeight += 6 * opts.pix;\r\n  }\r\n  config$$1.fontSize = opts.fontSize * opts.pix;\r\n  config$$1.titleFontSize = config.titleFontSize * opts.pix;\r\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pix;\r\n  config$$1.toolTipPadding = config.toolTipPadding * opts.pix;\r\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pix;\r\n  if(!opts.context){\r\n    throw new Error('[uCharts] 未获取到context！注意：v2.0版本后，需要自行获取canvas的绘图上下文并传入opts.context！');\r\n  }\r\n  this.context = opts.context;\r\n  if (!this.context.setTextAlign) {\r\n    this.context.setStrokeStyle = function(e) {\r\n      return this.strokeStyle = e;\r\n    }\r\n    this.context.setLineWidth = function(e) {\r\n      return this.lineWidth = e;\r\n    }\r\n    this.context.setLineCap = function(e) {\r\n      return this.lineCap = e;\r\n    }\r\n    this.context.setFontSize = function(e) {\r\n      return this.font = e + \"px sans-serif\";\r\n    }\r\n    this.context.setFillStyle = function(e) {\r\n      return this.fillStyle = e;\r\n    }\r\n    this.context.setTextAlign = function(e) {\r\n      return this.textAlign = e;\r\n    }\r\n    this.context.draw = function() {}\r\n  }\r\n  //兼容NVUEsetLineDash\r\n  if(!this.context.setLineDash){\r\n    this.context.setLineDash = function(e) {}\r\n  }\r\n  opts.chartData = {};\r\n  this.uevent = new uChartsEvent();\r\n  this.scrollOption = {\r\n    currentOffset: 0,\r\n    startTouchX: 0,\r\n    distance: 0,\r\n    lastMoveTime: 0\r\n  };\r\n  this.opts = opts;\r\n  this.config = config$$1;\r\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\r\n};\r\n\r\nuCharts.prototype.updateData = function() {\r\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n  this.opts = assign({}, this.opts, data);\r\n  this.opts.updateData = true;\r\n  let scrollPosition = data.scrollPosition || 'current';\r\n  switch (scrollPosition) {\r\n    case 'current':\r\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\r\n      break;\r\n    case 'left':\r\n      this.opts._scrollDistance_ = 0;\r\n      this.scrollOption = {\r\n        currentOffset: 0,\r\n        startTouchX: 0,\r\n        distance: 0,\r\n        lastMoveTime: 0\r\n      };\r\n      break;\r\n    case 'right':\r\n      let _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config, this.context), yAxisWidth = _calYAxisData.yAxisWidth;\r\n      this.config.yAxisWidth = yAxisWidth;\r\n      let offsetLeft = 0;\r\n      let _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config), xAxisPoints = _getXAxisPoints0.xAxisPoints,\r\n        startX = _getXAxisPoints0.startX,\r\n        endX = _getXAxisPoints0.endX,\r\n        eachSpacing = _getXAxisPoints0.eachSpacing;\r\n      let totalWidth = eachSpacing * (xAxisPoints.length - 1);\r\n      let screenWidth = endX - startX;\r\n      offsetLeft = screenWidth - totalWidth;\r\n      this.scrollOption = {\r\n        currentOffset: offsetLeft,\r\n        startTouchX: offsetLeft,\r\n        distance: 0,\r\n        lastMoveTime: 0\r\n      };\r\n      this.opts._scrollDistance_ = offsetLeft;\r\n      break;\r\n  }\r\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\r\n};\r\n\r\nuCharts.prototype.zoom = function() {\r\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.opts.xAxis.itemCount;\r\n  if (this.opts.enableScroll !== true) {\r\n    console.log('[uCharts] 请启用滚动条后使用')\r\n    return;\r\n  }\r\n  //当前屏幕中间点\r\n  let centerPoint = Math.round(Math.abs(this.scrollOption.currentOffset) / this.opts.chartData.eachSpacing) + Math.round(this.opts.xAxis.itemCount / 2);\r\n  this.opts.animation = false;\r\n  this.opts.xAxis.itemCount = val.itemCount;\r\n  //重新计算x轴偏移距离\r\n  let _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config, this.context),\r\n    yAxisWidth = _calYAxisData.yAxisWidth;\r\n  this.config.yAxisWidth = yAxisWidth;\r\n  let offsetLeft = 0;\r\n  let _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\r\n    xAxisPoints = _getXAxisPoints0.xAxisPoints,\r\n    startX = _getXAxisPoints0.startX,\r\n    endX = _getXAxisPoints0.endX,\r\n    eachSpacing = _getXAxisPoints0.eachSpacing;\r\n  let centerLeft = eachSpacing * centerPoint;\r\n  let screenWidth = endX - startX;\r\n  let MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\r\n  offsetLeft = screenWidth / 2 - centerLeft;\r\n  if (offsetLeft > 0) {\r\n    offsetLeft = 0;\r\n  }\r\n  if (offsetLeft < MaxLeft) {\r\n    offsetLeft = MaxLeft;\r\n  }\r\n  this.scrollOption = {\r\n    currentOffset: offsetLeft,\r\n    startTouchX: 0,\r\n    distance: 0,\r\n    lastMoveTime: 0\r\n  };\r\n  calValidDistance(this, offsetLeft, this.opts.chartData, this.config, this.opts);\r\n  this.opts._scrollDistance_ = offsetLeft;\r\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\r\n};\r\n\r\nuCharts.prototype.dobuleZoom = function(e) {\n  if (this.opts.enableScroll !== true) {\n    console.log('[uCharts] 请启用滚动条后使用')\n    return;\n  }\r\n  const tcs = e.changedTouches;\n  if (tcs.length < 2) {\n    return;\n  }\n  for (var i = 0; i < tcs.length; i++) {\n    tcs[i].x = tcs[i].x ? tcs[i].x : tcs[i].clientX;\n    tcs[i].y = tcs[i].y ? tcs[i].y : tcs[i].clientY;\n  }\r\n  const ntcs = [getTouches(tcs[0], this.opts, e),getTouches(tcs[1], this.opts, e)]; \r\n  const xlength = Math.abs(ntcs[0].x - ntcs[1].x);\r\n  // 记录初始的两指之间的数据\r\n  if(!this.scrollOption.moveCount){\r\n    let cts0 = {changedTouches:[{x:tcs[0].x,y:this.opts.area[0] / this.opts.pix + 2}]};\r\n    let cts1 = {changedTouches:[{x:tcs[1].x,y:this.opts.area[0] / this.opts.pix + 2}]};\r\n    if(this.opts.rotate){\r\n      cts0 = {changedTouches:[{x:this.opts.height / this.opts.pix - this.opts.area[0] / this.opts.pix - 2,y:tcs[0].y}]};\r\n      cts1 = {changedTouches:[{x:this.opts.height / this.opts.pix - this.opts.area[0] / this.opts.pix - 2,y:tcs[1].y}]};\r\n    }\r\n    const moveCurrent1 = this.getCurrentDataIndex(cts0).index;\r\n    const moveCurrent2 = this.getCurrentDataIndex(cts1).index;\r\n    const moveCount = Math.abs(moveCurrent1 - moveCurrent2);\r\n    this.scrollOption.moveCount = moveCount;\r\n    this.scrollOption.moveCurrent1 = Math.min(moveCurrent1, moveCurrent2);\r\n    this.scrollOption.moveCurrent2 = Math.max(moveCurrent1, moveCurrent2);\r\n    return;\r\n  }\r\n  \r\n  let currentEachSpacing = xlength / this.scrollOption.moveCount;\r\n  let itemCount = (this.opts.width - this.opts.area[1] - this.opts.area[3]) / currentEachSpacing;\r\n  itemCount = itemCount <= 2 ? 2 : itemCount;\r\n  itemCount = itemCount >= this.opts.categories.length ? this.opts.categories.length : itemCount;\n  this.opts.animation = false;\n  this.opts.xAxis.itemCount = itemCount;\n  // 重新计算滚动条偏移距离\n  let offsetLeft = 0;\r\n  let _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\r\n    xAxisPoints = _getXAxisPoints0.xAxisPoints,\r\n    startX = _getXAxisPoints0.startX,\r\n    endX = _getXAxisPoints0.endX,\r\n    eachSpacing = _getXAxisPoints0.eachSpacing;\r\n  let currentLeft = eachSpacing * this.scrollOption.moveCurrent1;\r\n  let screenWidth = endX - startX;\r\n  let MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\r\n  offsetLeft = -currentLeft+Math.min(ntcs[0].x,ntcs[1].x)-this.opts.area[3]-eachSpacing;\n  if (offsetLeft > 0) {\n    offsetLeft = 0;\n  }\n  if (offsetLeft < MaxLeft) {\n    offsetLeft = MaxLeft;\n  }\n  this.scrollOption.currentOffset= offsetLeft;\n  this.scrollOption.startTouchX= 0;\n  this.scrollOption.distance=0;\n  calValidDistance(this, offsetLeft, this.opts.chartData, this.config, this.opts);\n  this.opts._scrollDistance_ = offsetLeft;\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n}\r\n\r\nuCharts.prototype.stopAnimation = function() {\r\n  this.animationInstance && this.animationInstance.stop();\r\n};\r\n\r\nuCharts.prototype.addEventListener = function(type, listener) {\r\n  this.uevent.addEventListener(type, listener);\r\n};\r\n\r\nuCharts.prototype.delEventListener = function(type) {\r\n  this.uevent.delEventListener(type);\r\n};\r\n\r\nuCharts.prototype.getCurrentDataIndex = function(e) {\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches) {\r\n    let _touches$ = getTouches(touches, this.opts, e);\r\n    if (this.opts.type === 'pie' || this.opts.type === 'ring') {\r\n      return findPieChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.pieData, this.opts);\r\n    } else if (this.opts.type === 'rose') {\r\n      return findRoseChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.pieData, this.opts);\r\n    } else if (this.opts.type === 'radar') {\r\n      return findRadarChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.radarData, this.opts.categories.length);\r\n    } else if (this.opts.type === 'funnel') {\r\n      return findFunnelChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.funnelData);\r\n    } else if (this.opts.type === 'map') {\r\n      return findMapChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts);\r\n    } else if (this.opts.type === 'word') {\r\n      return findWordChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.wordCloudData);\r\n    } else if (this.opts.type === 'bar') {\r\n      return findBarChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.calPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\r\n    } else {\r\n      return findCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.calPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nuCharts.prototype.getLegendDataIndex = function(e) {\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches) {\r\n    let _touches$ = getTouches(touches, this.opts, e);\r\n    return findLegendIndex({\r\n      x: _touches$.x,\r\n      y: _touches$.y\r\n    }, this.opts.chartData.legendData);\r\n  }\r\n  return -1;\r\n};\r\n\r\nuCharts.prototype.touchLegend = function(e) {\r\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches) {\r\n    var _touches$ = getTouches(touches, this.opts, e);\r\n    var index = this.getLegendDataIndex(e);\r\n    if (index >= 0) {\r\n      if (this.opts.type == 'candle') {\r\n        this.opts.seriesMA[index].show = !this.opts.seriesMA[index].show;\r\n      } else {\r\n        this.opts.series[index].show = !this.opts.series[index].show;\r\n      }\r\n      this.opts.animation = option.animation ? true : false;\r\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\r\n      drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nuCharts.prototype.showToolTip = function(e) {\r\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (!touches) {\r\n    console.log(\"[uCharts] 未获取到event坐标信息\");\r\n  }\r\n  var _touches$ = getTouches(touches, this.opts, e);\r\n  var currentOffset = this.scrollOption.currentOffset;\r\n  var opts = assign({}, this.opts, {\r\n    _scrollDistance_: currentOffset,\r\n    animation: false\r\n  });\r\n  if (this.opts.type === 'line' || this.opts.type === 'area' || this.opts.type === 'column' || this.opts.type === 'scatter' || this.opts.type === 'bubble') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1 || index.length>0) {\r\n      var seriesData = getSeriesDataItem(this.opts.series, index, current.group);\r\n      if (seriesData.length !== 0) {\r\n        var _getToolTipData = getToolTipData(seriesData, this.opts, index, current.group, this.opts.categories, option),\r\n          textList = _getToolTipData.textList,\r\n          offset = _getToolTipData.offset;\r\n        offset.y = _touches$.y;\r\n        opts.tooltip = {\r\n          textList: option.textList !== undefined ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'mount') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e).index : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, opts._series_[index]);\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, opts) : seriesData.name + ': ' + seriesData.data,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: opts.chartData.calPoints[index].x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    \r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'bar') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1 || index.length>0) {\r\n      var seriesData = getSeriesDataItem(this.opts.series, index, current.group);\r\n      if (seriesData.length !== 0) {\r\n        var _getToolTipData = getToolTipData(seriesData, this.opts, index, current.group, this.opts.categories, option),\r\n          textList = _getToolTipData.textList,\r\n          offset = _getToolTipData.offset;\r\n        offset.x = _touches$.x;\r\n        opts.tooltip = {\r\n          textList: option.textList !== undefined ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'mix') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1) {\r\n      var currentOffset = this.scrollOption.currentOffset;\r\n      var opts = assign({}, this.opts, {\r\n        _scrollDistance_: currentOffset,\r\n        animation: false\r\n      });\r\n      var seriesData = getSeriesDataItem(this.opts.series, index);\r\n      if (seriesData.length !== 0) {\r\n        var _getMixToolTipData = getMixToolTipData(seriesData, this.opts, index, this.opts.categories, option),\r\n          textList = _getMixToolTipData.textList,\r\n          offset = _getMixToolTipData.offset;\r\n        offset.y = _touches$.y;\r\n        opts.tooltip = {\r\n          textList: option.textList ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'candle') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1) {\r\n      var currentOffset = this.scrollOption.currentOffset;\r\n      var opts = assign({}, this.opts, {\r\n        _scrollDistance_: currentOffset,\r\n        animation: false\r\n      });\r\n      var seriesData = getSeriesDataItem(this.opts.series, index);\r\n      if (seriesData.length !== 0) {\r\n        var _getToolTipData = getCandleToolTipData(this.opts.series[0].data, seriesData, this.opts, index, this.opts.categories, this.opts.extra.candle, option),\r\n          textList = _getToolTipData.textList,\r\n          offset = _getToolTipData.offset;\r\n        offset.y = _touches$.y;\r\n        opts.tooltip = {\r\n          textList: option.textList ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose' || this.opts.type === 'funnel') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, opts._series_[index]);\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, opts) : seriesData.name + ': ' + seriesData.data,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'map') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, this.opts.series[index]);\r\n      seriesData.name = seriesData.properties.name\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, this.opts) : seriesData.name,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    opts.updateData = false;\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'word') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, this.opts.series[index]);\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, this.opts) : seriesData.name,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    opts.updateData = false;\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'radar') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = getSeriesDataItem(this.opts.series, index);\r\n      if (seriesData.length !== 0) {\r\n        var textList = seriesData.map((item) => {\r\n          return {\r\n            text: option.formatter ? option.formatter(item, this.opts.categories[index], index, this.opts) : item.name + ': ' + item.data,\r\n            color: item.color\r\n          };\r\n        });\r\n        var offset = {\r\n          x: _touches$.x,\r\n          y: _touches$.y\r\n        };\r\n        opts.tooltip = {\r\n          textList: option.textList ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n};\r\n\r\nuCharts.prototype.translate = function(distance) {\r\n  this.scrollOption = {\r\n    currentOffset: distance,\r\n    startTouchX: distance,\r\n    distance: 0,\r\n    lastMoveTime: 0\r\n  };\r\n  let opts = assign({}, this.opts, {\r\n    _scrollDistance_: distance,\r\n    animation: false\r\n  });\r\n  drawCharts.call(this, this.opts.type, opts, this.config, this.context);\r\n};\r\n\r\nuCharts.prototype.scrollStart = function(e) {\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  var _touches$ = getTouches(touches, this.opts, e);\r\n  if (touches && this.opts.enableScroll === true) {\r\n    this.scrollOption.startTouchX = _touches$.x;\r\n  }\r\n};\r\n\r\nuCharts.prototype.scroll = function(e) {\r\n  if (this.scrollOption.lastMoveTime === 0) {\r\n    this.scrollOption.lastMoveTime = Date.now();\r\n  }\r\n  let Limit = this.opts.touchMoveLimit || 60;\r\n  let currMoveTime = Date.now();\r\n  let duration = currMoveTime - this.scrollOption.lastMoveTime;\r\n  if (duration < Math.floor(1000 / Limit)) return;\r\n  if (this.scrollOption.startTouchX == 0) return;\r\n  this.scrollOption.lastMoveTime = currMoveTime;\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches && this.opts.enableScroll === true) {\r\n    var _touches$ = getTouches(touches, this.opts, e);\r\n    var _distance;\r\n    _distance = _touches$.x - this.scrollOption.startTouchX;\r\n    var currentOffset = this.scrollOption.currentOffset;\r\n    var validDistance = calValidDistance(this, currentOffset + _distance, this.opts.chartData, this.config, this.opts);\r\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\r\n    var opts = assign({}, this.opts, {\r\n      _scrollDistance_: currentOffset + _distance,\r\n      animation: false\r\n    });\r\n\t\tthis.opts = opts;\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n    return currentOffset + _distance;\r\n  }\r\n};\r\n\r\nuCharts.prototype.scrollEnd = function(e) {\r\n  if (this.opts.enableScroll === true) {\r\n    var _scrollOption = this.scrollOption,\r\n      currentOffset = _scrollOption.currentOffset,\r\n      distance = _scrollOption.distance;\r\n    this.scrollOption.currentOffset = currentOffset + distance;\r\n    this.scrollOption.distance = 0;\r\n    this.scrollOption.moveCount = 0;\r\n  }\r\n};\r\n\r\nexport default uCharts;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@qiun/ucharts/u-charts.js\n// module id = null\n// module chunks = ","<template>\n  <div class=\"page\">\n    <keep-alive>\n      <router-view></router-view>\n    </keep-alive>\n    <ctest :tittle=\"tittle\"></ctest>\n    \n    <div class=\"ddd\" :style=\"{'width': chartsWidth+'px','height':chartsHeight+'px'}\">\n        <canvas id=\"aaa\" class=\"charts\" />\n    </div>\n\n    \n    <!-- <el-button class=\"el-btn\" :style=\"{'left': elBtnLeft+'px'}\" type=\"primary\" plain>太阳系</el-button> -->\n    <solar :solarWidth=\"solarWidth\" :solarHeight=\"solarHeight\"></solar>\n    <div class=\"nav-footer\" v-if='isPc'></div>\n    \n  </div>\n</template>\n\n<script>\nimport ctest from 'common/c-test'\nimport solar from 'common/solar-system'\n//import uCharts from 'common/u-charts'\n// import uCharts from '../utils/u-charts';\nimport uCharts from '@qiun/ucharts'\n//Vue.use(uCharts);\nvar uChartsInstance = {};\n\nexport default {\n  data () {\n    return {\n      isPc:true,\n      tittle:'太阳系',\n      solarWidth:100,\n      solarHeight:80,\n      elBtnLeft:100,\n      cWidth: 300,\n      cHeight: 500,\n      chartsWidth:750,\n      chartsHeight:500,\n    }\n  },\n  created(){\n    this.solarWidth = this.pubMethods.getScreenWidth()\n    this.chartsWidth = this.pubMethods.getScreenWidth()\n    //this.cWidth = this.pubMethods.getScreenWidth()\n    this.solarHeight = this.pubMethods.getScreenHeight()\n    this.elBtnLeft = this.pubMethods.getScreenWidth()/2 - 40\n     \n  },\n  components:{\n    ctest,\n    solar\n  },\n  computed: {\n    \n  },\n  mounted(){\n    this.getServerData()\n  },\n   onReady() {\n           console.log('执行了吗')\n\n   \n  },\n  \n  methods: {\n\n    getServerData() {\n      //模拟从服务器获取数据时的延时\n      setTimeout(() => {\n        //模拟服务器返回数据，如果数据格式和标准格式不同，需自行按下面的格式拼接\n        let res = {\n            categories: [\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\"],\n            series: [\n              {\n                name: \"目标值\",\n                data: [35,36,31,33,13,34]\n              },\n              {\n                name: \"完成量\",\n                data: [18,27,21,24,6,28]\n              }\n            ]\n          };\n        this.drawCharts('aaa', res);\n      }, 500);\n    },\n    drawCharts(id,data){\n      const ctx = document.getElementById(id).getContext(\"2d\");\n     //const ctx = this.$refs.aaa.getContext(\"2d\");\n      console.log('-->'+ctx)\n      \n      uChartsInstance[id] = new uCharts({\n        type: \"column\",\n        context: ctx,\n        width: this.cWidth,\n        height: this.cHeight,\n        categories: data.categories,\n        series: data.series,\n        animation: true,\n        background: \"#FFFFFF\",\n        color: [\"#1890FF\",\"#91CB74\",\"#FAC858\",\"#EE6666\",\"#73C0DE\",\"#3CA272\",\"#FC8452\",\"#9A60B4\",\"#ea7ccc\"],\n        padding: [15,15,0,5],\n        legend: {},\n        xAxis: {\n          disableGrid: true\n        },\n        yAxis: {\n          data: [\n            {\n              min: 0\n            }\n          ]\n        },\n        extra: {\n          column: {\n            type: \"group\",\n            width: 30,\n            activeBgColor: \"#000000\",\n            activeBgOpacity: 0.08\n          }\n        }\n      });\n    },\n    tap(e){\n      uChartsInstance[e.target.id].touchLegend(e);\n      uChartsInstance[e.target.id].showToolTip(e);\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n@import \"~styles/index.less\";\n@import \"~styles/variable.less\";\n.nav-footer {\n    position: fixed;\n    left: 0px;\n    bottom: 0px;\n    width: 100%;\n    .h(98);\n    background: @tab-general-bg-color;\n    display: block;\n    footer {\n      font-size: 0;\n      border-top: 1px solid #E7E7E7;\n      border-bottom: 1px solid #F8F8F8;\n      .pt(10);\n      line-height: 1.2;\n      width: 100%;\n      .h(98);\n      display: flex;\n      a {\n        text-decoration: none;\n        color: @base-font-color;\n        -webkit-box-flex: 1;\n        -moz-box-flex: 1;\n        -webkit-flex: 1;\n        -ms-flex: 1;\n        flex: 1;\n        text-align: center;\n        box-sizing: border-box;\n        display: block;\n        .fs(22);\n        .tab-0, .tab-1, .tab-2, .tab-3 {\n          display: inline-block;\n          .h(42);\n          .w(42);\n          background-size: cover;\n        }\n        .tab-0 {\n          background-image: url(\"../assets/imgs/index-noselect.svg\");\n        }\n        .tab-1 {\n          background-image: url(\"../assets/imgs/note-noselect.svg\");\n        }\n        .tab-2 {\n          background-image: url(\"../assets/imgs/print-noselect.svg\");\n        }\n        .tab-3 {\n          background-image: url(\"../assets/imgs/dy-noselect.svg\");\n        }\n        &:hover {\n          text-decoration: none;\n        }\n        &.router-link-active.active {\n          .tab-0 {\n            background-image: url(\"../assets/imgs/index-select.svg\");\n          }\n          .tab-1 {\n            background-image: url(\"../assets/imgs/note-select.svg\");\n          }\n          .tab-2 {\n            background-image: url(\"../assets/imgs/print-select.svg\");\n          }\n          .tab-3 {\n            background-image: url(\"../assets/imgs/dy-select.svg\");\n          }\n        }\n      }\n      p {\n        margin: 0;\n      }\n    }\n  }\n.ddd{\n  overflow-x: scroll;\n}\n.charts{\n    width: 750px;\n    height: 500px;\n    z-index: 999;\n  }\n  .el-btn{\n    position: absolute;\n    top:10px;\n    z-index: 900;\n    color: #E7E7E7;\n    background: linear-gradient(45deg, #0078ee, #FFFFFF,#ff5500,#FFF00D,#FFFFFF);\n\t\tbackground-size: 50px 100px;\n\t\tanimation: dynamicBg 10s ease infinite;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/pages/indexpc.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"page\"},[_c('keep-alive',[_c('router-view')],1),_vm._v(\" \"),_c('ctest',{attrs:{\"tittle\":_vm.tittle}}),_vm._v(\" \"),_c('div',{staticClass:\"ddd\",style:({'width': _vm.chartsWidth+'px','height':_vm.chartsHeight+'px'})},[_c('canvas',{staticClass:\"charts\",attrs:{\"id\":\"aaa\"}})]),_vm._v(\" \"),_c('solar',{attrs:{\"solarWidth\":_vm.solarWidth,\"solarHeight\":_vm.solarHeight}}),_vm._v(\" \"),(_vm.isPc)?_c('div',{staticClass:\"nav-footer\"}):_vm._e()],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-22ac84ba\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/pages/indexpc.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-22ac84ba\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!less-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./indexpc.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./indexpc.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./indexpc.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-22ac84ba\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./indexpc.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-22ac84ba\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/indexpc.vue\n// module id = null\n// module chunks = ","<template>\r\n    <div class=\"container\" :style=\"{'width': solarWidth+'px','height':solarHeight+'px'}\">\r\n        <div class=\"sunny\"></div>\r\n        <div\r\n        v-for=\"(planet, index) in system\"\r\n        :key=\"'system' + index\"\r\n        class=\"fa fa-contain\"\r\n        :style=\"{\r\n            height: `${planet.fa / farule}px`,\r\n            width: `${planet.fa / farule}px`,\r\n            animationDuration: `${planet.speed / speedrule}s`,\r\n        }\"\r\n        >\r\n            <div\r\n                class=\"ch\"\r\n                :style=\"{\r\n                height: `${planet.ch / chrule}px`,\r\n                width: `${planet.ch / chrule}px`,\r\n                top: `-${planet.ch / 2 / chrule}px`,\r\n                left: `${planet.fa / farule / 2 - planet.ch / 2 / chrule}px`,\r\n                backgroundColor:`${planet.color}`\r\n                }\"\r\n            ></div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props:{\r\n        solarWidth:{\r\n            type:Number,\r\n            default:1920\r\n        },\r\n        solarHeight:{\r\n            type:Number,\r\n            default:1000\r\n        }\r\n    },\r\n  data() {\r\n    return {\r\n      farule:50,//公转轨道比例\r\n      chrule:200,//行星直径比例\r\n      speedrule:1,//公转周期比例 越大公转周期越短 为1时即 1s = 1天 为2时 1s = 2天\r\n      system: [\r\n        {\r\n          name: \"Mercury\",//名称\r\n          fa: 5791,//轨道半长轴 万千米\r\n          ch: 2440,//赤道半径 千米\r\n          speed: 88,//公转周期 天\r\n          color:'grey'//颜色\r\n        },\r\n        {\r\n          name: \"Venus\",\r\n          fa: 10820.9,\r\n          ch: 6073,\r\n          speed: 224.701,\r\n          color:'gold'\r\n        },\r\n        {\r\n          name: \"Earth\",\r\n          fa: 15029,\r\n          ch: 6378,\r\n          speed: 365,\r\n          color:'blue'\r\n        },\r\n        {\r\n          name: \"Mars\",\r\n          fa: 22899.729625,\r\n          ch: 3397.2,\r\n          speed: 686.98,\r\n          color:'red'\r\n        },\r\n        // {\r\n        //   name: \"Jupiter\",\r\n        //   fa: 78151,\r\n        //   ch: 71492,\r\n        //   speed: 11.86 * 365,\r\n        //   color:'#c7c776'\r\n        // },\r\n        // {\r\n        //   name: \"Saturn\",\r\n        //   fa: 143361.89,\r\n        //   ch: 60000,\r\n        //   speed: 29.458 * 365,\r\n        //   color:'#f3f3c4'\r\n        // },\r\n        // {\r\n        //   name: \"Uranus\",\r\n        //   fa: 288827.8,\r\n        //   ch: 25559,\r\n        //   speed: 84 * 365,\r\n        //   color:'#a6eaff'\r\n        // },\r\n        // {\r\n        //   name: \"Neptune\",\r\n        //   fa: 451741,\r\n        //   ch: 24766,\r\n        //   speed: 90581,\r\n        //   color:'#476fff'\r\n        // },\r\n      ],\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.container {\r\n  background-color: black;\r\n  margin: auto;\r\n  position: relative;\r\n}\r\n.fa {\r\n  margin: auto;\r\n  border: 1px solid #fff;\r\n  border-radius: 50%;\r\n  animation: rotate 1s linear infinite;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n}\r\n.ch {\r\n  border: 1px solid #000;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n}\r\n@keyframes rotate {\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.sunny{\r\n\r\n    width: 20px;\r\n\r\n    height: 140px;\r\n\r\n    position: absolute;\r\n\r\n    top: 378px;\r\n\r\n    left: 197px;\r\n\r\n    background: -webkit-linear-gradient(top, rgba(255,255,255,0) 0%,  rgba(255,255,255,0.8) 50%, rgba(255,255,255,0) 100%);\r\n\r\n    animation: sunny 15s linear infinite;\r\n\r\n}\r\n\r\n@keyframes sunny {\r\n\r\n    0%{\r\n\r\n    transform: rotate(0deg);\r\n\r\n    }\r\n\r\n    100%{\r\n\r\n    transform: rotate(360deg);\r\n\r\n    }\r\n\r\n}\r\n.sunny::before{\r\n\r\n    content: '';\r\n\r\n    width: 20px;\r\n\r\n    height: 140px;\r\n\r\n    position: absolute;\r\n\r\n    bottom: 0;\r\n\r\n    left: 0;\r\n\r\n    background: -webkit-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,0.8) 50%, rgba(255,255,255,0) 100%);\r\n\r\n    transform: rotate(90deg)\r\n\r\n}\r\n\r\n.sunny::after{\r\n\r\n    content: '';\r\n\r\n    width: 80px;\r\n\r\n    height: 80px;\r\n\r\n    position: absolute;\r\n\r\n    top: 30px;\r\n\r\n    left: -30px;\r\n\r\n    background: #ffee44;\r\n\r\n    border-radius: 50%;\r\n\r\n    box-shadow: rgba(255,255,0,0.2) 0 0 0 15px;\r\n\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/components/solar-system.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\",style:({'width': _vm.solarWidth+'px','height':_vm.solarHeight+'px'})},[_c('div',{staticClass:\"sunny\"}),_vm._v(\" \"),_vm._l((_vm.system),function(planet,index){return _c('div',{key:'system' + index,staticClass:\"fa fa-contain\",style:({\n        height: ((planet.fa / _vm.farule) + \"px\"),\n        width: ((planet.fa / _vm.farule) + \"px\"),\n        animationDuration: ((planet.speed / _vm.speedrule) + \"s\"),\n    })},[_c('div',{staticClass:\"ch\",style:({\n            height: ((planet.ch / _vm.chrule) + \"px\"),\n            width: ((planet.ch / _vm.chrule) + \"px\"),\n            top: (\"-\" + (planet.ch / 2 / _vm.chrule) + \"px\"),\n            left: ((planet.fa / _vm.farule / 2 - planet.ch / 2 / _vm.chrule) + \"px\"),\n            backgroundColor:(\"\" + (planet.color))\n            })})])})],2)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-7ab483a4\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/solar-system.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-7ab483a4\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./solar-system.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./solar-system.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./solar-system.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-7ab483a4\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./solar-system.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/solar-system.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}